{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FixGenie - Revolutionary AI-Powered Code Analysis & Mentorship Platform\n\n## Overview\n\nFixGenie is the world's most advanced AI-powered code analysis platform that revolutionizes how developers learn, debug, and optimize code. Featuring intelligent error detection with GPT-4o, high-quality Murf TTS explanations, comprehensive settings management, and user analytics across 320+ programming languages, FixGenie represents the next generation of developer debugging tools.\n\n## Revolutionary Unique Features (July 2025)\n\n### üß† AI-Powered Personal Mentor System with Advanced Logical Error Detection\n- **Personalized Learning Paths**: Custom-generated learning journeys based on individual coding patterns and skill assessments\n- **Intelligent Code Optimization**: Real-time performance, readability, and maintainability improvements with GPT-4o\n- **Advanced Logical Error Detection**: Revolutionary AI-powered system that detects sophisticated logical errors including:\n  - Infinite loops and unreachable code detection\n  - Assignment vs comparison operator errors (= vs ==)\n  - Array bounds violations and off-by-one errors\n  - Division by zero and mathematical logic errors\n  - Variable initialization and scope problems\n  - Algorithm correctness and control flow issues\n- **Advanced Security Auditing**: Comprehensive vulnerability detection with OWASP compliance checking and risk scoring\n- **Smart Code Suggestions**: Context-aware code completion, refactoring recommendations, and architectural pattern suggestions\n- **Natural Language to Code**: Generate production-ready code from plain English descriptions\n- **Image-to-Code Generation**: Revolutionary capability to generate code from diagrams, mockups, and handwritten notes\n\n### üë• Real-Time Collaborative Development\n- **Live Code Collaboration**: Multi-user real-time code editing with cursor tracking and participant awareness\n- **Voice Annotations**: Record and share voice explanations directly on code lines for enhanced communication\n- **Session Management**: Create, join, and manage collaborative coding sessions with advanced participant controls\n- **WebSocket Integration**: Low-latency real-time synchronization for seamless collaborative experience\n\n### üìä Advanced Analytics & Progress Tracking\n- **Comprehensive Code Metrics**: Cyclomatic complexity, cognitive load, Halstead metrics, and technical debt analysis\n- **Skill Progression System**: Gamified learning with experience points, levels, and achievement unlocking\n- **Personalized Insights**: AI-generated recommendations based on coding patterns and improvement opportunities\n- **Visual Analytics Dashboard**: Interactive charts showing quality trends, language distribution, and skill radar\n- **Achievement System**: Rare, epic, and legendary achievements to motivate continuous learning\n\n### üéØ Intelligent Code Generation Suite\n- **Smart Refactoring Engine**: AI-powered code restructuring with safety assessments and impact analysis\n- **Architectural Pattern Suggestions**: Intelligent recommendations for design patterns and software architecture\n- **Code Quality Optimization**: Automated improvements for maintainability, performance, and security\n- **Context-Aware Suggestions**: Project-aware code completion and improvement recommendations\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (July 2025)\n\n### User Profile System - Fully Functional\n- **Real API Integration**: Created `/api/user/profile/:userId` endpoint with real data fetching\n- **Complete Menu Functionality**: All menu items (View Profile, Account Settings, Usage & Billing, Help & Support) now have working modals\n- **Data Integration**: Profile displays real statistics from user analysis history\n- **Authentication Features**: Working logout functionality with proper error handling\n- **Interactive Modals**: Comprehensive modals for each menu item with rich content and proper styling\n\n### Component Headers - Visibility Fixed\n- **AI Mentor Text**: Changed from transparent gradient to solid white for better visibility\n- **Analytics Dashboard Text**: Updated text color to white for proper contrast\n- **Consistent Theming**: All major component headers now use readable white text\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom FixGenie dark theme\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Code Editor**: Monaco Editor with custom theming and error highlighting\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Middleware**: Express middleware for request logging and error handling\n- **Development**: Hot reload with Vite middleware integration\n\n### Database & ORM\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations\n- **Storage**: In-memory storage fallback for development\n\n## Key Components\n\n### Code Analysis Engine\n- **Primary Service**: OpenAI GPT-4o integration for intelligent code analysis\n- **Error Detection**: Multi-type error identification (syntax, logical, runtime, semantic)\n- **Severity Classification**: Error, warning, and info level categorization\n- **Fix Suggestions**: Actionable code improvements and corrections\n\n### Text-to-Speech Integration\n- **Provider**: Murf AI TTS service\n- **Voice Options**: Multiple voice personalities and languages\n- **Audio Controls**: Playback speed, volume, and download functionality\n- **Real-time Generation**: On-demand audio explanation creation\n\n### Universal Multi-Language Support  \n- **Supported Languages**: 320+ programming languages across 35+ specialized categories\n  - **Core Languages**: C, C++, C#, Java, Python, JavaScript, TypeScript, Go, Rust, Swift\n  - **Compiled**: Fortran, ALGOL, COBOL, Visual Basic, Smalltalk, Ada, Nim\n  - **Interpreted**: Ruby, Perl, Pascal, Lisp, BASIC, APL, Julia, MATLAB\n  - **Scripting**: PHP, VBScript, PowerShell, Bash, R, Lua, Tcl\n  - **Markup & Data**: HTML, XML, YAML, JSON, TOML, CSS, SCSS, Less\n  - **Functional**: Haskell, Scala, Clojure, Erlang, Elixir, F#, Racket\n  - **üß™ Esoteric**: Brainfuck, LOLCODE, Whitespace, Malbolge, Befunge, INTERCAL, Ook!, Piet\n  - **üß¨ Scientific**: J, Nial, IDL, GAMS, Mathematica/Wolfram, Scilab, GNU Octave, SageMath, Modelica\n  - **üßô‚Äç‚ôÇÔ∏è Blockchain**: Solidity, Vyper, Move, Cairo, Scilla, Michelson, Clarity\n  - **üß∞ Configuration**: Makefile, HCL, Gradle DSL, CMake, Bazel/Starlark, Nix, Dockerfile, Ansible\n  - **üß© Emerging & Specialized**: Zig, Crystal, Bosque, V, Odin, Red, Pony, Grain, Carbon, Vale\n  - **üß† AI & ML-Focused**: Mojo, Gen\n  - **üß© Domain-Specific**: Elm, Pony, Red\n  - **üßô‚Äç‚ôÄÔ∏è Obscure but Intriguing**: LOOP, Frink, Rebol\n  - **üß† Metaprogramming**: Racket, Elixir, Nim, Hy, Template Haskell, Rust Macros\n  - **üßë‚Äçüè´ Educational**: Kalaam (Hindi), Citrine, Hedy, Kojo, Snap!, TurtleStitch, Quorum, Greenfoot\n  - **Hardware Description**: Verilog, VHDL, ABEL, AHDL, Bluespec, Lava\n  - **Assembly**: ARM, x86, MIPS, SPARC, System/360\n  - **Logic Programming**: Prolog, ALF, Alma-0, Fril, Janus\n  - **Visual/Educational**: Scratch, Logo, Alice, Blockly, Karel\n  - **Non-English**: Chinese BASIC, Fj√∂lnir (Icelandic), LSE (French), Lexico (Spanish), Rapira (Russian), ChaScript (Bengali), ezhil (Tamil)\n  - **üß† Artistic**: Piet (Visual Art), Shakespeare Programming Language, Chef, Velato, Taxi\n  - **üß¨ Mathematical**: Modelica, AMPL, Z3 SMT-LIB, Maple, Maxima, GAP\n  - **üßô‚Äç‚ôÄÔ∏è AI/Knowledge**: CycL, OpenCog Atomese, CLIPS, Drools, SWRL, Jess\n  - **üß© Robotics**: URBI, NQC (Lego Mindstorms), Ch, Robocode, ROS Launch, Arduino\n  - **üßë‚Äçüé® Creative**: Processing, openFrameworks, Pure Data, SuperCollider, ChucK, p5.js, Cinder\n  - **üßë‚Äçüî¨ Bioinformatics**: BioPerl, Bioconductor, CellML, BioPython, BioJava, EMBOSS, PHYLIP\n  - **üß∞ Infrastructure**: Starlark, Dhall, CUE, Jsonnet, Pulumi, Helm, Kustomize\n  - **üß¨ Constraint/Rules**: CHR (Constraint Handling Rules), Drools (Business Rules), Jess (Expert Systems)\n  - **üß© DSL Creation**: MetaOCaml, Rascal, Spoofax, Xtext, JetBrains MPS\n  - **üßô‚Äç‚ôÇÔ∏è Quantum Computing**: QCL, ProjectQ, LIQUi‚ü©, Q#, Cirq\n  - **üß∞ Advanced Automation**: Ansible YAML DSL, Terraform HCL, Pulumi Multi-language\n  - **üßë‚Äçüé® Creative Advanced**: ChucK Audio Synthesis, SuperCollider Algorithmic Composition, Hydra Live Visuals, Sonic Pi, TidalCycles\n  - **üßë‚Äçüè´ Accessibility**: Quorum Accessibility, Hedy Gradual Programming, TurtleArt\n  - **üß† Historical Languages**: TRAC (1960s), TUTOR (PLATO), JOSS, MAD, FOCAL, PILOT, SNOBOL\n  - **üß¨ Simulation/Modeling**: GPSS, SIMSCRIPT, DYNAMO, STELLA/iThink, Vensim\n  - **üßô‚Äç‚ôÇÔ∏è Advanced Quantum**: QCL, LIQUi‚ü© Toolkit, OpenQASM (IBM)\n  - **üß∞ Advanced Infrastructure**: Bicep (Azure), Tiltfile (Kubernetes), CUE Advanced\n  - **üßë‚Äçüé® Multimedia Advanced**: Fluxus, Gibber, Impromptu\n  - **üß† Obsolete/Ultra-Rare**: REXX, EGL, CMS-2, JOVIAL, NATURAL\n  - **üß¨ Hardware-Specific**: OpenCL C, ShaderLab, VHDL-AMS, SystemVerilog\n  - **üß© Language Design**: TXL, ASF+SDF, Stratego/XT\n  - **üßô‚Äç‚ôÄÔ∏è Security/Formal**: SPARK Ada, Cryptol, F*\n  - **üßë‚Äçüé® Live Performance**: Impromptu Performance, Extempore, TidalCycles Performance\n- **Monaco Integration**: Language-specific syntax highlighting and IntelliSense\n\n### User Interface Components\n- **Code Editor**: Full-featured Monaco editor with error markers\n- **Error Panel**: Detailed error analysis with fix suggestions\n- **Voice Player**: Audio playback controls with progress tracking\n- **Sidebar**: Language selection, voice settings, and recent analyses\n- **Floating Actions**: Voice commands and help accessibility\n\n## Data Flow\n\n1. **Code Input**: User writes or pastes code in Monaco editor\n2. **Analysis Request**: Code sent to backend analysis endpoint\n3. **AI Processing**: OpenAI analyzes code and returns structured error data\n4. **Database Storage**: Analysis results stored with user association\n5. **UI Update**: Frontend displays errors with visual indicators\n6. **Voice Generation**: On-demand TTS generation via Murf API\n7. **Audio Playback**: Generated audio served and played in browser\n\n## External Dependencies\n\n### AI Services\n- **OpenAI API**: GPT-4o model for code analysis\n- **Murf AI**: Text-to-speech generation service\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Connection**: @neondatabase/serverless driver\n\n### Development Tools\n- **Replit Integration**: Development environment optimization\n- **Monaco Editor**: Microsoft's code editor (VS Code engine)\n- **Cartographer**: Replit's development tooling\n\n### UI Framework\n- **Radix UI**: Headless component primitives\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide Icons**: Consistent icon library\n\n## Deployment Strategy\n\n### Development Environment\n- **Hot Reload**: Vite development server with Express backend\n- **Environment Variables**: API keys and database URLs\n- **TypeScript**: Full type checking and compilation\n\n### Production Build\n- **Frontend**: Vite builds optimized static assets\n- **Backend**: esbuild bundles Node.js server code\n- **Serving**: Express serves both API and static files\n\n### Environment Configuration\n- **Database**: PostgreSQL via DATABASE_URL environment variable\n- **API Keys**: OpenAI and Murf API credentials via environment variables\n- **Build Targets**: Separate client and server build processes\n\n### Session Management\n- **Storage**: connect-pg-simple for PostgreSQL session store\n- **Authentication**: Placeholder user system (userId: 1)\n- **State Persistence**: Query caching with TanStack Query\n\nThe application is designed as a full-stack TypeScript application with clear separation between frontend and backend concerns, leveraging modern development practices and AI services for an enhanced code analysis experience.","size_bytes":12332},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { errorAnalyzer } from \"./services/errorAnalyzer\";\nimport { getMurfVoices, generateSpeech } from \"./services/murf\";\nimport { insertErrorAnalysisSchema } from \"@shared/schema\";\nimport { generatePersonalizedMentorship, generateCodeOptimization, generateSecurityAudit } from \"./services/aiMentor\";\nimport { collaborationManager } from \"./services/realTimeCollaboration\";\nimport { generateIntelligentSuggestions, generateSmartRefactoring, suggestArchitecturalPatterns, generateFromNaturalLanguage, generateCodeFromImage } from \"./services/intelligentCodeGen\";\nimport { analyzeCodeMetrics, generatePersonalizedInsights, calculateSkillProgression, generateAchievements, generateVisualizationData } from \"./services/analytics\";\nimport { intelligentBackend } from \"./services/intelligentBackend\";\nimport { universalErrorAnalyzer, type ErrorAnalysisResult } from \"./services/universalErrorAnalyzer\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Universal Code Error Analysis - Works with any programming language\n  app.post(\"/api/analyze\", async (req, res) => {\n    try {\n      const { code, language } = req.body;\n      \n      if (!code || !language) {\n        return res.status(400).json({ \n          message: \"Missing required fields: code and language are required\" \n        });\n      }\n      \n      // Use universal error analyzer for comprehensive analysis including logical errors\n      const analysis: ErrorAnalysisResult = await universalErrorAnalyzer.analyzeCode(code, language);\n      \n      // Store analysis for user history (optional)\n      const userId = 1; // TODO: Get from session/auth\n      try {\n        await storage.createErrorAnalysis({\n          userId,\n          language,\n          code,\n          errors: analysis.errors.map(e => ({\n            type: e.type,\n            severity: e.severity,\n            message: e.message,\n            line: e.line,\n            column: e.column,\n            suggestion: e.suggestion\n          })),\n        });\n      } catch (storageError) {\n        console.log('Failed to store analysis, continuing with response:', storageError);\n      }\n      \n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze code\" \n      });\n    }\n  });\n\n  app.get(\"/api/analysis/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const analysis = await storage.getErrorAnalysis(id);\n      \n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n      \n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get analysis\" \n      });\n    }\n  });\n\n  app.get(\"/api/recent-analyses\", async (req, res) => {\n    try {\n      const userId = 1; // TODO: Get from session/auth\n      const limit = parseInt(req.query.limit as string) || 10;\n      \n      const analyses = await storage.getUserErrorAnalyses(userId, limit);\n      res.json(analyses);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get recent analyses\" \n      });\n    }\n  });\n\n  // Voice generation endpoints - Fixed and Simplified\n  app.post(\"/api/generate-voice\", async (req, res) => {\n    try {\n      console.log('Voice generation request received:', req.body);\n      \n      const schema = z.object({\n        text: z.string().min(1, \"Text is required\"),\n        voiceId: z.string().optional().default(\"natalie\"),\n        speed: z.number().min(0.5).max(2).optional().default(1.0),\n      });\n      \n      const { text, voiceId, speed } = schema.parse(req.body);\n      \n      console.log('Generating voice for text:', text.substring(0, 100) + '...');\n      \n      try {\n        // Use Murf TTS with updated API key\n        console.log('Attempting Murf TTS generation...');\n        const { audioUrl, duration } = await generateSpeech(text, voiceId, {\n          speed,\n          format: 'mp3',\n        });\n        \n        console.log('Murf TTS successful:', audioUrl);\n        \n        res.json({\n          success: true,\n          audioUrl,\n          duration,\n          provider: 'murf',\n          text: text.substring(0, 200) + (text.length > 200 ? '...' : ''),\n          voiceId,\n          speed\n        });\n      } catch (murfError) {\n        console.error('Murf TTS failed:', murfError);\n        res.status(500).json({ \n          success: false,\n          message: `Murf TTS failed: ${murfError.message}`,\n          error: 'MURF_API_ERROR'\n        });\n      }\n    } catch (validationError) {\n      console.error('Voice generation validation error:', validationError);\n      res.status(400).json({ \n        success: false,\n        message: validationError instanceof Error ? validationError.message : \"Invalid request parameters\" \n      });\n    }\n  });\n\n  app.get(\"/api/voices\", async (req, res) => {\n    try {\n      const voices = await getMurfVoices();\n      res.json(voices);\n    } catch (error) {\n      // Fallback voices when Murf API is not available\n      const fallbackVoices = [\n        { id: \"voice_us_male\", name: \"US Male\", language: \"en-US\", gender: \"male\" },\n        { id: \"voice_us_female\", name: \"US Female\", language: \"en-US\", gender: \"female\" },\n        { id: \"voice_uk_male\", name: \"UK Male\", language: \"en-GB\", gender: \"male\" },\n        { id: \"voice_uk_female\", name: \"UK Female\", language: \"en-GB\", gender: \"female\" }\n      ];\n      res.json(fallbackVoices);\n    }\n  });\n\n  // NEW: Direct TTS Generation for Error Explanations\n  app.post(\"/api/generate-error-speech\", async (req, res) => {\n    try {\n      const { text, voiceId = \"natalie\", speed = 1.0 } = req.body;\n      \n      if (!text) {\n        return res.status(400).json({ \n          message: \"Missing required field: text\" \n        });\n      }\n\n      try {\n        // Try Murf TTS first\n        const { audioUrl, duration } = await generateSpeech(text, voiceId, {\n          speed,\n          format: 'mp3',\n        });\n        \n        res.json({\n          success: true,\n          audioUrl,\n          duration,\n          provider: 'murf',\n          text: text\n        });\n      } catch (murfError) {\n        // Fallback: Return text and mock audio response\n        console.log('Murf TTS failed, providing fallback response:', murfError.message);\n        \n        res.json({\n          success: true,\n          audioUrl: null,\n          duration: Math.ceil(text.length / 10), // Estimate: ~10 chars per second\n          provider: 'fallback',\n          text: text,\n          message: 'TTS service temporarily unavailable. Text explanation provided.'\n        });\n      }\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate speech\" \n      });\n    }\n  });\n\n  app.get(\"/api/voice-generation/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const voiceGeneration = await storage.getVoiceGeneration(id);\n      \n      if (!voiceGeneration) {\n        return res.status(404).json({ message: \"Voice generation not found\" });\n      }\n      \n      res.json(voiceGeneration);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get voice generation\" \n      });\n    }\n  });\n\n  // Language suggestions endpoint\n  app.get(\"/api/language-suggestions/:language\", async (req, res) => {\n    try {\n      const language = req.params.language;\n      const suggestions = await errorAnalyzer.getLanguageSpecificSuggestions(language);\n      res.json({ suggestions });\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get suggestions\" \n      });\n    }\n  });\n\n  // Advanced AI Mentor endpoints\n  app.post(\"/api/ai-mentor/mentorship\", async (req, res) => {\n    try {\n      const { code, language } = req.body;\n      const userId = 1; // TODO: Get from session/auth\n      const userHistory = await storage.getRecentAnalyses(userId, 20);\n      \n      const mentorship = await generatePersonalizedMentorship(code, language, userHistory);\n      res.json(mentorship);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate mentorship\" \n      });\n    }\n  });\n\n  app.post(\"/api/ai-mentor/optimize\", async (req, res) => {\n    try {\n      const { code, language, goals } = req.body;\n      const optimization = await generateCodeOptimization(code, language, goals || ['performance', 'readability']);\n      res.json(optimization);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate optimization\" \n      });\n    }\n  });\n\n  app.post(\"/api/ai-mentor/security-audit\", async (req, res) => {\n    try {\n      const { code, language } = req.body;\n      const audit = await generateSecurityAudit(code, language);\n      res.json(audit);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate security audit\" \n      });\n    }\n  });\n\n  // Intelligent Code Generation endpoints\n  app.post(\"/api/codegen/suggestions\", async (req, res) => {\n    try {\n      const { code, language, context } = req.body;\n      const suggestions = await generateIntelligentSuggestions(code, language, context);\n      res.json(suggestions);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate suggestions\" \n      });\n    }\n  });\n\n  app.post(\"/api/codegen/refactor\", async (req, res) => {\n    try {\n      const { code, language, goals } = req.body;\n      const refactorings = await generateSmartRefactoring(code, language, goals || ['maintainability', 'performance']);\n      res.json(refactorings);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate refactoring suggestions\" \n      });\n    }\n  });\n\n  app.post(\"/api/codegen/patterns\", async (req, res) => {\n    try {\n      const { codebase, language, requirements } = req.body;\n      const patterns = await suggestArchitecturalPatterns(codebase, language, requirements);\n      res.json(patterns);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to suggest patterns\" \n      });\n    }\n  });\n\n  app.post(\"/api/codegen/from-text\", async (req, res) => {\n    try {\n      const { description, language, style } = req.body;\n      const generated = await generateFromNaturalLanguage(description, language, style);\n      res.json(generated);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate code from description\" \n      });\n    }\n  });\n\n  app.post(\"/api/codegen/from-image\", async (req, res) => {\n    try {\n      const { imageBase64, language } = req.body;\n      const generated = await generateCodeFromImage(imageBase64, language);\n      res.json(generated);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate code from image\" \n      });\n    }\n  });\n\n  // Analytics and Progress Tracking endpoints\n  app.post(\"/api/analytics/metrics\", async (req, res) => {\n    try {\n      const { code, language } = req.body;\n      const metrics = await analyzeCodeMetrics(code, language);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to analyze metrics\" \n      });\n    }\n  });\n\n  app.get(\"/api/analytics/insights/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId) || 1;\n      const userHistory = await storage.getRecentAnalyses(userId, 50);\n      \n      // Mock metrics data for now\n      const codeMetrics: any[] = [];\n      const languageUsage = userHistory.reduce((acc: any, h: any) => {\n        acc[h.language] = (acc[h.language] || 0) + 1;\n        return acc;\n      }, {});\n      \n      const insights = await generatePersonalizedInsights(userHistory, codeMetrics, languageUsage);\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate insights\" \n      });\n    }\n  });\n\n  app.get(\"/api/analytics/progress/:userId/:language\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId) || 1;\n      const language = req.params.language;\n      const userHistory = await storage.getRecentAnalyses(userId, 100);\n      \n      const progression = calculateSkillProgression(userHistory, language);\n      res.json(progression);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to calculate progression\" \n      });\n    }\n  });\n\n  app.get(\"/api/analytics/achievements/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId) || 1;\n      const userHistory = await storage.getRecentAnalyses(userId, 100);\n      \n      const achievements = generateAchievements(userHistory, []);\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate achievements\" \n      });\n    }\n  });\n\n  // User Profile endpoints\n  app.get(\"/api/user/profile/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      // Get user basic info (mock for now, would come from auth system)\n      const userData = {\n        id: userId,\n        name: \"FixGenie User\",\n        email: \"user@fixgenie.ai\",\n        username: \"fixgenie_user\",\n        plan: \"Pro\",\n        level: 42,\n        experience: 15840,\n        nextLevelExp: 16500,\n        joinDate: \"March 2024\",\n        avatar: null,\n        preferences: {\n          theme: \"dark\",\n          notifications: true,\n          autoPlay: true\n        }\n      };\n\n      // Get real statistics from database\n      const recentAnalyses = await storage.getUserErrorAnalyses(userId, 1000);\n      const achievements = 24; // Could be calculated from actual achievements\n      const codesSolved = recentAnalyses.length;\n      \n      const profileData = {\n        ...userData,\n        achievements,\n        codesSolved,\n        totalAnalyses: recentAnalyses.length,\n        languagesUsed: [...new Set(recentAnalyses.map(a => a.language))].length\n      };\n\n      res.json(profileData);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get user profile\" \n      });\n    }\n  });\n\n  app.put(\"/api/user/profile/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const updates = req.body;\n      \n      // In a real app, this would update the user in the database\n      // For now, we'll just return success\n      res.json({ \n        success: true, \n        message: \"Profile updated successfully\",\n        updatedFields: Object.keys(updates)\n      });\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to update profile\" \n      });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      // In a real app, this would handle session cleanup\n      res.json({ \n        success: true, \n        message: \"Logged out successfully\" \n      });\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to logout\" \n      });\n    }\n  });\n\n  app.get(\"/api/analytics/dashboard/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId) || 1;\n      const userHistory = await storage.getRecentAnalyses(userId, 100);\n      \n      const visualizationData = generateVisualizationData(userHistory, []);\n      res.json(visualizationData);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to generate dashboard data\" \n      });\n    }\n  });\n\n  // NEW: Sample Code Generation API for All 320 Languages\n  app.get(\"/api/sample-code/:language\", async (req, res) => {\n    try {\n      const language = req.params.language.toLowerCase();\n      const sampleCode = universalErrorAnalyzer.generateSampleCode(language);\n      \n      res.json({\n        language,\n        code: sampleCode,\n        success: true\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: error instanceof Error ? error.message : \"Failed to generate sample code\",\n        success: false\n      });\n    }\n  });\n\n  // Real-time Collaboration endpoints\n  app.get(\"/api/collaboration/sessions\", async (req, res) => {\n    try {\n      const sessions = collaborationManager.getAllSessions();\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get collaboration sessions\" \n      });\n    }\n  });\n\n  app.get(\"/api/collaboration/session/:id\", async (req, res) => {\n    try {\n      const sessionId = req.params.id;\n      const session = collaborationManager.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to get session\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize real-time collaboration\n  collaborationManager.initialize(httpServer);\n  return httpServer;\n}\n","size_bytes":17982},"server/storage.ts":{"content":"import { users, errorAnalyses, voiceGenerations, type User, type InsertUser, type ErrorAnalysis, type InsertErrorAnalysis, type VoiceGeneration, type InsertVoiceGeneration } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createErrorAnalysis(analysis: InsertErrorAnalysis & { userId: number }): Promise<ErrorAnalysis>;\n  getErrorAnalysis(id: number): Promise<ErrorAnalysis | undefined>;\n  getUserErrorAnalyses(userId: number, limit?: number): Promise<ErrorAnalysis[]>;\n  getRecentAnalyses(userId: number, limit?: number): Promise<ErrorAnalysis[]>;\n  \n  createVoiceGeneration(generation: InsertVoiceGeneration): Promise<VoiceGeneration>;\n  getVoiceGeneration(id: number): Promise<VoiceGeneration | undefined>;\n  getErrorVoiceGenerations(errorAnalysisId: number): Promise<VoiceGeneration[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private errorAnalyses: Map<number, ErrorAnalysis>;\n  private voiceGenerations: Map<number, VoiceGeneration>;\n  private currentUserId: number;\n  private currentErrorAnalysisId: number;\n  private currentVoiceGenerationId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.errorAnalyses = new Map();\n    this.voiceGenerations = new Map();\n    this.currentUserId = 1;\n    this.currentErrorAnalysisId = 1;\n    this.currentVoiceGenerationId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createErrorAnalysis(analysis: InsertErrorAnalysis & { userId: number }): Promise<ErrorAnalysis> {\n    const id = this.currentErrorAnalysisId++;\n    const errorAnalysis: ErrorAnalysis = {\n      ...analysis,\n      id,\n      createdAt: new Date(),\n    };\n    this.errorAnalyses.set(id, errorAnalysis);\n    return errorAnalysis;\n  }\n\n  async getErrorAnalysis(id: number): Promise<ErrorAnalysis | undefined> {\n    return this.errorAnalyses.get(id);\n  }\n\n  async getUserErrorAnalyses(userId: number, limit: number = 10): Promise<ErrorAnalysis[]> {\n    return Array.from(this.errorAnalyses.values())\n      .filter(analysis => analysis.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  async getRecentAnalyses(userId: number, limit: number = 50): Promise<ErrorAnalysis[]> {\n    return this.getUserErrorAnalyses(userId, limit);\n  }\n\n  async createVoiceGeneration(generation: InsertVoiceGeneration): Promise<VoiceGeneration> {\n    const id = this.currentVoiceGenerationId++;\n    const voiceGeneration: VoiceGeneration = {\n      id,\n      errorAnalysisId: generation.errorAnalysisId!,\n      voiceId: generation.voiceId,\n      text: generation.text,\n      audioUrl: null,\n      duration: null,\n      createdAt: new Date(),\n    };\n    this.voiceGenerations.set(id, voiceGeneration);\n    return voiceGeneration;\n  }\n\n  async getVoiceGeneration(id: number): Promise<VoiceGeneration | undefined> {\n    return this.voiceGenerations.get(id);\n  }\n\n  async getErrorVoiceGenerations(errorAnalysisId: number): Promise<VoiceGeneration[]> {\n    return Array.from(this.voiceGenerations.values())\n      .filter(generation => generation.errorAnalysisId === errorAnalysisId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n}\n\n// Database Storage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createErrorAnalysis(analysis: InsertErrorAnalysis & { userId: number }): Promise<ErrorAnalysis> {\n    const [errorAnalysis] = await db\n      .insert(errorAnalyses)\n      .values({\n        ...analysis,\n        createdAt: new Date(),\n      })\n      .returning();\n    return errorAnalysis;\n  }\n\n  async getErrorAnalysis(id: number): Promise<ErrorAnalysis | undefined> {\n    const [analysis] = await db.select().from(errorAnalyses).where(eq(errorAnalyses.id, id));\n    return analysis || undefined;\n  }\n\n  async getUserErrorAnalyses(userId: number, limit: number = 10): Promise<ErrorAnalysis[]> {\n    return await db\n      .select()\n      .from(errorAnalyses)\n      .where(eq(errorAnalyses.userId, userId))\n      .orderBy(errorAnalyses.createdAt)\n      .limit(limit);\n  }\n\n  async getRecentAnalyses(userId: number, limit: number = 50): Promise<ErrorAnalysis[]> {\n    return this.getUserErrorAnalyses(userId, limit);\n  }\n\n  async createVoiceGeneration(generation: InsertVoiceGeneration): Promise<VoiceGeneration> {\n    const [voiceGeneration] = await db\n      .insert(voiceGenerations)\n      .values({\n        ...generation,\n        createdAt: new Date(),\n      })\n      .returning();\n    return voiceGeneration;\n  }\n\n  async getVoiceGeneration(id: number): Promise<VoiceGeneration | undefined> {\n    const [generation] = await db.select().from(voiceGenerations).where(eq(voiceGenerations.id, id));\n    return generation || undefined;\n  }\n\n  async getErrorVoiceGenerations(errorAnalysisId: number): Promise<VoiceGeneration[]> {\n    return await db\n      .select()\n      .from(voiceGenerations)\n      .where(eq(voiceGenerations.errorAnalysisId, errorAnalysisId))\n      .orderBy(voiceGenerations.createdAt);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6261},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const errorAnalyses = pgTable(\"error_analyses\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  language: text(\"language\").notNull(),\n  code: text(\"code\").notNull(),\n  errors: jsonb(\"errors\").$type<ErrorDetail[]>().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const voiceGenerations = pgTable(\"voice_generations\", {\n  id: serial(\"id\").primaryKey(),\n  errorAnalysisId: integer(\"error_analysis_id\").references(() => errorAnalyses.id).notNull(),\n  voiceId: text(\"voice_id\").notNull(),\n  text: text(\"text\").notNull(),\n  audioUrl: text(\"audio_url\"),\n  duration: integer(\"duration\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertErrorAnalysisSchema = createInsertSchema(errorAnalyses).pick({\n  language: true,\n  code: true,\n  errors: true,\n}).extend({\n  errors: z.array(z.object({\n    type: z.enum(['syntax', 'logical', 'runtime', 'semantic']),\n    severity: z.enum(['error', 'warning', 'info']),\n    message: z.string(),\n    line: z.number(),\n    column: z.number().optional(),\n    suggestion: z.string().optional(),\n    fix: z.string().optional(),\n  })),\n});\n\nexport const insertVoiceGenerationSchema = createInsertSchema(voiceGenerations).pick({\n  errorAnalysisId: true,\n  voiceId: true,\n  text: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertErrorAnalysis = z.infer<typeof insertErrorAnalysisSchema>;\nexport type ErrorAnalysis = typeof errorAnalyses.$inferSelect;\nexport type InsertVoiceGeneration = z.infer<typeof insertVoiceGenerationSchema>;\nexport type VoiceGeneration = typeof voiceGenerations.$inferSelect;\n\nexport interface ErrorDetail {\n  type: 'syntax' | 'logical' | 'runtime' | 'semantic';\n  severity: 'error' | 'warning' | 'info';\n  message: string;\n  line: number;\n  column?: number;\n  suggestion?: string;\n  fix?: string;\n}\n\nexport interface MurfVoice {\n  id: string;\n  name: string;\n  language: string;\n  gender: 'male' | 'female';\n  accent?: string;\n}\n","size_bytes":2530},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":807},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(263, 70%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(263, 70%, 50%);\n  --radius: 0.75rem;\n\n  /* FixGenie modern gradient colors */\n  --primary-gradient: linear-gradient(135deg, hsl(263, 70%, 50%) 0%, hsl(220, 70%, 50%) 100%);\n  --success-gradient: linear-gradient(135deg, hsl(142, 76%, 36%) 0%, hsl(158, 64%, 52%) 100%);\n  --warning-gradient: linear-gradient(135deg, hsl(32, 95%, 44%) 0%, hsl(43, 89%, 38%) 100%);\n  --error-gradient: linear-gradient(135deg, hsl(0, 84%, 60%) 0%, hsl(348, 83%, 47%) 100%);\n  \n  /* Advanced color palette */\n  --background-elevated: hsl(240, 5.9%, 10%);\n  --background-subtle: hsl(240, 4.8%, 5.9%);\n  --accent-purple: hsl(263, 70%, 50%);\n  --accent-blue: hsl(220, 70%, 50%);\n  --accent-cyan: hsl(187, 85%, 53%);\n  --accent-green: hsl(142, 76%, 36%);\n  --accent-orange: hsl(32, 95%, 44%);\n  --accent-red: hsl(0, 84%, 60%);\n  --accent-pink: hsl(316, 73%, 52%);\n  --text-primary: hsl(0, 0%, 98%);\n  --text-secondary: hsl(0, 0%, 95%);\n  --text-tertiary: hsl(0, 0%, 90%);\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 3.8%, 46.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --primary: hsl(263, 70%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.9%, 10%);\n  --accent: hsl(240, 4.8%, 95.9%);\n  --accent-foreground: hsl(240, 5.9%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(263, 70%, 50%);\n  --radius: 0.75rem;\n\n  /* Light mode gradient adjustments */\n  --background-elevated: hsl(240, 4.8%, 95.9%);\n  --background-subtle: hsl(240, 5.9%, 98%);\n  --text-primary: hsl(240, 10%, 3.9%);\n  --text-secondary: hsl(240, 3.8%, 46.1%);\n  --text-tertiary: hsl(240, 5%, 64.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n    background: radial-gradient(ellipse at top, rgba(120, 119, 198, 0.1) 0%, transparent 50%),\n                radial-gradient(ellipse at bottom, rgba(255, 154, 158, 0.1) 0%, transparent 50%);\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--dark));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--dark-border));\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--text-secondary));\n  }\n\n  /* Monaco Editor custom styles */\n  .monaco-editor {\n    font-family: 'JetBrains Mono', 'Cascadia Code', 'Fira Code', 'SF Mono', Monaco, 'Cascadia Mono', 'Roboto Mono', Consolas, 'Courier New', monospace !important;\n  }\n\n  .monaco-editor .margin {\n    background-color: hsl(var(--dark-elevated)) !important;\n  }\n\n  .monaco-editor .monaco-editor-background {\n    background-color: hsl(var(--dark)) !important;\n  }\n\n  /* Modern gradient and utility classes */\n  .bg-gradient-primary {\n    background: var(--primary-gradient);\n  }\n\n  .bg-gradient-success {\n    background: var(--success-gradient);\n  }\n\n  .bg-gradient-warning {\n    background: var(--warning-gradient);\n  }\n\n  .bg-gradient-error {\n    background: var(--error-gradient);\n  }\n\n  .bg-elevated {\n    background-color: hsl(var(--background-elevated));\n  }\n\n  .bg-subtle {\n    background-color: hsl(var(--background-subtle));\n  }\n\n  .text-primary {\n    color: hsl(var(--text-primary));\n  }\n\n  .text-secondary {\n    color: hsl(var(--text-secondary));\n  }\n\n  .text-tertiary {\n    color: hsl(var(--text-tertiary));\n  }\n\n  .text-accent-purple {\n    color: hsl(var(--accent-purple));\n  }\n\n  .text-accent-blue {\n    color: hsl(var(--accent-blue));\n  }\n\n  .text-accent-cyan {\n    color: hsl(var(--accent-cyan));\n  }\n\n  .text-accent-green {\n    color: hsl(var(--accent-green));\n  }\n\n  .text-accent-orange {\n    color: hsl(var(--accent-orange));\n  }\n\n  .text-accent-red {\n    color: hsl(var(--accent-red));\n  }\n\n  .text-accent-pink {\n    color: hsl(var(--accent-pink));\n  }\n\n  .border-elevated {\n    border-color: hsl(var(--background-elevated));\n  }\n\n  /* Glass morphism effects */\n  .glass {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glass-card {\n    background: rgba(255, 255, 255, 0.02);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  }\n\n  /* Modern shadows */\n  .shadow-glow {\n    box-shadow: 0 0 20px rgba(167, 139, 250, 0.3);\n  }\n\n  .shadow-success {\n    box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);\n  }\n\n  .shadow-warning {\n    box-shadow: 0 0 20px rgba(251, 146, 60, 0.3);\n  }\n\n  .shadow-error {\n    box-shadow: 0 0 20px rgba(239, 68, 68, 0.3);\n  }\n\n  /* Animations */\n  @keyframes pulse-glow {\n    0%, 100% {\n      opacity: 1;\n      box-shadow: 0 0 8px hsl(var(--success));\n    }\n    50% {\n      opacity: 0.8;\n      box-shadow: 0 0 16px hsl(var(--success));\n    }\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  /* AI Mentor Responsive Styles */\n  .ai-mentor-container {\n    width: 100%;\n    height: 100%;\n  }\n  \n  .responsive-header {\n    flex-wrap: wrap;\n  }\n  \n  .skill-level-mobile .w-20 {\n    width: 3rem;\n  }\n  \n  @media (max-width: 767px) {\n    .ai-mentor-container {\n      padding: 0.5rem;\n    }\n    \n    .skill-level-mobile {\n      width: 100%;\n      justify-content: flex-start;\n    }\n    \n    .skill-level-mobile .w-20 {\n      width: 4rem;\n    }\n    \n    .analytics-dashboard {\n      padding: 0.5rem;\n    }\n    \n    .collaboration-hub {\n      padding: 0.5rem;\n    }\n    \n    .glass-card {\n      padding: 0.75rem !important;\n    }\n    \n    .responsive-header {\n      flex-wrap: wrap;\n      align-items: flex-start;\n    }\n    \n    /* Mobile-specific chart containers */\n    .recharts-responsive-container {\n      height: 250px !important;\n    }\n  }\n\n  /* Global text color overrides for better visibility */\n  .text-secondary {\n    color: hsl(0, 0%, 95%) !important;\n  }\n  \n  .text-muted-foreground {\n    color: hsl(0, 0%, 85%) !important;\n  }\n  \n  /* Force all text to be visible */\n  .text-gray-400,\n  .text-gray-500,\n  .text-gray-600 {\n    color: hsl(0, 0%, 90%) !important;\n  }\n  \n  /* Make CardDescription text more visible */\n  .text-muted-foreground,\n  [data-description] {\n    color: hsl(0, 0%, 85%) !important;\n  }\n\n  /* Override any grey text in components */\n  .text-secondary,\n  .text-muted-foreground,\n  .text-gray-400,\n  .text-gray-500,\n  .text-gray-600,\n  .text-slate-400,\n  .text-slate-500,\n  .text-slate-600 {\n    color: hsl(0, 0%, 90%) !important;\n  }\n\n  /* Make all text in cards visible */\n  .glass p,\n  .glass span,\n  .glass div,\n  .card-content p,\n  .card-content span,\n  .card-content div {\n    color: hsl(0, 0%, 90%) !important;\n  }\n\n  /* Specific component text visibility fixes */\n  [class*=\"text-secondary\"],\n  [class*=\"text-muted\"] {\n    color: hsl(0, 0%, 90%) !important;\n  }\n\n  /* Code Editor specific styles */\n  .editor-container {\n    height: 100%;\n    display: flex;\n    min-height: 500px;\n  }\n  \n  .code-editor-wrapper {\n    flex: 1;\n    min-height: 400px;\n    display: flex;\n    flex-direction: column;\n  }\n\n  /* Landing Page Effects */\n  .bg-gradient-radial {\n    background: radial-gradient(circle, var(--tw-gradient-stops));\n  }\n\n  .bg-grid-pattern {\n    background-image: \n      linear-gradient(rgba(255, 255, 255, 0.1) 1px, transparent 1px),\n      linear-gradient(90deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px);\n    background-size: 50px 50px;\n  }\n\n  /* Enhanced responsive design for all screen sizes */\n  \n  /* Extra Large screens (1440px+) */\n  @media (min-width: 1440px) {\n    .sidebar-desktop {\n      display: block !important;\n      width: 24rem;\n    }\n    \n    .main-content {\n      padding: 2rem;\n    }\n    \n    .tab-content {\n      padding: 2rem;\n    }\n  }\n\n  /* Large screens (1280px - 1439px) */\n  @media (max-width: 1439px) and (min-width: 1280px) {\n    .sidebar-desktop {\n      display: block !important;\n      width: 22rem;\n    }\n    \n    .w-96 {\n      width: 20rem;\n    }\n  }\n\n  /* Medium-Large screens (1024px - 1279px) */\n  @media (max-width: 1279px) and (min-width: 1024px) {\n    .sidebar-desktop {\n      display: block !important;\n      width: 20rem;\n    }\n    \n    .w-80 {\n      width: 18rem;\n    }\n    \n    .w-96 {\n      width: 18rem;\n    }\n    \n    .tab-navigation {\n      padding: 0.75rem;\n    }\n    \n    .tab-button {\n      padding: 0.75rem 1rem;\n      font-size: 0.875rem;\n    }\n  }\n\n  /* Tablet Portrait (768px - 1023px) */\n  @media (max-width: 1023px) and (min-width: 768px) {\n    .sidebar-desktop {\n      display: block !important;\n      width: 16rem;\n      flex-shrink: 0;\n    }\n    \n    .main-content {\n      width: 100%;\n    }\n    \n    .tab-navigation {\n      padding: 0.5rem;\n      overflow-x: auto;\n      scrollbar-width: none;\n      -ms-overflow-style: none;\n    }\n    \n    .tab-navigation::-webkit-scrollbar {\n      display: none;\n    }\n    \n    .tab-container {\n      display: flex;\n      min-width: max-content;\n      gap: 0.5rem;\n    }\n    \n    .tab-button {\n      padding: 0.75rem 1.5rem;\n      white-space: nowrap;\n      flex-shrink: 0;\n    }\n    \n    .error-analysis-panel {\n      width: 100%;\n      height: 40vh;\n      border-left: none;\n      border-top: 1px solid hsl(var(--border));\n    }\n    \n    /* Floating sidebar overlay */\n    .sidebar-mobile-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100vw;\n      height: 100vh;\n      z-index: 50;\n      background: rgba(0, 0, 0, 0.6);\n      backdrop-filter: blur(4px);\n    }\n    \n    .sidebar-mobile {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 20rem;\n      height: 100vh;\n      z-index: 51;\n      transform: translateX(-100%);\n      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    }\n    \n    .sidebar-mobile.open {\n      transform: translateX(0);\n    }\n  }\n\n  /* Mobile Landscape (568px - 767px) */\n  @media (max-width: 767px) and (min-width: 568px) and (orientation: landscape) {\n    .header-mobile {\n      padding: 0.5rem 1rem;\n    }\n    \n    .sidebar-mobile {\n      width: 18rem;\n    }\n    \n    .tab-navigation {\n      padding: 0.25rem;\n    }\n    \n    .tab-button {\n      padding: 0.5rem 1rem;\n      font-size: 0.75rem;\n    }\n    \n    .monaco-editor {\n      font-size: 13px !important;\n    }\n  }\n\n  /* Mobile Portrait (below 768px) */\n  @media (max-width: 767px) {\n    .sidebar-desktop {\n      display: none;\n    }\n    \n    .header-mobile {\n      padding: 0.75rem 1rem;\n    }\n    \n    .header-title {\n      font-size: 1.125rem;\n    }\n    \n    .header-logo {\n      width: 1.5rem;\n      height: 1.5rem;\n    }\n    \n    /* Full-width mobile layout */\n    .main-content {\n      width: 100%;\n      padding: 0;\n    }\n    \n    /* Stack editor and error panel vertically */\n    .editor-container {\n      flex-direction: column;\n      height: 100%;\n      min-height: 500px;\n    }\n    \n    .code-editor-wrapper {\n      min-height: 400px;\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .error-panel-mobile {\n      width: 100%;\n      max-height: 40vh;\n      min-height: 200px;\n      overflow-y: auto;\n      border-left: none;\n      border-top: 1px solid hsl(var(--border));\n    }\n    \n    /* Horizontal scrolling tabs */\n    .tab-navigation {\n      padding: 0.5rem;\n      overflow-x: auto;\n      scrollbar-width: none;\n      -ms-overflow-style: none;\n    }\n    \n    .tab-navigation::-webkit-scrollbar {\n      display: none;\n    }\n    \n    .tab-container {\n      display: flex;\n      gap: 0.5rem;\n      min-width: max-content;\n      padding-bottom: 0.5rem;\n    }\n    \n    .tab-button {\n      padding: 0.75rem 1.25rem;\n      font-size: 0.875rem;\n      white-space: nowrap;\n      flex-shrink: 0;\n      min-width: max-content;\n    }\n    \n    /* Full-width mobile sidebar */\n    .sidebar-mobile {\n      width: 100vw;\n      max-width: 22rem;\n    }\n    \n    /* Compact floating action button */\n    .fab-mobile {\n      bottom: 1rem;\n      right: 1rem;\n      width: 3.5rem;\n      height: 3.5rem;\n    }\n    \n    /* Mobile code editor adjustments */\n    .monaco-editor {\n      font-size: 12px !important;\n      line-height: 18px !important;\n    }\n    \n    /* Touch-friendly controls */\n    .mobile-touch-friendly {\n      min-height: 44px;\n      min-width: 44px;\n    }\n    \n    /* Hide non-essential elements on mobile */\n    .mobile-hidden {\n      display: none !important;\n    }\n    \n    /* Compact sidebar sections */\n    .sidebar-section {\n      padding: 1rem;\n    }\n    \n    .sidebar-section h3 {\n      font-size: 0.875rem;\n      margin-bottom: 0.75rem;\n    }\n    \n    /* Mobile form adjustments */\n    .mobile-form-group {\n      margin-bottom: 1rem;\n    }\n    \n    .mobile-select {\n      font-size: 16px; /* Prevents zoom on iOS */\n      min-height: 44px;\n    }\n    \n    /* Mobile error cards */\n    .error-card-mobile {\n      padding: 1rem;\n      margin-bottom: 0.75rem;\n    }\n    \n    .error-card-mobile .error-title {\n      font-size: 0.875rem;\n      line-height: 1.3;\n    }\n    \n    .error-card-mobile .error-description {\n      font-size: 0.75rem;\n      line-height: 1.4;\n      margin-top: 0.5rem;\n    }\n  }\n\n  /* Small Mobile (320px - 479px) */\n  @media (max-width: 479px) {\n    .header-mobile {\n      padding: 0.5rem 0.75rem;\n    }\n    \n    .header-title {\n      font-size: 1rem;\n    }\n    \n    .header-logo {\n      width: 1.25rem;\n      height: 1.25rem;\n    }\n    \n    .sidebar-mobile {\n      width: 100vw;\n    }\n    \n    .tab-button {\n      padding: 0.5rem 1rem;\n      font-size: 0.75rem;\n    }\n    \n    /* Extra compact Monaco editor */\n    .monaco-editor {\n      font-size: 11px !important;\n      line-height: 16px !important;\n    }\n    \n    /* Compact controls */\n    .button-sm-mobile {\n      padding: 0.375rem 0.75rem;\n      font-size: 0.75rem;\n      min-height: 40px;\n    }\n    \n    /* Smaller error cards for tiny screens */\n    .error-card-mobile {\n      padding: 0.75rem;\n      margin-bottom: 0.5rem;\n    }\n    \n    .sidebar-section {\n      padding: 0.75rem;\n    }\n    \n    /* Smaller floating action button */\n    .fab-mobile {\n      width: 3rem;\n      height: 3rem;\n      bottom: 0.75rem;\n      right: 0.75rem;\n    }\n  }\n\n  /* Extra Small Mobile (below 320px) */\n  @media (max-width: 319px) {\n    .header-mobile {\n      padding: 0.5rem;\n    }\n    \n    .header-title {\n      font-size: 0.875rem;\n    }\n    \n    .tab-button {\n      padding: 0.5rem 0.75rem;\n      font-size: 0.625rem;\n    }\n    \n    .monaco-editor {\n      font-size: 10px !important;\n      line-height: 14px !important;\n    }\n    \n    .error-card-mobile {\n      padding: 0.5rem;\n    }\n    \n    .sidebar-section {\n      padding: 0.5rem;\n    }\n  }\n\n  /* Dark mode specific responsive adjustments */\n  @media (prefers-color-scheme: dark) {\n    .sidebar-mobile-overlay {\n      background: rgba(0, 0, 0, 0.7);\n    }\n  }\n\n  /* High DPI displays */\n  @media (min-resolution: 2dppx) {\n    .monaco-editor {\n      font-feature-settings: \"liga\" 0;\n    }\n  }\n\n  /* Landscape orientation optimizations */\n  @media (orientation: landscape) and (max-height: 600px) {\n    .header-mobile {\n      padding: 0.5rem 1rem;\n    }\n    \n    .sidebar-section {\n      padding: 0.5rem;\n    }\n  }\n\n  /* Desktop sidebar styling */\n  .sidebar-desktop {\n    width: 20rem;\n    background: hsl(var(--background-elevated));\n    border-right: 1px solid hsl(var(--border));\n    overflow-y: auto;\n  }\n\n  /* Mobile sidebar improvements */\n  .sidebar-mobile {\n    background: hsl(var(--background-elevated));\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  /* Error panel mobile specific styling */\n  .error-panel-mobile {\n    min-height: 200px;\n    max-height: 50vh;\n  }\n\n  /* Enhanced touch targets for mobile */\n  @media (max-width: 768px) {\n    button, [role=\"button\"], select, input {\n      min-height: 44px;\n      min-width: 44px;\n    }\n    \n    /* Improve select dropdown on mobile */\n    select {\n      font-size: 16px; /* Prevents zoom on iOS */\n    }\n    \n    /* Better focus indicators for mobile */\n    button:focus-visible,\n    [role=\"button\"]:focus-visible {\n      outline: 2px solid hsl(var(--primary));\n      outline-offset: 2px;\n    }\n  }\n\n  /* Floating action button enhancements */\n  .fab-mobile {\n    position: fixed;\n    z-index: 40;\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Monaco Editor mobile optimizations */\n  @media (max-width: 768px) {\n    .monaco-editor .editor-scrollable {\n      overflow-x: auto !important;\n    }\n    \n    .monaco-editor .view-lines {\n      white-space: nowrap !important;\n    }\n    \n    /* Better line numbers on mobile */\n    .monaco-editor .margin-view-overlays .line-numbers {\n      font-size: 10px !important;\n    }\n  }\n\n  /* Responsive grid for error items */\n  .error-grid-mobile {\n    display: grid;\n    gap: 0.75rem;\n    grid-template-columns: 1fr;\n  }\n\n  @media (min-width: 640px) {\n    .error-grid-mobile {\n      grid-template-columns: repeat(2, 1fr);\n    }\n  }\n\n  /* Accessibility improvements */\n  @media (prefers-reduced-motion: reduce) {\n    .sidebar-mobile {\n      transition: none;\n    }\n    \n    .animate-pulse-glow {\n      animation: none;\n    }\n  }\n\n  /* High contrast mode support */\n  @media (prefers-contrast: high) {\n    .border-dark-border {\n      border-color: hsl(var(--foreground)) !important;\n    }\n    \n    .bg-dark-elevated {\n      border: 1px solid hsl(var(--foreground));\n    }\n  }\n}\n","size_bytes":18451},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiMentor.ts":{"content":"import OpenAI from \"openai\";\nimport { intelligentBackend } from \"./intelligentBackend\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface LearningPath {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  estimatedTime: string;\n  topics: string[];\n  prerequisites: string[];\n  nextSteps: string[];\n}\n\nexport interface CodeMentorship {\n  personalizedFeedback: string;\n  skillAssessment: {\n    strengths: string[];\n    weaknesses: string[];\n    overallLevel: string;\n  };\n  learningPath: LearningPath;\n  practiceExercises: {\n    title: string;\n    description: string;\n    difficulty: string;\n    codeTemplate: string;\n  }[];\n}\n\nexport async function generatePersonalizedMentorship(\n  code: string,\n  language: string,\n  userHistory: any[]\n): Promise<CodeMentorship> {\n  try {\n    const prompt = `As an expert programming mentor, analyze this ${language} code and user's coding history to provide personalized mentorship:\n\nCODE:\n${code}\n\nUSER HISTORY:\n${JSON.stringify(userHistory.slice(-10), null, 2)}\n\nProvide comprehensive mentorship including:\n1. Detailed personalized feedback on coding style, patterns, and best practices\n2. Skill assessment with specific strengths and areas for improvement\n3. Customized learning path with specific topics to study\n4. 3 practice exercises tailored to their skill level\n\nRespond in JSON format with the following structure:\n{\n  \"personalizedFeedback\": \"detailed feedback string\",\n  \"skillAssessment\": {\n    \"strengths\": [\"strength1\", \"strength2\"],\n    \"weaknesses\": [\"weakness1\", \"weakness2\"],\n    \"overallLevel\": \"beginner|intermediate|advanced|expert\"\n  },\n  \"learningPath\": {\n    \"id\": \"unique_id\",\n    \"title\": \"Learning Path Title\",\n    \"description\": \"Path description\",\n    \"difficulty\": \"appropriate_level\",\n    \"estimatedTime\": \"time estimate\",\n    \"topics\": [\"topic1\", \"topic2\"],\n    \"prerequisites\": [\"prereq1\", \"prereq2\"],\n    \"nextSteps\": [\"step1\", \"step2\"]\n  },\n  \"practiceExercises\": [\n    {\n      \"title\": \"Exercise Title\",\n      \"description\": \"Exercise description\",\n      \"difficulty\": \"level\",\n      \"codeTemplate\": \"starter code template\"\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2000\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating mentorship:', error);\n    // Use intelligent backend service for reliable mentorship\n    return intelligentBackend.generateMentorship(code, language, userHistory);\n  }\n}\n\nexport async function generateCodeOptimization(\n  code: string,\n  language: string,\n  optimizationGoals: string[]\n): Promise<{\n  optimizedCode: string;\n  improvements: string[];\n  performanceGains: string;\n  explanation: string;\n}> {\n  try {\n    const prompt = `As a performance optimization expert, optimize this ${language} code focusing on: ${optimizationGoals.join(', ')}\n\nORIGINAL CODE:\n${code}\n\nProvide:\n1. Optimized version of the code\n2. List of specific improvements made\n3. Expected performance gains\n4. Detailed explanation of optimizations\n\nRespond in JSON format:\n{\n  \"optimizedCode\": \"optimized code string\",\n  \"improvements\": [\"improvement1\", \"improvement2\"],\n  \"performanceGains\": \"performance description\",\n  \"explanation\": \"detailed explanation\"\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n      max_tokens: 1500\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating optimization:', error);\n    return intelligentBackend.generateOptimization(code, language, optimizationGoals);\n  }\n}\n\nexport async function generateSecurityAudit(\n  code: string,\n  language: string\n): Promise<{\n  securityScore: number;\n  vulnerabilities: {\n    type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    location: string;\n    solution: string;\n  }[];\n  recommendations: string[];\n  complianceChecks: {\n    standard: string;\n    status: 'pass' | 'fail' | 'warning';\n    details: string;\n  }[];\n}> {\n  try {\n    const prompt = `As a cybersecurity expert, perform a comprehensive security audit of this ${language} code:\n\nCODE:\n${code}\n\nAnalyze for:\n1. Common vulnerabilities (OWASP Top 10, injection attacks, etc.)\n2. Security best practices\n3. Compliance with security standards\n4. Data protection issues\n\nProvide a security score (0-100) and detailed findings in JSON format:\n{\n  \"securityScore\": 85,\n  \"vulnerabilities\": [\n    {\n      \"type\": \"SQL Injection\",\n      \"severity\": \"high\",\n      \"description\": \"vulnerability description\",\n      \"location\": \"line number or function\",\n      \"solution\": \"how to fix\"\n    }\n  ],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"complianceChecks\": [\n    {\n      \"standard\": \"OWASP\",\n      \"status\": \"pass\",\n      \"details\": \"compliance details\"\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2,\n      max_tokens: 1800\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating security audit:', error);\n    return intelligentBackend.generateSecurityAudit(code, language);\n  }\n}\n\n// ========== INTELLIGENT FALLBACK FUNCTIONS ==========\n\nfunction generateIntelligentMentorship(code: string, language: string, userHistory: any[]): CodeMentorship {\n  // Analyze code patterns and complexity\n  const codeLines = code.split('\\n').filter(line => line.trim().length > 0);\n  const hasComments = code.includes('//') || code.includes('/*');\n  const hasErrorHandling = code.includes('try') || code.includes('catch') || code.includes('throw');\n  const hasAsyncCode = code.includes('async') || code.includes('await') || code.includes('Promise');\n  const hasFunctions = code.includes('function') || code.includes('=>') || code.includes('def ');\n  const hasClasses = code.includes('class ') || code.includes('interface ');\n  \n  // Determine skill level based on code complexity\n  let skillLevel = 'beginner';\n  let complexity = 0;\n  \n  if (hasComments) complexity += 1;\n  if (hasErrorHandling) complexity += 2;\n  if (hasAsyncCode) complexity += 2;\n  if (hasClasses) complexity += 2;\n  if (codeLines.length > 20) complexity += 1;\n  \n  if (complexity >= 6) skillLevel = 'expert';\n  else if (complexity >= 4) skillLevel = 'advanced';\n  else if (complexity >= 2) skillLevel = 'intermediate';\n\n  // Generate language-specific feedback\n  const languageInsights = getLanguageSpecificInsights(language, code);\n  \n  return {\n    personalizedFeedback: `Your ${language} code shows ${skillLevel} level understanding. ${languageInsights.feedback} ${hasComments ? 'Great use of comments for documentation.' : 'Consider adding comments to improve code readability.'} ${hasErrorHandling ? 'Excellent error handling practices.' : 'Adding error handling would make your code more robust.'}`,\n    skillAssessment: {\n      strengths: languageInsights.strengths,\n      weaknesses: languageInsights.weaknesses,\n      overallLevel: skillLevel\n    },\n    learningPath: {\n      id: `${language.toLowerCase()}-${skillLevel}-${Date.now()}`,\n      title: `${language} ${skillLevel.charAt(0).toUpperCase() + skillLevel.slice(1)} Development Path`,\n      description: `Advance your ${language} skills with focused learning on ${languageInsights.focusAreas.join(', ')}.`,\n      difficulty: skillLevel as any,\n      estimatedTime: skillLevel === 'beginner' ? '4-6 weeks' : skillLevel === 'intermediate' ? '6-8 weeks' : '8-12 weeks',\n      topics: languageInsights.topics,\n      prerequisites: languageInsights.prerequisites,\n      nextSteps: languageInsights.nextSteps\n    },\n    practiceExercises: generatePracticeExercises(language, skillLevel)\n  };\n}\n\nfunction generateIntelligentOptimization(code: string, language: string, goals: string[]) {\n  const codeLines = code.split('\\n');\n  const improvements = [];\n  let optimizedCode = code;\n  \n  // Analyze common optimization opportunities\n  if (goals.includes('performance')) {\n    if (code.includes('for (') && code.includes('.length')) {\n      improvements.push('Cache array length in loops');\n      optimizedCode = optimizedCode.replace(/for\\s*\\(\\s*let\\s+(\\w+)\\s*=\\s*0;\\s*\\1\\s*<\\s*(\\w+)\\.length/g, \n        'for (let $1 = 0, len = $2.length; $1 < len');\n    }\n    \n    if (code.includes('document.getElementById') || code.includes('querySelector')) {\n      improvements.push('Cache DOM queries');\n    }\n  }\n  \n  if (goals.includes('readability')) {\n    if (!code.includes('//') && !code.includes('/*')) {\n      improvements.push('Add comments for better code documentation');\n    }\n    \n    if (code.includes('var ')) {\n      improvements.push('Use const/let instead of var for better scoping');\n      optimizedCode = optimizedCode.replace(/var\\s+/g, 'const ');\n    }\n  }\n  \n  if (goals.includes('maintainability')) {\n    if (codeLines.some(line => line.length > 120)) {\n      improvements.push('Break long lines for better readability');\n    }\n    \n    if (code.includes('function') && !code.includes('{')) {\n      improvements.push('Use arrow functions for concise syntax');\n    }\n  }\n  \n  return {\n    optimizedCode,\n    improvements,\n    performanceGains: `Expected ${improvements.length * 10}% improvement in ${goals.join(', ')}`,\n    explanation: `Applied ${improvements.length} optimizations focusing on ${goals.join(', ')}. Key improvements include ${improvements.slice(0, 3).join(', ')}.`\n  };\n}\n\nfunction generateIntelligentSecurityAudit(code: string, language: string) {\n  const vulnerabilities = [];\n  const recommendations = [];\n  let securityScore = 100;\n  \n  // Check for common security issues\n  if (code.includes('eval(') || code.includes('Function(')) {\n    vulnerabilities.push({\n      type: 'Code Injection',\n      severity: 'critical' as const,\n      description: 'Use of eval() or Function() constructor can lead to code injection',\n      location: 'Function calls',\n      solution: 'Avoid eval() and use safer alternatives like JSON.parse() for data'\n    });\n    securityScore -= 20;\n  }\n  \n  if (code.includes('innerHTML') && !code.includes('textContent')) {\n    vulnerabilities.push({\n      type: 'XSS Vulnerability',\n      severity: 'high' as const,\n      description: 'Direct innerHTML manipulation without sanitization',\n      location: 'DOM manipulation',\n      solution: 'Use textContent or sanitize HTML content before insertion'\n    });\n    securityScore -= 15;\n  }\n  \n  if (code.includes('password') && !code.includes('bcrypt') && !code.includes('hash')) {\n    vulnerabilities.push({\n      type: 'Password Security',\n      severity: 'medium' as const,\n      description: 'Password handling without proper hashing',\n      location: 'Authentication logic',\n      solution: 'Use bcrypt or similar library for password hashing'\n    });\n    securityScore -= 10;\n  }\n  \n  // Generate recommendations\n  if (!code.includes('try') && !code.includes('catch')) {\n    recommendations.push('Add error handling to prevent information leakage');\n  }\n  \n  if (language.toLowerCase() === 'javascript' && !code.includes('use strict')) {\n    recommendations.push('Use strict mode to catch common coding mistakes');\n  }\n  \n  return {\n    securityScore: Math.max(0, securityScore),\n    vulnerabilities,\n    recommendations: recommendations.length ? recommendations : ['Code follows basic security practices', 'Consider adding input validation', 'Implement proper error handling'],\n    complianceChecks: [\n      {\n        standard: 'OWASP',\n        status: vulnerabilities.length === 0 ? 'pass' : 'warning' as const,\n        details: vulnerabilities.length === 0 ? 'No major OWASP vulnerabilities detected' : `${vulnerabilities.length} potential issues found`\n      },\n      {\n        standard: 'Secure Coding',\n        status: securityScore > 80 ? 'pass' : 'warning' as const,\n        details: `Security score: ${securityScore}/100`\n      }\n    ]\n  };\n}\n\nfunction getLanguageSpecificInsights(language: string, code: string) {\n  const lang = language.toLowerCase();\n  \n  switch (lang) {\n    case 'javascript':\n    case 'typescript':\n      return {\n        feedback: 'Modern JavaScript features are evolving rapidly. Focus on ES6+ syntax and async programming.',\n        strengths: ['ES6 Syntax', 'Function Composition', 'DOM Manipulation'],\n        weaknesses: ['Error Handling', 'Performance Optimization', 'Security Practices'],\n        focusAreas: ['Async/Await', 'Error Boundaries', 'Type Safety'],\n        topics: ['Promises & Async/Await', 'Error Handling', 'Modern ES6+ Features', 'TypeScript Basics'],\n        prerequisites: ['HTML/CSS Basics', 'Programming Fundamentals'],\n        nextSteps: ['React/Vue Framework', 'Node.js Backend', 'Testing Strategies']\n      };\n    \n    case 'python':\n      return {\n        feedback: 'Python emphasizes readability and simplicity. Focus on Pythonic code patterns and best practices.',\n        strengths: ['Clean Syntax', 'Library Usage', 'Data Structures'],\n        weaknesses: ['Performance Optimization', 'Memory Management', 'Type Hints'],\n        focusAreas: ['Type Hints', 'Context Managers', 'Decorators'],\n        topics: ['Type Hints', 'Context Managers', 'Decorators', 'Error Handling'],\n        prerequisites: ['Programming Basics', 'Data Structures'],\n        nextSteps: ['Web Frameworks', 'Data Science', 'API Development']\n      };\n    \n    case 'java':\n      return {\n        feedback: 'Java provides strong typing and object-oriented programming. Focus on design patterns and best practices.',\n        strengths: ['OOP Concepts', 'Type Safety', 'Memory Management'],\n        weaknesses: ['Design Patterns', 'Concurrency', 'Performance Tuning'],\n        focusAreas: ['Design Patterns', 'Concurrency', 'Spring Framework'],\n        topics: ['Design Patterns', 'Concurrency', 'Exception Handling', 'Spring Basics'],\n        prerequisites: ['OOP Fundamentals', 'Programming Basics'],\n        nextSteps: ['Spring Framework', 'Microservices', 'Enterprise Development']\n      };\n    \n    default:\n      return {\n        feedback: `${language} is a powerful language with unique features. Focus on idiomatic patterns and best practices.`,\n        strengths: ['Syntax Understanding', 'Basic Concepts', 'Problem Solving'],\n        weaknesses: ['Advanced Features', 'Best Practices', 'Performance'],\n        focusAreas: ['Language Idioms', 'Best Practices', 'Advanced Features'],\n        topics: ['Language Fundamentals', 'Best Practices', 'Advanced Features', 'Error Handling'],\n        prerequisites: ['Programming Basics'],\n        nextSteps: ['Advanced Concepts', 'Frameworks', 'Real Projects']\n      };\n  }\n}\n\nfunction generatePracticeExercises(language: string, skillLevel: string) {\n  const exercises = {\n    beginner: [\n      {\n        title: 'Variable Declaration and Basic Functions',\n        description: 'Practice declaring variables and creating simple functions with proper naming conventions.',\n        difficulty: 'beginner',\n        codeTemplate: `// TODO: Create a function that takes two parameters and returns their sum\\n// Remember to use meaningful variable names\\n`\n      },\n      {\n        title: 'Conditional Logic Implementation',\n        description: 'Implement conditional statements to handle different scenarios in your code.',\n        difficulty: 'beginner',\n        codeTemplate: `// TODO: Create a function that checks if a number is positive, negative, or zero\\n// Use if-else statements\\n`\n      }\n    ],\n    intermediate: [\n      {\n        title: 'Error Handling Implementation',\n        description: 'Add robust error handling to prevent crashes and provide meaningful error messages.',\n        difficulty: 'intermediate',\n        codeTemplate: `// TODO: Implement try-catch blocks for error handling\\n// Handle different types of errors appropriately\\n`\n      },\n      {\n        title: 'Data Structure Optimization',\n        description: 'Choose and implement appropriate data structures for efficient data management.',\n        difficulty: 'intermediate',\n        codeTemplate: `// TODO: Implement a data structure that efficiently stores and retrieves data\\n// Consider performance implications\\n`\n      }\n    ],\n    advanced: [\n      {\n        title: 'Design Pattern Implementation',\n        description: 'Implement design patterns to create maintainable and scalable code architecture.',\n        difficulty: 'advanced',\n        codeTemplate: `// TODO: Implement a design pattern (Observer, Factory, or Singleton)\\n// Focus on clean architecture principles\\n`\n      },\n      {\n        title: 'Performance Optimization',\n        description: 'Optimize code for better performance while maintaining readability.',\n        difficulty: 'advanced',\n        codeTemplate: `// TODO: Optimize this code for better performance\\n// Consider time and space complexity\\n`\n      }\n    ]\n  };\n  \n  return exercises[skillLevel as keyof typeof exercises] || exercises.beginner;\n}","size_bytes":17814},"server/services/analytics.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface CodeMetrics {\n  complexity: {\n    cyclomatic: number;\n    cognitive: number;\n    halstead: {\n      difficulty: number;\n      effort: number;\n      volume: number;\n    };\n  };\n  quality: {\n    maintainabilityIndex: number;\n    technicalDebt: number;\n    codeSmells: number;\n    duplication: number;\n  };\n  performance: {\n    timeComplexity: string;\n    spaceComplexity: string;\n    bottlenecks: string[];\n    optimizationPotential: number;\n  };\n  security: {\n    vulnerabilityCount: number;\n    riskScore: number;\n    complianceLevel: string;\n  };\n}\n\nexport interface ProgressTracking {\n  userId: string;\n  skillLevels: {\n    [language: string]: {\n      level: number;\n      experience: number;\n      strengths: string[];\n      weaknesses: string[];\n      recommendations: string[];\n    };\n  };\n  achievements: {\n    id: string;\n    title: string;\n    description: string;\n    unlockedAt: Date;\n    category: string;\n  }[];\n  learningPath: {\n    currentPath: string;\n    progress: number;\n    milestones: {\n      title: string;\n      completed: boolean;\n      completedAt?: Date;\n    }[];\n  };\n  codeQualityTrends: {\n    date: Date;\n    qualityScore: number;\n    errorsFixed: number;\n    newConcepts: string[];\n  }[];\n}\n\nexport interface TeamAnalytics {\n  teamId: string;\n  members: {\n    userId: string;\n    name: string;\n    contributions: number;\n    skillLevel: number;\n    specializations: string[];\n  }[];\n  productivity: {\n    linesOfCode: number;\n    bugsFixed: number;\n    featuresDelivered: number;\n    codeReviews: number;\n  };\n  codebaseHealth: {\n    overallQuality: number;\n    testCoverage: number;\n    technicalDebt: number;\n    securityScore: number;\n  };\n  collaboration: {\n    pairProgrammingSessions: number;\n    knowledgeSharing: number;\n    mentoringSessions: number;\n  };\n}\n\nexport async function analyzeCodeMetrics(\n  code: string,\n  language: string,\n  previousMetrics?: CodeMetrics\n): Promise<CodeMetrics> {\n  try {\n    const prompt = `As a software metrics expert, perform comprehensive analysis of this ${language} code:\n\nCODE:\n${code}\n\n${previousMetrics ? `PREVIOUS METRICS:\\n${JSON.stringify(previousMetrics, null, 2)}` : ''}\n\nCalculate detailed metrics for:\n1. Complexity Analysis (Cyclomatic, Cognitive, Halstead)\n2. Quality Assessment (Maintainability Index, Technical Debt, Code Smells, Duplication)\n3. Performance Analysis (Time/Space Complexity, Bottlenecks, Optimization Potential)\n4. Security Assessment (Vulnerability Count, Risk Score, Compliance Level)\n\nProvide specific numeric values and actionable insights.\n\nRespond in JSON format:\n{\n  \"complexity\": {\n    \"cyclomatic\": 5,\n    \"cognitive\": 8,\n    \"halstead\": {\n      \"difficulty\": 12.5,\n      \"effort\": 245.7,\n      \"volume\": 89.3\n    }\n  },\n  \"quality\": {\n    \"maintainabilityIndex\": 78,\n    \"technicalDebt\": 15,\n    \"codeSmells\": 3,\n    \"duplication\": 5\n  },\n  \"performance\": {\n    \"timeComplexity\": \"O(n log n)\",\n    \"spaceComplexity\": \"O(n)\",\n    \"bottlenecks\": [\"nested loops\", \"database queries\"],\n    \"optimizationPotential\": 75\n  },\n  \"security\": {\n    \"vulnerabilityCount\": 2,\n    \"riskScore\": 25,\n    \"complianceLevel\": \"medium\"\n  }\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n      max_tokens: 1500\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error analyzing code metrics:', error);\n    throw new Error('Failed to analyze code metrics');\n  }\n}\n\nexport async function generatePersonalizedInsights(\n  userHistory: any[],\n  codeMetrics: CodeMetrics[],\n  languageUsage: { [language: string]: number }\n): Promise<{\n  insights: string[];\n  recommendations: string[];\n  skillGaps: string[];\n  nextLearningGoals: string[];\n  strengthAreas: string[];\n}> {\n  try {\n    const prompt = `As a programming mentor and data analyst, analyze this user's coding journey and provide personalized insights:\n\nUSER HISTORY:\n${JSON.stringify(userHistory.slice(-20), null, 2)}\n\nCODE METRICS OVER TIME:\n${JSON.stringify(codeMetrics.slice(-10), null, 2)}\n\nLANGUAGE USAGE:\n${JSON.stringify(languageUsage, null, 2)}\n\nProvide personalized insights including:\n1. Key insights about coding patterns and progress\n2. Actionable recommendations for improvement\n3. Identified skill gaps and areas to focus on\n4. Next learning goals based on trajectory\n5. Areas where the user shows strength\n\nRespond in JSON format:\n{\n  \"insights\": [\"insight1\", \"insight2\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"skillGaps\": [\"gap1\", \"gap2\"],\n  \"nextLearningGoals\": [\"goal1\", \"goal2\"],\n  \"strengthAreas\": [\"strength1\", \"strength2\"]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 1800\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating personalized insights:', error);\n    throw new Error('Failed to generate personalized insights');\n  }\n}\n\nexport function calculateSkillProgression(\n  userHistory: any[],\n  language: string\n): {\n  currentLevel: number;\n  experience: number;\n  progressToNext: number;\n  milestoneAchievements: string[];\n} {\n  const languageHistory = userHistory.filter(h => h.language === language);\n  const totalAnalyses = languageHistory.length;\n  const recentQuality = languageHistory.slice(-10).reduce((sum, h) => sum + (h.qualityScore || 50), 0) / Math.min(10, languageHistory.length);\n  \n  // Calculate level based on experience and quality\n  const experience = Math.min(totalAnalyses * 10 + (recentQuality - 50) * 2, 1000);\n  const currentLevel = Math.floor(experience / 100) + 1;\n  const progressToNext = (experience % 100);\n  \n  const milestones = [];\n  if (totalAnalyses >= 5) milestones.push(\"First Steps\");\n  if (totalAnalyses >= 20) milestones.push(\"Regular Practitioner\");\n  if (recentQuality >= 80) milestones.push(\"Quality Coder\");\n  if (totalAnalyses >= 50) milestones.push(\"Experienced Developer\");\n  if (recentQuality >= 90) milestones.push(\"Expert Level\");\n  \n  return {\n    currentLevel,\n    experience,\n    progressToNext,\n    milestoneAchievements: milestones\n  };\n}\n\nexport function generateAchievements(\n  userHistory: any[],\n  codeMetrics: CodeMetrics[]\n): {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  unlockedAt: Date;\n}[] {\n  const achievements = [];\n  const now = new Date();\n  \n  // Language diversity achievements\n  const uniqueLanguages = new Set(userHistory.map(h => h.language)).size;\n  if (uniqueLanguages >= 5) {\n    achievements.push({\n      id: 'polyglot',\n      title: 'Polyglot Programmer',\n      description: 'Used 5 or more programming languages',\n      category: 'diversity',\n      rarity: 'rare',\n      unlockedAt: now\n    });\n  }\n  \n  // Quality achievements\n  const recentHighQuality = userHistory.slice(-5).filter(h => h.qualityScore >= 90).length;\n  if (recentHighQuality >= 3) {\n    achievements.push({\n      id: 'quality_master',\n      title: 'Quality Master',\n      description: 'Achieved 90+ quality score in 3 consecutive analyses',\n      category: 'quality',\n      rarity: 'epic',\n      unlockedAt: now\n    });\n  }\n  \n  // Productivity achievements\n  if (userHistory.length >= 100) {\n    achievements.push({\n      id: 'century_club',\n      title: 'Century Club',\n      description: 'Completed 100 code analyses',\n      category: 'productivity',\n      rarity: 'legendary',\n      unlockedAt: now\n    });\n  }\n  \n  // Security achievements\n  const securityFocused = codeMetrics.filter(m => m.security.riskScore <= 10).length;\n  if (securityFocused >= 10) {\n    achievements.push({\n      id: 'security_expert',\n      title: 'Security Expert',\n      description: 'Maintained low security risk in 10+ analyses',\n      category: 'security',\n      rarity: 'epic',\n      unlockedAt: now\n    });\n  }\n  \n  return achievements;\n}\n\nexport function generateVisualizationData(\n  userHistory: any[],\n  codeMetrics: CodeMetrics[]\n): {\n  qualityTrend: { date: string; quality: number }[];\n  languageDistribution: { language: string; count: number; percentage: number }[];\n  complexityEvolution: { date: string; complexity: number }[];\n  skillRadar: { skill: string; level: number }[];\n  achievementTimeline: { date: string; achievement: string; category: string }[];\n} {\n  // Quality trend over time\n  const qualityTrend = userHistory.slice(-30).map((h, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    quality: h.qualityScore || 50\n  }));\n  \n  // Language distribution\n  const languageCounts: { [key: string]: number } = {};\n  userHistory.forEach(h => {\n    languageCounts[h.language] = (languageCounts[h.language] || 0) + 1;\n  });\n  \n  const total = userHistory.length;\n  const languageDistribution = Object.entries(languageCounts).map(([language, count]) => ({\n    language,\n    count,\n    percentage: Math.round((count / total) * 100)\n  }));\n  \n  // Complexity evolution\n  const complexityEvolution = codeMetrics.slice(-20).map((m, i) => ({\n    date: new Date(Date.now() - (19 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    complexity: m.complexity.cyclomatic\n  }));\n  \n  // Skill radar (mock data based on language usage and quality)\n  const skillRadar = [\n    { skill: 'Code Quality', level: Math.min(100, (userHistory.slice(-10).reduce((sum, h) => sum + (h.qualityScore || 50), 0) / 10)) },\n    { skill: 'Security Awareness', level: Math.min(100, 100 - (codeMetrics.slice(-5).reduce((sum, m) => sum + m.security.riskScore, 0) / 5)) },\n    { skill: 'Performance Optimization', level: Math.min(100, codeMetrics.slice(-5).reduce((sum, m) => sum + m.performance.optimizationPotential, 0) / 5) },\n    { skill: 'Code Maintainability', level: Math.min(100, codeMetrics.slice(-5).reduce((sum, m) => sum + m.quality.maintainabilityIndex, 0) / 5) },\n    { skill: 'Language Diversity', level: Math.min(100, Object.keys(languageCounts).length * 10) }\n  ];\n  \n  // Achievement timeline (mock recent achievements)\n  const achievementTimeline = [\n    { date: new Date().toISOString().split('T')[0], achievement: 'Quality Improver', category: 'quality' },\n    { date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], achievement: 'Language Explorer', category: 'diversity' }\n  ];\n  \n  return {\n    qualityTrend,\n    languageDistribution,\n    complexityEvolution,\n    skillRadar,\n    achievementTimeline\n  };\n}","size_bytes":11096},"server/services/errorAnalyzer.ts":{"content":"import { analyzeCodeErrors, generateErrorExplanation } from './openai';\nimport { generateSpeech } from './murf';\nimport { storage } from '../storage';\nimport type { ErrorDetail } from '@shared/schema';\n\nexport class ErrorAnalyzer {\n  async analyzeCode(code: string, language: string, userId: number) {\n    try {\n      // Analyze code using OpenAI\n      const errors = await analyzeCodeErrors(code, language);\n      \n      // Store analysis in database\n      const analysis = await storage.createErrorAnalysis({\n        userId,\n        language,\n        code,\n        errors,\n      });\n\n      return analysis;\n    } catch (error) {\n      throw new Error(`Failed to analyze code: ${error.message}`);\n    }\n  }\n\n  async generateVoiceExplanation(errorAnalysisId: number, errorIndex: number, voiceId: string, speed: number = 1.0) {\n    try {\n      const analysis = await storage.getErrorAnalysis(errorAnalysisId);\n      if (!analysis) {\n        throw new Error('Error analysis not found');\n      }\n\n      const error = analysis.errors[errorIndex];\n      if (!error) {\n        throw new Error('Error not found in analysis');\n      }\n\n      // Generate human-friendly explanation\n      const explanation = await generateErrorExplanation(error, analysis.language);\n      \n      // Create voice generation record\n      const voiceGeneration = await storage.createVoiceGeneration({\n        errorAnalysisId,\n        voiceId,\n        text: explanation,\n      });\n\n      // Generate speech using Murf TTS\n      const { audioUrl, duration } = await generateSpeech(explanation, voiceId, {\n        speed,\n        format: 'mp3',\n      });\n\n      // Update voice generation with audio details\n      voiceGeneration.audioUrl = audioUrl;\n      voiceGeneration.duration = duration;\n\n      return voiceGeneration;\n    } catch (error) {\n      throw new Error(`Failed to generate voice explanation: ${error.message}`);\n    }\n  }\n\n  async getLanguageSpecificSuggestions(language: string): Promise<string[]> {\n    const suggestions = {\n      javascript: [\n        \"Use semicolons consistently\",\n        \"Declare variables with let/const instead of var\",\n        \"Use strict equality (===) instead of loose equality (==)\",\n        \"Handle async operations properly with async/await\",\n      ],\n      python: [\n        \"Follow PEP 8 style guidelines\",\n        \"Use list comprehensions for simple iterations\",\n        \"Handle exceptions with try/except blocks\",\n        \"Use f-strings for string formatting\",\n      ],\n      java: [\n        \"Follow camelCase naming conventions\",\n        \"Use proper exception handling\",\n        \"Implement proper access modifiers\",\n        \"Use generics for type safety\",\n      ],\n      cpp: [\n        \"Use smart pointers instead of raw pointers\",\n        \"Follow RAII principles\",\n        \"Use const correctness\",\n        \"Avoid memory leaks with proper cleanup\",\n      ],\n    };\n\n    return suggestions[language.toLowerCase()] || [\n      \"Follow language-specific best practices\",\n      \"Use meaningful variable names\",\n      \"Write clear and concise comments\",\n      \"Handle edge cases properly\",\n    ];\n  }\n}\n\nexport const errorAnalyzer = new ErrorAnalyzer();\n","size_bytes":3167},"server/services/intelligentCodeGen.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface CodeSuggestion {\n  id: string;\n  type: 'completion' | 'refactor' | 'optimization' | 'pattern' | 'documentation';\n  title: string;\n  description: string;\n  originalCode: string;\n  suggestedCode: string;\n  confidence: number;\n  reasoning: string;\n  tags: string[];\n  estimatedImpact: 'low' | 'medium' | 'high';\n}\n\nexport interface SmartRefactoring {\n  id: string;\n  title: string;\n  description: string;\n  type: 'extract_method' | 'extract_class' | 'inline' | 'rename' | 'move' | 'simplify';\n  originalCode: string;\n  refactoredCode: string;\n  benefits: string[];\n  complexity: 'simple' | 'moderate' | 'complex';\n  safetyLevel: 'safe' | 'caution' | 'risky';\n}\n\nexport interface ArchitecturalPattern {\n  name: string;\n  description: string;\n  useCase: string;\n  implementation: string;\n  pros: string[];\n  cons: string[];\n  alternatives: string[];\n}\n\nexport async function generateIntelligentSuggestions(\n  code: string,\n  language: string,\n  context: { fileName?: string; projectType?: string; frameworks?: string[] } = {}\n): Promise<CodeSuggestion[]> {\n  try {\n    const prompt = `As an expert software architect and code reviewer, analyze this ${language} code and provide intelligent suggestions for improvement:\n\nCODE:\n${code}\n\nCONTEXT:\n- File: ${context.fileName || 'unknown'}\n- Project Type: ${context.projectType || 'general'}\n- Frameworks: ${context.frameworks?.join(', ') || 'none specified'}\n\nProvide 5-8 diverse suggestions covering:\n1. Code completion and auto-generation\n2. Refactoring opportunities\n3. Performance optimizations\n4. Design pattern implementations\n5. Documentation improvements\n6. Best practice implementations\n\nFor each suggestion, provide:\n- Clear title and description\n- Original and suggested code\n- Confidence level (0-100)\n- Reasoning and impact assessment\n- Relevant tags\n\nRespond in JSON format:\n{\n  \"suggestions\": [\n    {\n      \"id\": \"unique_id\",\n      \"type\": \"completion|refactor|optimization|pattern|documentation\",\n      \"title\": \"Suggestion title\",\n      \"description\": \"Detailed description\",\n      \"originalCode\": \"code snippet\",\n      \"suggestedCode\": \"improved code\",\n      \"confidence\": 85,\n      \"reasoning\": \"why this improvement helps\",\n      \"tags\": [\"tag1\", \"tag2\"],\n      \"estimatedImpact\": \"low|medium|high\"\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2500\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result.suggestions || [];\n  } catch (error) {\n    console.error('Error generating intelligent suggestions:', error);\n    throw new Error('Failed to generate intelligent suggestions');\n  }\n}\n\nexport async function generateSmartRefactoring(\n  code: string,\n  language: string,\n  refactoringGoals: string[]\n): Promise<SmartRefactoring[]> {\n  try {\n    const prompt = `As a refactoring expert, analyze this ${language} code and suggest smart refactoring options focusing on: ${refactoringGoals.join(', ')}\n\nCODE:\n${code}\n\nProvide 3-5 refactoring suggestions with:\n1. Clear identification of code smells\n2. Specific refactoring techniques\n3. Step-by-step transformation\n4. Benefits and trade-offs\n5. Safety assessment\n\nRespond in JSON format:\n{\n  \"refactorings\": [\n    {\n      \"id\": \"unique_id\",\n      \"title\": \"Refactoring title\",\n      \"description\": \"What this refactoring does\",\n      \"type\": \"extract_method|extract_class|inline|rename|move|simplify\",\n      \"originalCode\": \"original code snippet\",\n      \"refactoredCode\": \"refactored code\",\n      \"benefits\": [\"benefit1\", \"benefit2\"],\n      \"complexity\": \"simple|moderate|complex\",\n      \"safetyLevel\": \"safe|caution|risky\"\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.6,\n      max_tokens: 2000\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result.refactorings || [];\n  } catch (error) {\n    console.error('Error generating smart refactoring:', error);\n    throw new Error('Failed to generate smart refactoring');\n  }\n}\n\nexport async function suggestArchitecturalPatterns(\n  codebase: string,\n  language: string,\n  requirements: string[]\n): Promise<ArchitecturalPattern[]> {\n  try {\n    const prompt = `As a software architecture expert, analyze this ${language} codebase and suggest appropriate architectural patterns:\n\nCODEBASE OVERVIEW:\n${codebase}\n\nREQUIREMENTS:\n${requirements.join('\\n')}\n\nSuggest 3-4 architectural patterns that would improve:\n1. Code organization and maintainability\n2. Scalability and performance\n3. Testability and modularity\n4. Design principles adherence\n\nFor each pattern, provide:\n- Name and description\n- Specific use case for this codebase\n- Implementation approach\n- Pros and cons\n- Alternative patterns\n\nRespond in JSON format:\n{\n  \"patterns\": [\n    {\n      \"name\": \"Pattern Name\",\n      \"description\": \"Pattern description\",\n      \"useCase\": \"How it applies to this codebase\",\n      \"implementation\": \"Implementation details\",\n      \"pros\": [\"pro1\", \"pro2\"],\n      \"cons\": [\"con1\", \"con2\"],\n      \"alternatives\": [\"alternative1\", \"alternative2\"]\n    }\n  ]\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2000\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return result.patterns || [];\n  } catch (error) {\n    console.error('Error suggesting architectural patterns:', error);\n    throw new Error('Failed to suggest architectural patterns');\n  }\n}\n\nexport async function generateFromNaturalLanguage(\n  description: string,\n  language: string,\n  style: string = 'clean'\n): Promise<{\n  code: string;\n  explanation: string;\n  alternatives: string[];\n  testCases: string;\n  documentation: string;\n}> {\n  try {\n    const prompt = `As an expert ${language} developer, generate code from this natural language description:\n\nDESCRIPTION:\n${description}\n\nRequirements:\n- Write clean, production-ready ${language} code\n- Follow ${style} coding style\n- Include proper error handling\n- Add meaningful comments\n- Generate comprehensive test cases\n- Provide clear documentation\n\nRespond in JSON format:\n{\n  \"code\": \"generated code\",\n  \"explanation\": \"step-by-step explanation\",\n  \"alternatives\": [\"alternative approach 1\", \"alternative approach 2\"],\n  \"testCases\": \"test code\",\n  \"documentation\": \"usage documentation\"\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2500\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating code from natural language:', error);\n    throw new Error('Failed to generate code from natural language');\n  }\n}\n\nexport async function generateCodeFromImage(\n  imageBase64: string,\n  language: string\n): Promise<{\n  detectedElements: string[];\n  generatedCode: string;\n  explanation: string;\n  confidence: number;\n}> {\n  try {\n    const prompt = `Analyze this image and generate ${language} code based on what you see. This could be:\n- UI mockups or wireframes\n- Flowcharts or diagrams\n- Handwritten code or pseudocode\n- Architecture diagrams\n- Database schemas\n\nProvide:\n1. List of detected elements\n2. Generated code implementation\n3. Explanation of interpretation\n4. Confidence level (0-100)\n\nRespond in JSON format:\n{\n  \"detectedElements\": [\"element1\", \"element2\"],\n  \"generatedCode\": \"generated code\",\n  \"explanation\": \"what was interpreted\",\n  \"confidence\": 85\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"user\",\n          content: [\n            { type: \"text\", text: prompt },\n            {\n              type: \"image_url\",\n              image_url: { url: `data:image/jpeg;base64,${imageBase64}` }\n            }\n          ]\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.6,\n      max_tokens: 2000\n    });\n\n    return JSON.parse(response.choices[0].message.content || '{}');\n  } catch (error) {\n    console.error('Error generating code from image:', error);\n    throw new Error('Failed to generate code from image');\n  }\n}","size_bytes":9439},"server/services/murf.ts":{"content":"import type { MurfVoice } from \"@shared/schema\";\n\nconst MURF_API_KEY = process.env.MURF_API_KEY;\nconst MURF_API_BASE = \"https://api.murf.ai/v1\";\n\nexport async function generateSpeech(text: string, voiceId: string, options?: {\n  speed?: number;\n  pitch?: number;\n  format?: string;\n}): Promise<{ audioUrl: string; duration: number }> {\n  if (!MURF_API_KEY) {\n    throw new Error(\"MURF_API_KEY environment variable is not set\");\n  }\n\n  console.log('Murf API Request:', {\n    text: text.substring(0, 100) + '...',\n    voiceId,\n    options\n  });\n\n  try {\n    const response = await fetch(`${MURF_API_BASE}/speech/generate`, {\n      method: 'POST',\n      headers: {\n        'api-key': MURF_API_KEY,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        text: text,\n        voiceId: voiceId,\n        format: (options?.format || 'MP3').toUpperCase(),\n        modelVersion: \"GEN2\",\n        encodeAsBase64: false,\n        style: \"conversational\",\n        sampleRate: 44100,\n        channelType: \"STEREO\",\n        speed: options?.speed || 1.0,\n        pitch: options?.pitch || 0\n      }),\n    });\n\n    console.log('Murf API Response Status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Murf API Error Response:', errorText);\n      throw new Error(`Murf API error: ${response.status} ${response.statusText} - ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('Murf API Success:', result);\n    \n    return {\n      audioUrl: result.audioFile || result.audio_url || result.url,\n      duration: result.audioLengthInSeconds || result.duration || 0,\n    };\n  } catch (error) {\n    console.error('Error generating speech:', error);\n    throw new Error(\"Failed to generate speech: \" + error.message);\n  }\n}\n\nexport async function getMurfVoices(): Promise<MurfVoice[]> {\n  if (!MURF_API_KEY) {\n    console.log('No Murf API key, returning fallback voices');\n    return getFallbackVoices();\n  }\n\n  try {\n    const response = await fetch(`${MURF_API_BASE}/speech/voices`, {\n      headers: {\n        'api-key': MURF_API_KEY,\n        'Accept': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Murf voices API error: ${response.status}`);\n      return getFallbackVoices();\n    }\n\n    const result = await response.json();\n    console.log('Murf voices fetched successfully');\n    \n    // Transform Murf API response to our format\n    const voices = (result.voices || result.data || []).map((voice: any) => ({\n      id: voice.voiceId || voice.id,\n      name: voice.name,\n      language: voice.locale || voice.language,\n      gender: voice.gender,\n      accent: voice.accent\n    }));\n\n    return voices.length > 0 ? voices : getFallbackVoices();\n  } catch (error) {\n    console.error('Error fetching voices:', error);\n    return getFallbackVoices();\n  }\n}\n\nfunction getFallbackVoices(): MurfVoice[] {\n  return [\n    { id: 'natalie', name: 'Natalie (US Female)', language: 'en-US', gender: 'female' },\n    { id: 'ryan', name: 'Ryan (US Male)', language: 'en-US', gender: 'male' },\n    { id: 'sarah', name: 'Sarah (US Female)', language: 'en-US', gender: 'female' },\n    { id: 'kevin', name: 'Kevin (US Male)', language: 'en-US', gender: 'male' },\n    { id: 'aditi', name: 'Aditi (IN Female)', language: 'en-IN', gender: 'female' },\n    { id: 'ravi', name: 'Ravi (IN Male)', language: 'en-IN', gender: 'male' },\n    { id: 'olivia', name: 'Olivia (UK Female)', language: 'en-GB', gender: 'female' },\n    { id: 'peter', name: 'Peter (UK Male)', language: 'en-GB', gender: 'male' },\n    { id: 'emily', name: 'Emily (AU Female)', language: 'en-AU', gender: 'female' },\n    { id: 'daniel', name: 'Daniel (AU Male)', language: 'en-AU', gender: 'male' },\n  ];\n}\n\nexport async function translateText(text: string, targetLanguage: string): Promise<string> {\n  try {\n    const response = await fetch(`${MURF_API_BASE}/translate`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${MURF_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        text,\n        target_language: targetLanguage,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Murf API error: ${response.status} ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    return result.translated_text || text;\n  } catch (error) {\n    console.error('Error translating text:', error);\n    return text; // Return original text if translation fails\n  }\n}\n","size_bytes":4585},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { ErrorDetail } from \"@shared/schema\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport async function analyzeCodeErrors(code: string, language: string): Promise<ErrorDetail[]> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert code analyzer specializing in ${language}. Analyze the provided code and identify all errors, warnings, and potential issues. Return a JSON array of error objects with the following structure:\n          {\n            \"type\": \"syntax|logical|runtime|semantic\",\n            \"severity\": \"error|warning|info\", \n            \"message\": \"Clear description of the issue\",\n            \"line\": number,\n            \"column\": number (optional),\n            \"suggestion\": \"Explanation of why this is an issue\",\n            \"fix\": \"Exact code fix or improvement\"\n          }\n          \n          Focus on:\n          - Syntax errors (missing semicolons, brackets, etc.)\n          - Type errors and undefined variables\n          - Logic issues and potential bugs\n          - Performance improvements\n          - Best practices violations\n          - Security vulnerabilities\n          \n          Provide specific, actionable solutions for each issue.`\n        },\n        {\n          role: \"user\",\n          content: `Language: ${language}\\n\\nCode:\\n${code}`\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content);\n    return result.errors || [];\n  } catch (error) {\n    console.error('Error analyzing code:', error);\n    throw new Error(\"Failed to analyze code: \" + error.message);\n  }\n}\n\nexport async function generateErrorExplanation(error: ErrorDetail, language: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a helpful programming tutor. Explain programming errors in clear, beginner-friendly language suitable for text-to-speech conversion. Use simple vocabulary and avoid special characters or symbols that might not pronounce well. Keep explanations concise but informative.`\n        },\n        {\n          role: \"user\",\n          content: `Explain this ${language} error for voice narration:\n          Type: ${error.type}\n          Message: ${error.message}\n          Line: ${error.line}\n          ${error.suggestion ? `Suggestion: ${error.suggestion}` : ''}\n          ${error.fix ? `Fix: ${error.fix}` : ''}`\n        },\n      ],\n    });\n\n    return response.choices[0].message.content || '';\n  } catch (error) {\n    console.error('Error generating explanation:', error);\n    throw new Error(\"Failed to generate explanation: \" + error.message);\n  }\n}\n","size_bytes":3236},"server/services/realTimeCollaboration.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { nanoid } from 'nanoid';\n\nexport interface CollaborationSession {\n  id: string;\n  name: string;\n  language: string;\n  code: string;\n  participants: Participant[];\n  createdAt: Date;\n  lastActivity: Date;\n}\n\nexport interface Participant {\n  id: string;\n  name: string;\n  color: string;\n  cursor: { line: number; column: number };\n  selection: { start: { line: number; column: number }; end: { line: number; column: number } } | null;\n  isActive: boolean;\n}\n\nexport interface CodeChange {\n  id: string;\n  sessionId: string;\n  participantId: string;\n  type: 'insert' | 'delete' | 'replace';\n  position: { line: number; column: number };\n  content: string;\n  timestamp: Date;\n}\n\nexport class CollaborationManager {\n  private sessions: Map<string, CollaborationSession> = new Map();\n  private connections: Map<string, { ws: WebSocket; sessionId: string; participantId: string }> = new Map();\n  private wss: WebSocketServer | null = null;\n\n  initialize(server: any) {\n    this.wss = new WebSocketServer({ server, path: '/ws/collaborate' });\n    \n    this.wss.on('connection', (ws: WebSocket) => {\n      const connectionId = nanoid();\n      \n      ws.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString());\n          this.handleMessage(connectionId, ws, message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnection(connectionId);\n      });\n    });\n  }\n\n  private handleMessage(connectionId: string, ws: WebSocket, message: any) {\n    switch (message.type) {\n      case 'join_session':\n        this.handleJoinSession(connectionId, ws, message);\n        break;\n      case 'create_session':\n        this.handleCreateSession(connectionId, ws, message);\n        break;\n      case 'code_change':\n        this.handleCodeChange(connectionId, message);\n        break;\n      case 'cursor_update':\n        this.handleCursorUpdate(connectionId, message);\n        break;\n      case 'voice_annotation':\n        this.handleVoiceAnnotation(connectionId, message);\n        break;\n    }\n  }\n\n  private handleJoinSession(connectionId: string, ws: WebSocket, message: any) {\n    const { sessionId, participantName } = message;\n    const session = this.sessions.get(sessionId);\n    \n    if (!session) {\n      ws.send(JSON.stringify({ type: 'error', message: 'Session not found' }));\n      return;\n    }\n\n    const participant: Participant = {\n      id: nanoid(),\n      name: participantName,\n      color: this.generateParticipantColor(),\n      cursor: { line: 1, column: 1 },\n      selection: null,\n      isActive: true\n    };\n\n    session.participants.push(participant);\n    session.lastActivity = new Date();\n\n    this.connections.set(connectionId, {\n      ws,\n      sessionId,\n      participantId: participant.id\n    });\n\n    // Send session state to new participant\n    ws.send(JSON.stringify({\n      type: 'session_joined',\n      session,\n      participantId: participant.id\n    }));\n\n    // Notify other participants\n    this.broadcastToSession(sessionId, {\n      type: 'participant_joined',\n      participant\n    }, participant.id);\n  }\n\n  private handleCreateSession(connectionId: string, ws: WebSocket, message: any) {\n    const { sessionName, language, code, participantName } = message;\n    \n    const session: CollaborationSession = {\n      id: nanoid(),\n      name: sessionName,\n      language,\n      code: code || '',\n      participants: [],\n      createdAt: new Date(),\n      lastActivity: new Date()\n    };\n\n    const participant: Participant = {\n      id: nanoid(),\n      name: participantName,\n      color: this.generateParticipantColor(),\n      cursor: { line: 1, column: 1 },\n      selection: null,\n      isActive: true\n    };\n\n    session.participants.push(participant);\n    this.sessions.set(session.id, session);\n\n    this.connections.set(connectionId, {\n      ws,\n      sessionId: session.id,\n      participantId: participant.id\n    });\n\n    ws.send(JSON.stringify({\n      type: 'session_created',\n      session,\n      participantId: participant.id\n    }));\n  }\n\n  private handleCodeChange(connectionId: string, message: any) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    const session = this.sessions.get(connection.sessionId);\n    if (!session) return;\n\n    const change: CodeChange = {\n      id: nanoid(),\n      sessionId: connection.sessionId,\n      participantId: connection.participantId,\n      type: message.changeType,\n      position: message.position,\n      content: message.content,\n      timestamp: new Date()\n    };\n\n    // Apply change to session code\n    session.code = this.applyCodeChange(session.code, change);\n    session.lastActivity = new Date();\n\n    // Broadcast change to all participants except sender\n    this.broadcastToSession(connection.sessionId, {\n      type: 'code_changed',\n      change,\n      newCode: session.code\n    }, connection.participantId);\n  }\n\n  private handleCursorUpdate(connectionId: string, message: any) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    const session = this.sessions.get(connection.sessionId);\n    if (!session) return;\n\n    const participant = session.participants.find(p => p.id === connection.participantId);\n    if (!participant) return;\n\n    participant.cursor = message.cursor;\n    participant.selection = message.selection;\n\n    this.broadcastToSession(connection.sessionId, {\n      type: 'cursor_updated',\n      participantId: connection.participantId,\n      cursor: message.cursor,\n      selection: message.selection\n    }, connection.participantId);\n  }\n\n  private handleVoiceAnnotation(connectionId: string, message: any) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    this.broadcastToSession(connection.sessionId, {\n      type: 'voice_annotation',\n      participantId: connection.participantId,\n      audioUrl: message.audioUrl,\n      position: message.position,\n      timestamp: new Date()\n    }, connection.participantId);\n  }\n\n  private handleDisconnection(connectionId: string) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    const session = this.sessions.get(connection.sessionId);\n    if (session) {\n      const participantIndex = session.participants.findIndex(p => p.id === connection.participantId);\n      if (participantIndex !== -1) {\n        session.participants[participantIndex].isActive = false;\n        \n        this.broadcastToSession(connection.sessionId, {\n          type: 'participant_left',\n          participantId: connection.participantId\n        });\n      }\n    }\n\n    this.connections.delete(connectionId);\n  }\n\n  private broadcastToSession(sessionId: string, message: any, excludeParticipantId?: string) {\n    for (const [connectionId, connection] of this.connections) {\n      if (connection.sessionId === sessionId && \n          connection.participantId !== excludeParticipantId) {\n        connection.ws.send(JSON.stringify(message));\n      }\n    }\n  }\n\n  private applyCodeChange(code: string, change: CodeChange): string {\n    const lines = code.split('\\n');\n    const { line, column } = change.position;\n    \n    switch (change.type) {\n      case 'insert':\n        if (lines[line - 1]) {\n          const currentLine = lines[line - 1];\n          lines[line - 1] = currentLine.slice(0, column) + change.content + currentLine.slice(column);\n        }\n        break;\n      case 'delete':\n        if (lines[line - 1]) {\n          const currentLine = lines[line - 1];\n          lines[line - 1] = currentLine.slice(0, column) + currentLine.slice(column + change.content.length);\n        }\n        break;\n      case 'replace':\n        if (lines[line - 1]) {\n          lines[line - 1] = change.content;\n        }\n        break;\n    }\n    \n    return lines.join('\\n');\n  }\n\n  private generateParticipantColor(): string {\n    const colors = [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',\n      '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'\n    ];\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  getActiveSessionsCount(): number {\n    return this.sessions.size;\n  }\n\n  getSession(sessionId: string): CollaborationSession | undefined {\n    return this.sessions.get(sessionId);\n  }\n\n  getAllSessions(): CollaborationSession[] {\n    return Array.from(this.sessions.values());\n  }\n}\n\nexport const collaborationManager = new CollaborationManager();","size_bytes":8597},"client/src/components/AIMentor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Brain, Shield, Zap, Target, TrendingUp, Award, BookOpen, Code2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface AIMentorProps {\n  code: string;\n  language: string;\n  onCodeSuggestion?: (suggestion: any) => void;\n}\n\nexport function AIMentor({ code, language, onCodeSuggestion }: AIMentorProps) {\n  const [activeTab, setActiveTab] = useState(\"mentorship\");\n\n  // Mentorship query\n  const mentorshipMutation = useMutation({\n    mutationFn: async ({ code, language }: { code: string; language: string }) => {\n      const response = await apiRequest('POST', '/api/ai-mentor/mentorship', {\n        code,\n        language\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n    }\n  });\n\n  // Code optimization query\n  const optimizationMutation = useMutation({\n    mutationFn: async ({ code, language, goals }: { code: string; language: string; goals: string[] }) => {\n      const response = await apiRequest('POST', '/api/ai-mentor/optimize', {\n        code,\n        language,\n        goals\n      });\n      return response.json();\n    }\n  });\n\n  // Security audit query\n  const securityMutation = useMutation({\n    mutationFn: async ({ code, language }: { code: string; language: string }) => {\n      const response = await apiRequest('POST', '/api/ai-mentor/security-audit', {\n        code,\n        language\n      });\n      return response.json();\n    }\n  });\n\n  // Intelligent suggestions query\n  const suggestionsMutation = useMutation({\n    mutationFn: async ({ code, language }: { code: string; language: string }) => {\n      const response = await apiRequest('POST', '/api/codegen/suggestions', {\n        code,\n        language,\n        context: { projectType: \"web\", frameworks: [\"react\"] }\n      });\n      return response.json();\n    }\n  });\n\n  const generateMentorship = () => {\n    if (code.trim()) {\n      mentorshipMutation.mutate({ code, language });\n    }\n  };\n\n  const generateOptimization = () => {\n    if (code.trim()) {\n      optimizationMutation.mutate({ code, language, goals: [\"performance\", \"readability\", \"maintainability\"] });\n    }\n  };\n\n  const generateSecurityAudit = () => {\n    if (code.trim()) {\n      securityMutation.mutate({ code, language });\n    }\n  };\n\n  const generateSuggestions = () => {\n    if (code.trim()) {\n      suggestionsMutation.mutate({ code, language });\n    }\n  };\n\n  const renderSkillLevel = (level: string) => {\n    const levels = { beginner: 25, intermediate: 50, advanced: 75, expert: 100 };\n    return (\n      <div className=\"flex items-center gap-2\">\n        <Progress value={levels[level as keyof typeof levels] || 0} className=\"w-20 h-2\" />\n        <Badge variant={level === \"expert\" ? \"default\" : level === \"advanced\" ? \"secondary\" : \"outline\"}>\n          {level}\n        </Badge>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-full space-y-3 md:space-y-4 ai-mentor-container\">\n      <div className=\"flex items-center gap-2 mb-3 md:mb-4 responsive-header\">\n        <Brain className=\"h-5 w-5 md:h-6 md:w-6 text-accent-purple\" />\n        <h2 className=\"text-lg md:text-2xl font-bold text-white\">AI Mentor</h2>\n        <Badge variant=\"secondary\" className=\"bg-gradient-primary text-white text-xs shadow-glow\">Advanced</Badge>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 gap-1 glass-card p-1\">\n          <TabsTrigger value=\"mentorship\" className=\"flex items-center gap-1 text-xs md:text-sm\">\n            <BookOpen className=\"h-3 w-3 md:h-4 md:w-4\" />\n            <span className=\"hidden sm:inline\">Mentorship</span>\n            <span className=\"sm:hidden\">Mentor</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"optimization\" className=\"flex items-center gap-1 text-xs md:text-sm\">\n            <Zap className=\"h-3 w-3 md:h-4 md:w-4\" />\n            <span className=\"hidden sm:inline\">Optimize</span>\n            <span className=\"sm:hidden\">Opt</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-1 text-xs md:text-sm\">\n            <Shield className=\"h-3 w-3 md:h-4 md:w-4\" />\n            <span className=\"hidden sm:inline\">Security</span>\n            <span className=\"sm:hidden\">Sec</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"suggestions\" className=\"flex items-center gap-1 text-xs md:text-sm\">\n            <Code2 className=\"h-3 w-3 md:h-4 md:w-4\" />\n            <span className=\"hidden sm:inline\">Suggestions</span>\n            <span className=\"sm:hidden\">Sugg</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"mentorship\" className=\"space-y-3 md:space-y-4\">\n          <Card className=\"glass-card border-border shadow-glow/20\">\n            <CardHeader className=\"pb-3 md:pb-6\">\n              <CardTitle className=\"flex items-center gap-2 text-sm md:text-base\">\n                <Target className=\"h-4 w-4 md:h-5 md:w-5 text-accent-cyan\" />\n                Personalized Mentorship\n              </CardTitle>\n              <CardDescription className=\"text-xs md:text-sm text-white/90\">\n                Get AI-powered mentorship tailored to your coding journey and skill level.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3 md:space-y-4 pt-0\">\n              <Button \n                onClick={generateMentorship} \n                disabled={mentorshipMutation.isPending || !code.trim()}\n                className=\"w-full bg-gradient-primary hover:shadow-glow/50 transition-all text-sm md:text-base\"\n              >\n                {mentorshipMutation.isPending ? \"Analyzing...\" : \"Generate Mentorship\"}\n              </Button>\n\n              {mentorshipMutation.data && (\n                <ScrollArea className=\"h-auto max-h-[70vh]\">\n                  <div className=\"space-y-3 md:space-y-4 pr-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Personalized Feedback</h4>\n                      <p className=\"text-xs md:text-sm text-secondary glass p-3 rounded-lg border border-border\">\n                        {mentorshipMutation.data.personalizedFeedback}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Skill Assessment</h4>\n                      <div className=\"space-y-2 md:space-y-3\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                          <span className=\"text-xs md:text-sm text-secondary\">Overall Level:</span>\n                          <div className=\"skill-level-mobile\">\n                            {renderSkillLevel(mentorshipMutation.data.skillAssessment.overallLevel)}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs md:text-sm font-medium text-primary\">Strengths:</span>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {mentorshipMutation.data.skillAssessment.strengths.map((strength: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs bg-gradient-to-r from-accent-green/20 to-accent-cyan/20 text-accent-green border-accent-green/30\">\n                                {strength}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-xs md:text-sm font-medium text-primary\">Areas to Improve:</span>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {mentorshipMutation.data.skillAssessment.weaknesses.map((weakness: string, index: number) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs border-accent-orange/30 text-accent-orange\">\n                                {weakness}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Learning Path</h4>\n                      <Card className=\"glass-card border-border\">\n                        <CardContent className=\"pt-3 md:pt-4\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                              <h5 className=\"font-medium text-sm md:text-base text-primary\">{mentorshipMutation.data.learningPath.title}</h5>\n                              <Badge className=\"bg-gradient-to-r from-accent-purple to-accent-blue text-white w-fit\">\n                                {mentorshipMutation.data.learningPath.difficulty}\n                              </Badge>\n                            </div>\n                            <p className=\"text-xs md:text-sm text-secondary\">\n                              {mentorshipMutation.data.learningPath.description}\n                            </p>\n                            <div className=\"text-xs text-secondary flex items-center gap-2\">\n                              <Target className=\"h-3 w-3\" />\n                              Estimated time: {mentorshipMutation.data.learningPath.estimatedTime}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Practice Exercises</h4>\n                      <div className=\"space-y-2 md:space-y-3\">\n                        {mentorshipMutation.data.practiceExercises.map((exercise: any, index: number) => (\n                          <Card key={index} className=\"glass-card border-border p-3\">\n                            <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mb-2\">\n                              <span className=\"font-medium text-xs md:text-sm text-primary\">{exercise.title}</span>\n                              <Badge variant=\"outline\" className=\"text-xs border-accent-cyan/30 text-accent-cyan w-fit\">\n                                {exercise.difficulty}\n                              </Badge>\n                            </div>\n                            <p className=\"text-xs text-secondary\">{exercise.description}</p>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </ScrollArea>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"optimization\" className=\"space-y-3 md:space-y-4\">\n          <Card className=\"glass-card border-border shadow-glow/20\">\n            <CardHeader className=\"pb-3 md:pb-6\">\n              <CardTitle className=\"flex items-center gap-2 text-sm md:text-base\">\n                <Zap className=\"h-4 w-4 md:h-5 md:w-5 text-accent-orange\" />\n                Code Optimization\n              </CardTitle>\n              <CardDescription className=\"text-xs md:text-sm text-white/90\">\n                AI-powered code optimization for performance, readability, and maintainability.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3 md:space-y-4 pt-0\">\n              <Button \n                onClick={generateOptimization} \n                disabled={optimizationMutation.isPending || !code.trim()}\n                className=\"w-full bg-gradient-to-r from-accent-orange to-accent-yellow hover:shadow-glow/50 transition-all text-sm md:text-base\"\n              >\n                {optimizationMutation.isPending ? \"Optimizing...\" : \"Optimize Code\"}\n              </Button>\n\n              {optimizationMutation.data && (\n                <ScrollArea className=\"h-auto max-h-[70vh]\">\n                  <div className=\"space-y-3 md:space-y-4 pr-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Optimized Code</h4>\n                      <pre className=\"glass p-3 rounded-lg text-xs md:text-sm overflow-x-auto border border-border\">\n                        <code className=\"text-accent-cyan\">{optimizationMutation.data.optimizedCode}</code>\n                      </pre>\n                      <Button \n                        onClick={() => onCodeSuggestion?.({ suggestedCode: optimizationMutation.data.optimizedCode })}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"mt-2 text-xs md:text-sm\"\n                      >\n                        Apply Optimization\n                      </Button>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Improvements Made</h4>\n                      <ul className=\"space-y-2\">\n                        {optimizationMutation.data.improvements.map((improvement: string, index: number) => (\n                          <li key={index} className=\"text-xs md:text-sm flex items-start gap-2 glass p-2 rounded-lg border border-border\">\n                            <TrendingUp className=\"h-3 w-3 md:h-4 md:w-4 text-accent-green mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-secondary\">{improvement}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Performance Gains</h4>\n                      <p className=\"text-xs md:text-sm text-secondary glass p-3 rounded-lg border border-accent-green/30 bg-accent-green/5\">\n                        {optimizationMutation.data.performanceGains}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Explanation</h4>\n                      <p className=\"text-xs md:text-sm text-secondary glass p-3 rounded-lg border border-border\">\n                        {optimizationMutation.data.explanation}\n                      </p>\n                    </div>\n                  </div>\n                </ScrollArea>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-3 md:space-y-4\">\n          <Card className=\"glass-card border-border shadow-glow/20\">\n            <CardHeader className=\"pb-3 md:pb-6\">\n              <CardTitle className=\"flex items-center gap-2 text-sm md:text-base\">\n                <Shield className=\"h-4 w-4 md:h-5 md:w-5 text-accent-blue\" />\n                Security Audit\n              </CardTitle>\n              <CardDescription className=\"text-xs md:text-sm text-white/90\">\n                Comprehensive security analysis with vulnerability detection and compliance checks.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3 md:space-y-4 pt-0\">\n              <Button \n                onClick={generateSecurityAudit} \n                disabled={securityMutation.isPending || !code.trim()}\n                className=\"w-full bg-gradient-to-r from-accent-blue to-accent-purple hover:shadow-glow/50 transition-all text-sm md:text-base\"\n              >\n                {securityMutation.isPending ? \"Auditing...\" : \"Run Security Audit\"}\n              </Button>\n\n              {securityMutation.data && (\n                <ScrollArea className=\"h-auto max-h-[70vh]\">\n                  <div className=\"space-y-3 md:space-y-4 pr-4\">\n                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\n                      <h4 className=\"font-semibold text-sm md:text-base text-primary\">Security Score</h4>\n                      <div className=\"flex items-center gap-2\">\n                        <Progress value={securityMutation.data.securityScore} className=\"w-16 md:w-20 h-2\" />\n                        <Badge variant={securityMutation.data.securityScore >= 80 ? \"default\" : securityMutation.data.securityScore >= 60 ? \"secondary\" : \"destructive\"} className=\"text-xs\">\n                          {securityMutation.data.securityScore}/100\n                        </Badge>\n                      </div>\n                    </div>\n\n                    {securityMutation.data.vulnerabilities.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Vulnerabilities Found</h4>\n                        <div className=\"space-y-2 md:space-y-3\">\n                          {securityMutation.data.vulnerabilities.map((vuln: any, index: number) => (\n                            <Card key={index} className=\"glass-card border-border p-3\">\n                              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mb-2\">\n                                <span className=\"font-medium text-xs md:text-sm text-primary\">{vuln.type}</span>\n                                <Badge variant={vuln.severity === \"critical\" ? \"destructive\" : vuln.severity === \"high\" ? \"destructive\" : vuln.severity === \"medium\" ? \"secondary\" : \"outline\"} className=\"text-xs w-fit\">\n                                  {vuln.severity}\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-secondary mb-2\">{vuln.description}</p>\n                              <p className=\"text-xs font-medium text-primary mb-2\">Location: {vuln.location}</p>\n                              <Separator className=\"my-2\" />\n                              <p className=\"text-xs text-accent-green glass p-2 rounded border border-accent-green/30\">\n                                <strong>Solution:</strong> {vuln.solution}\n                              </p>\n                            </Card>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    <div>\n                      <h4 className=\"font-semibold mb-2 text-sm md:text-base text-primary\">Recommendations</h4>\n                      <ul className=\"space-y-2\">\n                        {securityMutation.data.recommendations.map((rec: string, index: number) => (\n                          <li key={index} className=\"text-xs md:text-sm flex items-start gap-2 glass p-2 rounded-lg border border-border\">\n                            <Shield className=\"h-3 w-3 md:h-4 md:w-4 text-accent-blue mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-secondary\">{rec}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </ScrollArea>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"suggestions\" className=\"space-y-3 md:space-y-4\">\n          <Card className=\"glass-card border-border shadow-glow/20\">\n            <CardHeader className=\"pb-3 md:pb-6\">\n              <CardTitle className=\"flex items-center gap-2 text-sm md:text-base\">\n                <Code2 className=\"h-4 w-4 md:h-5 md:w-5 text-accent-green\" />\n                Intelligent Suggestions\n              </CardTitle>\n              <CardDescription className=\"text-xs md:text-sm text-white/90\">\n                AI-powered code suggestions for completion, refactoring, and improvements.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3 md:space-y-4 pt-0\">\n              <Button \n                onClick={generateSuggestions} \n                disabled={suggestionsMutation.isPending || !code.trim()}\n                className=\"w-full bg-gradient-to-r from-accent-green to-accent-cyan hover:shadow-glow/50 transition-all text-sm md:text-base\"\n              >\n                {suggestionsMutation.isPending ? \"Generating...\" : \"Get Smart Suggestions\"}\n              </Button>\n\n              {suggestionsMutation.data && (\n                <ScrollArea className=\"h-auto max-h-[70vh]\">\n                  <div className=\"space-y-3 pr-4\">\n                    {suggestionsMutation.data.map((suggestion: any, index: number) => (\n                      <Card key={index} className=\"glass-card border-border p-3\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-xs md:text-sm text-primary\">{suggestion.title}</span>\n                            <Badge variant=\"outline\" className=\"text-xs border-accent-cyan/30 text-accent-cyan\">{suggestion.type}</Badge>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={suggestion.confidence} className=\"w-12 md:w-16 h-2\" />\n                            <Badge variant={suggestion.estimatedImpact === \"high\" ? \"default\" : suggestion.estimatedImpact === \"medium\" ? \"secondary\" : \"outline\"} className=\"text-xs\">\n                              {suggestion.estimatedImpact}\n                            </Badge>\n                          </div>\n                        </div>\n                        <p className=\"text-xs text-secondary mb-2\">{suggestion.description}</p>\n                        <div className=\"text-xs text-secondary mb-2 glass p-2 rounded border border-border\">\n                          <strong>Reasoning:</strong> {suggestion.reasoning}\n                        </div>\n                        {suggestion.codeExample && (\n                          <pre className=\"glass p-2 rounded text-xs overflow-x-auto mt-2 border border-border\">\n                            <code className=\"text-accent-cyan\">{suggestion.codeExample}</code>\n                          </pre>\n                        )}\n                        {suggestion.suggestedCode && (\n                          <div className=\"mt-2\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              onClick={() => onCodeSuggestion?.(suggestion)}\n                              className=\"text-xs glass hover:shadow-glow/30 transition-all w-full\"\n                            >\n                              Apply Suggestion\n                            </Button>\n                          </div>\n                        )}\n                      </Card>\n                    ))}\n                  </div>\n                </ScrollArea>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":23898},"client/src/components/AnalyticsDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LineChart, Line, AreaChart, Area, BarChart, Bar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell } from \"recharts\";\nimport { TrendingUp, Award, Target, Brain, Shield, Zap, Users, Calendar, Code2, Activity } from \"lucide-react\";\n\ninterface AnalyticsDashboardProps {\n  userId?: number;\n}\n\nexport function AnalyticsDashboard({ userId = 1 }: AnalyticsDashboardProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"JavaScript\");\n\n  // Fetch dashboard data\n  const { data: dashboardData, isLoading: isDashboardLoading } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\", userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/dashboard/${userId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard data\");\n      return response.json();\n    }\n  });\n\n  // Fetch personalized insights\n  const { data: insights, isLoading: isInsightsLoading } = useQuery({\n    queryKey: [\"/api/analytics/insights\", userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/insights/${userId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch insights\");\n      return response.json();\n    }\n  });\n\n  // Fetch skill progression for selected language\n  const { data: progression } = useQuery({\n    queryKey: [\"/api/analytics/progress\", userId, selectedLanguage],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/progress/${userId}/${selectedLanguage}`);\n      if (!response.ok) throw new Error(\"Failed to fetch progression\");\n      return response.json();\n    }\n  });\n\n  // Fetch achievements\n  const { data: achievements } = useQuery({\n    queryKey: [\"/api/analytics/achievements\", userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/analytics/achievements/${userId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch achievements\");\n      return response.json();\n    }\n  });\n\n  const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff7f', '#ff1493', '#1e90ff'];\n\n  const renderSkillRadar = () => {\n    if (!dashboardData?.skillRadar) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <RadarChart data={dashboardData.skillRadar}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"skill\" />\n          <PolarRadiusAxis angle={90} domain={[0, 100]} />\n          <Radar\n            name=\"Skill Level\"\n            dataKey=\"level\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n            fillOpacity={0.3}\n          />\n        </RadarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderQualityTrend = () => {\n    if (!dashboardData?.qualityTrend) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={dashboardData.qualityTrend}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={[0, 100]} />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"quality\"\n            stroke=\"#82ca9d\"\n            strokeWidth={2}\n            dot={{ fill: '#82ca9d' }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderLanguageDistribution = () => {\n    if (!dashboardData?.languageDistribution) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={dashboardData.languageDistribution}\n            cx=\"50%\"\n            cy=\"50%\"\n            outerRadius={100}\n            fill=\"#8884d8\"\n            dataKey=\"count\"\n            label={({ language, percentage }) => `${language} (${percentage}%)`}\n          >\n            {dashboardData.languageDistribution.map((_: any, index: number) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const renderComplexityEvolution = () => {\n    if (!dashboardData?.complexityEvolution) return null;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart data={dashboardData.complexityEvolution}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Area\n            type=\"monotone\"\n            dataKey=\"complexity\"\n            stroke=\"#ffc658\"\n            fill=\"#ffc658\"\n            fillOpacity={0.3}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  if (isDashboardLoading || isInsightsLoading) {\n    return (\n      <div className=\"w-full space-y-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full space-y-3 md:space-y-6 analytics-dashboard\">\n      <div className=\"flex items-center gap-2 mb-3 md:mb-6 responsive-header\">\n        <Activity className=\"h-5 w-5 md:h-6 md:w-6 text-accent-blue\" />\n        <h2 className=\"text-lg md:text-2xl font-bold text-white\">Analytics Dashboard</h2>\n        <Badge variant=\"secondary\" className=\"bg-gradient-primary text-white text-xs shadow-glow\">Premium</Badge>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Code Quality</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {dashboardData?.qualityTrend?.slice(-1)[0]?.quality || 75}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              +5% from last week\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Languages Mastered</CardTitle>\n            <Code2 className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {dashboardData?.languageDistribution?.length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across {dashboardData?.languageDistribution?.reduce((sum: number, lang: any) => sum + lang.count, 0) || 0} projects\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Level</CardTitle>\n            <Target className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              Level {progression?.currentLevel || 1}\n            </div>\n            <Progress value={progression?.progressToNext || 0} className=\"mt-2\" />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {progression?.progressToNext || 0}% to next level\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Achievements</CardTitle>\n            <Award className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {achievements?.length || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Unlocked this month\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"skills\">Skills</TabsTrigger>\n          <TabsTrigger value=\"progress\">Progress</TabsTrigger>\n          <TabsTrigger value=\"insights\">Insights</TabsTrigger>\n          <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Code Quality Trend</CardTitle>\n                <CardDescription>Your coding quality improvement over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {renderQualityTrend()}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Language Distribution</CardTitle>\n                <CardDescription>Programming languages you've worked with</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {renderLanguageDistribution()}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Code Complexity Evolution</CardTitle>\n                <CardDescription>How your code complexity has changed</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {renderComplexityEvolution()}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Skill Radar</CardTitle>\n                <CardDescription>Your current skill levels across different areas</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {renderSkillRadar()}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"skills\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Skill Assessment</CardTitle>\n              <CardDescription>Detailed breakdown of your programming skills</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {dashboardData?.skillRadar?.map((skill: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <span className=\"font-medium\">{skill.skill}</span>\n                    <div className=\"flex items-center gap-2 w-32\">\n                      <Progress value={skill.level} className=\"flex-1\" />\n                      <span className=\"text-sm text-muted-foreground\">{skill.level}%</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"progress\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Learning Progress</CardTitle>\n              <CardDescription>Track your journey and milestones</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">Current Level</span>\n                    <Badge variant=\"secondary\">Level {progression?.currentLevel || 1}</Badge>\n                  </div>\n                  <Progress value={progression?.progressToNext || 0} className=\"mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    {progression?.experience || 0} XP earned\n                  </p>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Milestones Achieved</h4>\n                  <div className=\"space-y-2\">\n                    {progression?.milestoneAchievements?.map((milestone: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Award className=\"h-4 w-4 text-yellow-500\" />\n                        <span className=\"text-sm\">{milestone}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  Key Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {insights?.insights?.map((insight: string, index: number) => (\n                    <li key={index} className=\"text-sm flex items-start gap-2\">\n                      <TrendingUp className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                      {insight}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Recommendations\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {insights?.recommendations?.map((rec: string, index: number) => (\n                    <li key={index} className=\"text-sm flex items-start gap-2\">\n                      <Zap className=\"h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                      {rec}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Next Learning Goals</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {insights?.nextLearningGoals?.map((goal: string, index: number) => (\n                    <li key={index} className=\"text-sm flex items-start gap-2\">\n                      <Target className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                      {goal}\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Strength Areas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {insights?.strengthAreas?.map((strength: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\">\n                      {strength}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"achievements\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {achievements?.map((achievement: any, index: number) => (\n              <Card key={index} className=\"relative overflow-hidden\">\n                <div className={`absolute top-0 right-0 w-16 h-16 ${\n                  achievement.rarity === 'legendary' ? 'bg-gradient-to-br from-yellow-400 to-orange-500' :\n                  achievement.rarity === 'epic' ? 'bg-gradient-to-br from-purple-400 to-pink-500' :\n                  achievement.rarity === 'rare' ? 'bg-gradient-to-br from-blue-400 to-blue-600' :\n                  'bg-gradient-to-br from-gray-400 to-gray-600'\n                } transform rotate-45 translate-x-4 -translate-y-4`}></div>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Award className={`h-6 w-6 ${\n                        achievement.rarity === 'legendary' ? 'text-yellow-500' :\n                        achievement.rarity === 'epic' ? 'text-purple-500' :\n                        achievement.rarity === 'rare' ? 'text-blue-500' :\n                        'text-gray-500'\n                      }`} />\n                      <div>\n                        <CardTitle className=\"text-sm\">{achievement.title}</CardTitle>\n                        <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                          {achievement.rarity}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground\">{achievement.description}</p>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Category: {achievement.category}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17970},"client/src/components/CodeEditor.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Volume2, Wand2, AlertTriangle } from \"lucide-react\";\nimport { configureMonaco, createErrorMarkers } from \"@/lib/monaco\";\nimport { getLanguageById } from \"@/lib/languages\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ErrorDetail } from \"@shared/schema\";\n\ninterface CodeEditorProps {\n  language: string;\n  code: string;\n  onCodeChange: (code: string) => void;\n  errors: ErrorDetail[];\n  onAnalyze: () => void;\n  onExplainErrors: () => void;\n  isAnalyzing: boolean;\n}\n\nexport default function CodeEditor({\n  language,\n  code,\n  onCodeChange,\n  errors,\n  onAnalyze,\n  onExplainErrors,\n  isAnalyzing,\n}: CodeEditorProps) {\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isEditorReady, setIsEditorReady] = useState(false);\n  const { toast } = useToast();\n\n  const languageInfo = getLanguageById(language);\n  const errorCount = errors.filter(e => e.severity === 'error').length;\n  const warningCount = errors.filter(e => e.severity === 'warning').length;\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Configure Monaco\n    configureMonaco();\n\n    // Create editor\n    const editor = monaco.editor.create(containerRef.current, {\n      value: code,\n      language: languageInfo?.monacoId || 'javascript',\n      theme: 'fixgenie-dark',\n      fontSize: 14,\n      fontFamily: 'JetBrains Mono, monospace',\n      lineNumbers: 'on',\n      minimap: { enabled: false },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 2,\n      insertSpaces: true,\n      wordWrap: 'on',\n      lineDecorationsWidth: 60,\n      lineNumbersMinChars: 3,\n      glyphMargin: true,\n      folding: true,\n      renderLineHighlight: 'line',\n      selectionHighlight: true,\n      occurrencesHighlight: true,\n      bracketPairColorization: { enabled: true },\n    });\n\n    editorRef.current = editor;\n    setIsEditorReady(true);\n\n    // Listen for content changes\n    const subscription = editor.onDidChangeModelContent(() => {\n      onCodeChange(editor.getValue());\n    });\n\n    return () => {\n      subscription.dispose();\n      editor.dispose();\n    };\n  }, []);\n\n  // Update language when it changes\n  useEffect(() => {\n    if (editorRef.current && languageInfo) {\n      const model = editorRef.current.getModel();\n      if (model) {\n        monaco.editor.setModelLanguage(model, languageInfo.monacoId);\n      }\n    }\n  }, [language, languageInfo]);\n\n  // Update error markers when errors change\n  useEffect(() => {\n    if (editorRef.current && isEditorReady) {\n      const model = editorRef.current.getModel();\n      if (model) {\n        const markers = createErrorMarkers(errors);\n        monaco.editor.setModelMarkers(model, 'fixgenie', markers);\n      }\n    }\n  }, [errors, isEditorReady]);\n\n  // Update editor value when code prop changes\n  useEffect(() => {\n    if (editorRef.current && code !== editorRef.current.getValue()) {\n      editorRef.current.setValue(code);\n    }\n  }, [code]);\n\n  const getSampleCode = (lang: string): string => {\n    const samples = {\n      javascript: `function calculateTotal(items) {\n    let total = 0;\n    \n    for (let i = 0; i < items.length; i++) {\n        total += items[i].price;\n    }\n    \n    // Apply discount if total > 100\n    if (total > 100) {\n        total = total * 0.9 // Missing semicolon\n    }\n    \n    // Format currency\n    return total.toFixed(2) // Should return string with currency symbol\n}`,\n      python: `def calculate_total(items):\n    total = 0\n    \n    for item in items:\n        total += item['price']\n    \n    # Apply discount if total > 100\n    if total > 100:\n        total = total * 0.9\n    \n    # Format currency - missing return statement\n    return f\"$\" + str(total)`,\n      java: `public class Calculator {\n    public static double calculateTotal(Item[] items) {\n        double total = 0;\n        \n        for (int i = 0; i < items.length; i++) {\n            total += items[i].getPrice();\n        }\n        \n        // Apply discount if total > 100\n        if (total > 100) {\n            total = total * 0.9;\n        }\n        \n        return total // Missing semicolon\n    }\n}`,\n      cpp: `#include <iostream>\n#include <vector>\n\nclass Calculator {\npublic:\n    double calculateTotal(std::vector<Item>& items) {\n        double total = 0.0;\n        \n        for (auto& item : items) {\n            total += item.getPrice();\n        }\n        \n        // Apply discount if total > 100\n        if (total > 100) {\n            total *= 0.9;\n        }\n        \n        return total; // Memory leak potential with dynamic allocation\n    }\n};`,\n      csharp: `using System;\nusing System.Collections.Generic;\n\npublic class Calculator \n{\n    public decimal CalculateTotal(List<Item> items) \n    {\n        decimal total = 0;\n        \n        foreach (var item in items) \n        {\n            total += item.Price;\n        }\n        \n        // Apply discount if total > 100\n        if (total > 100) \n        {\n            total = total * 0.9m;\n        }\n        \n        return total; // Should format as currency\n    }\n}`,\n      php: `<?php\nclass Calculator {\n    public function calculateTotal($items) {\n        $total = 0;\n        \n        foreach ($items as $item) {\n            $total += $item->price;\n        }\n        \n        // Apply discount if total > 100\n        if ($total > 100) {\n            $total = $total * 0.9;\n        }\n        \n        return $total; // Missing currency formatting\n    }\n}\n?>`,\n      ruby: `class Calculator\n  def calculate_total(items)\n    total = 0\n    \n    items.each do |item|\n      total += item.price\n    end\n    \n    # Apply discount if total > 100\n    if total > 100\n      total = total * 0.9\n    end\n    \n    total # Should return formatted currency\n  end\nend`,\n      go: `package main\n\nimport \"fmt\"\n\ntype Item struct {\n    Price float64\n}\n\nfunc calculateTotal(items []Item) float64 {\n    var total float64\n    \n    for _, item := range items {\n        total += item.Price\n    }\n    \n    // Apply discount if total > 100\n    if total > 100 {\n        total = total * 0.9\n    }\n    \n    return total // Missing error handling\n}`,\n      rust: `struct Item {\n    price: f64,\n}\n\nfn calculate_total(items: &[Item]) -> f64 {\n    let mut total = 0.0;\n    \n    for item in items {\n        total += item.price;\n    }\n    \n    // Apply discount if total > 100\n    if total > 100.0 {\n        total = total * 0.9;\n    }\n    \n    total // Should use Result<f64, Error> for better error handling\n}`,\n      html: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Shopping Cart</h1>\n        <div id=\"cart-items\">\n            <!-- Missing closing div tag -->\n        <div class=\"total\">\n            <span>Total: $0.00</span>\n        </div>\n    </div>\n</body>\n</html>`,\n      css: `.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n.cart-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n    border-bottom: 1px solid #ccc;\n}\n\n.total {\n    font-size: 24px;\n    font-weight: bold;\n    text-align: right;\n    margin-top: 20px;\n    color: #333 // Missing semicolon\n}`,\n      sql: `CREATE TABLE orders (\n    id SERIAL PRIMARY KEY,\n    customer_id INTEGER,\n    order_date DATE DEFAULT CURRENT_DATE,\n    total_amount DECIMAL(10,2)\n);\n\n-- Calculate total sales by customer\nSELECT \n    c.name,\n    SUM(o.total_amount) as total_sales\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nWHERE o.order_date >= '2024-01-01'\nGROUP BY c.id, c.name\nORDER BY total_sales DESC\n-- Missing semicolon at end`,\n      // üß™ Emerging & Specialized Languages\n      bosque: `namespace Main;\n\nentity Item {\n    field price: Float;\n}\n\nfunction calculateTotal(items: List[Item]): Float {\n    var total = 0.0f;\n    \n    items->foreach(fn(item) => {\n        total = total + item.price;\n    });\n    \n    if (total > 100.0f) {\n        total = total * 0.9f;\n    }\n    \n    return total;\n}`,\n\n      zig: `const std = @import(\"std\");\n\nconst Item = struct {\n    price: f64,\n};\n\npub fn calculateTotal(items: []const Item) f64 {\n    var total: f64 = 0.0;\n    \n    for (items) |item| {\n        total += item.price;\n    }\n    \n    if (total > 100.0) {\n        total *= 0.9;\n    }\n    \n    return total;\n}\n\npub fn main() void {\n    std.debug.print(\"Hello, Zig!\\\\n\");\n}`,\n\n      'v-lang': `struct Item {\n    price f64\n}\n\nfn calculate_total(items []Item) f64 {\n    mut total := 0.0\n    \n    for item in items {\n        total += item.price\n    }\n    \n    if total > 100.0 {\n        total *= 0.9\n    }\n    \n    return total\n}\n\nfn main() {\n    println('Hello, V!')\n}`,\n\n      carbon: `package Main api;\n\nstruct Item {\n    var price: f64;\n}\n\nfn CalculateTotal(items: Array(Item)) -> f64 {\n    var total: f64 = 0.0;\n    \n    for (item: Item in items) {\n        total += item.price;\n    }\n    \n    if (total > 100.0) {\n        total *= 0.9;\n    }\n    \n    return total;\n}\n\nfn Main() -> i32 {\n    return 0;\n}`,\n\n      vale: `struct Item {\n    price f64;\n}\n\nfn calculateTotal(items &[]Item) f64 {\n    total mut = 0.0;\n    \n    each item in items {\n        set total = total + item.price;\n    }\n    \n    if (total > 100.0) {\n        set total = total * 0.9;\n    }\n    \n    ret total;\n}`,\n\n      // üß† AI & ML-Focused Languages\n      mojo: `from memory.unsafe import DTypePointer\n\nstruct Item:\n    var price: Float64\n    \n    fn __init__(inout self, price: Float64):\n        self.price = price\n\nfn calculate_total(items: List[Item]) -> Float64:\n    var total: Float64 = 0.0\n    \n    for i in range(len(items)):\n        total += items[i].price\n    \n    if total > 100.0:\n        total *= 0.9\n    \n    return total\n\nfn main():\n    print(\"Hello, Mojo!\")`,\n\n      gen: `@gen function calculate_total(items::Vector{Item})\n    total = 0.0\n    \n    for item in items\n        total += item.price\n    end\n    \n    if total > 100.0\n        total *= 0.9\n    end\n    \n    return total\nend\n\nstruct Item\n    price::Float64\nend`,\n\n      // üß¨ Scientific & Mathematical\n      'j-lang': `calculateTotal =: 3 : 0\ntotal =. 0\nfor_i. i. # y do.\n    total =. total + i { y\nend.\nif. total > 100 do.\n    total =. total * 0.9\nend.\ntotal\n)`,\n\n      nial: `# Nial - Nested Interactive Array Language\ncalculateTotal is operation items {\n    total := 0.0;\n    for item in items do\n        total := total + price item;\n    endfor;\n    if total > 100.0 then\n        total := total * 0.9;\n    endif;\n    total\n}\n\nprice is operation item {\n    item@1  # Access price field (assuming second element)\n}`,\n\n      // üß© Domain-Specific & DSLs\n      elm: `module Main exposing (..)\n\nimport Html exposing (text)\n\ntype alias Item = \n    { price : Float }\n\ncalculateTotal : List Item -> Float\ncalculateTotal items =\n    let\n        total = List.foldl (\\\\item acc -> acc + item.price) 0 items\n    in\n    if total > 100 then\n        total * 0.9\n    else\n        total\n\nmain =\n    text \"Hello, Elm!\"`,\n\n      'pony-dsl': `class Item\n  let price: F64\n  \n  new create(price': F64) =>\n    price = price'\n\nactor Calculator\n  fun calculate_total(items: Array[Item] val): F64 =>\n    var total: F64 = 0.0\n    \n    for item in items.values() do\n      total = total + item.price\n    end\n    \n    if total > 100.0 then\n      total * 0.9\n    else\n      total\n    end`,\n\n      'red-dsl': `Red [\n    Title: \"Calculator\"\n    Purpose: \"Calculate item totals\"\n]\n\nitem: object [\n    price: 0.0\n]\n\ncalculate-total: function [items [block!]] [\n    total: 0.0\n    \n    foreach item items [\n        total: total + item/price\n    ]\n    \n    if total > 100.0 [\n        total: total * 0.9\n    ]\n    \n    total\n]`,\n\n      // üßô‚Äç‚ôÄÔ∏è Obscure but Intriguing\n      'loop-lang': `; LOOP language - theoretical construct\n(define calculate-total\n  (lambda (items)\n    (let ((total 0))\n      (loop for item in items do\n        (setq total (+ total (item-price item))))\n      (if (> total 100)\n          (* total 0.9)\n          total))))`,\n\n      frink: `// Frink - units of measure tracking\ncalculateTotal[items] := \n{\n   total = 0.0 dollars\n   \n   for item = items\n      total = total + item.price\n   \n   if total > 100 dollars\n      total = total * 0.9\n   \n   return total\n}`,\n\n      rebol: `REBOL [\n    Title: \"Calculator\"\n    Purpose: \"Calculate totals with discount\"\n]\n\nitem: make object! [\n    price: 0.0\n]\n\ncalculate-total: func [items [block!]] [\n    total: 0.0\n    \n    foreach item items [\n        total: total + item/price\n    ]\n    \n    if total > 100.0 [\n        total: total * 0.9\n    ]\n    \n    total\n]`\n    };\n    \n    return samples[lang] || samples.javascript;\n  };\n\n  const loadSampleCode = async () => {\n    try {\n      const response = await fetch(`/api/sample-code/${language}`);\n      const data = await response.json();\n      \n      if (data.success && data.code) {\n        onCodeChange(data.code);\n        toast({\n          title: \"Sample Code Loaded\",\n          description: `Loaded ${language} boilerplate code for analysis`,\n        });\n      } else {\n        // Fallback to JavaScript sample\n        const fallbackResponse = await fetch('/api/sample-code/javascript');\n        const fallbackData = await fallbackResponse.json();\n        onCodeChange(fallbackData.code || '// Sample code unavailable');\n        toast({\n          title: \"Sample Code Loaded\", \n          description: `Loaded JavaScript sample (${language} not available)`,\n        });\n      }\n    } catch (error) {\n      // Emergency fallback to existing hardcoded samples\n      const sample = getSampleCode(language);\n      onCodeChange(sample);\n      toast({\n        title: \"Sample Code Loaded\",\n        description: \"Loaded local sample code\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col border border-blue-500/20 rounded-lg overflow-hidden bg-dark-elevated/50 min-h-[500px]\">\n      {/* Code Editor Header */}\n      <div className=\"bg-dark-elevated border-b border-blue-500/30 px-6 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-sm font-semibold text-text-primary\">Code Editor</h2>\n            <div className=\"flex items-center space-x-2\">\n              {errorCount > 0 && (\n                <>\n                  <div className=\"w-2 h-2 bg-error rounded-full\"></div>\n                  <span className=\"text-xs text-text-secondary\">\n                    {errorCount} {errorCount === 1 ? 'error' : 'errors'} detected\n                  </span>\n                </>\n              )}\n              {warningCount > 0 && (\n                <>\n                  <div className=\"w-2 h-2 bg-warning rounded-full\"></div>\n                  <span className=\"text-xs text-text-secondary\">\n                    {warningCount} {warningCount === 1 ? 'warning' : 'warnings'}\n                  </span>\n                </>\n              )}\n              {errorCount === 0 && warningCount === 0 && errors.length === 0 && (\n                <>\n                  <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                  <span className=\"text-xs text-text-secondary\">No issues detected</span>\n                </>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={onExplainErrors}\n              disabled={errors.length === 0 || isAnalyzing}\n              className=\"bg-primary-blue hover:bg-blue-600 text-white\"\n              size=\"sm\"\n            >\n              <Volume2 className=\"w-4 h-4 mr-2\" />\n              Explain Errors\n            </Button>\n            <Button\n              onClick={onAnalyze}\n              disabled={isAnalyzing}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-dark-border text-text-primary hover:bg-dark-elevated\"\n            >\n              <Wand2 className=\"w-4 h-4 mr-2\" />\n              {isAnalyzing ? 'Analyzing...' : 'Analyze Code'}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Monaco Editor Container */}\n      <div className=\"flex-1 relative border-t border-blue-500/10 min-h-[400px]\">\n        <div \n          ref={containerRef} \n          className=\"absolute inset-0 bg-dark rounded-b-lg w-full h-full\"\n          style={{ minHeight: '400px', minWidth: '100%' }}\n        />\n        \n        {/* Code is empty state - Centered in the middle */}\n        {!code.trim() && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-dark/80 backdrop-blur-sm z-10\" style={{ paddingTop: '160px' }}>\n            <div className=\"text-center space-y-6 px-8 py-8 max-w-md mx-auto\">\n              <div className=\"space-y-4\">\n                <AlertTriangle className=\"w-16 h-16 text-accent-yellow mx-auto animate-pulse\" />\n                <h3 className=\"text-2xl font-bold text-text-primary\">\n                  No Code to Analyze\n                </h3>\n                <p className=\"text-text-secondary text-base leading-relaxed\">\n                  Paste your {languageInfo?.name || 'JavaScript'} here or load a sample to get started with FixGenie's AI-powered error analysis\n                </p>\n                <Button \n                  onClick={loadSampleCode}\n                  size=\"lg\"\n                  className=\"bg-gradient-primary hover:opacity-90 text-white font-semibold px-8 py-3 rounded-xl shadow-glow transition-all duration-200 hover:scale-105\"\n                >\n                  <Wand2 className=\"w-5 h-5 mr-2\" />\n                  Load Sample Code\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17980},"client/src/components/CollaborationHub.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Users, Video, Mic, Share2, Crown, UserPlus, Clock, Globe, VideoIcon, Phone, Monitor, Earth } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface CollaborationHubProps {\n  onJoinSession?: (sessionId: string) => void;\n}\n\ninterface CollaborationSession {\n  id: string;\n  name: string;\n  language: string;\n  participants: {\n    id: string;\n    name: string;\n    color: string;\n    isActive: boolean;\n  }[];\n  createdAt: string;\n  lastActivity: string;\n}\n\nexport function CollaborationHub({ onJoinSession }: CollaborationHubProps) {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [sessionName, setSessionName] = useState(\"\");\n  const [selectedLanguage, setSelectedLanguage] = useState(\"JavaScript\");\n  const [participantName, setParticipantName] = useState(\"Developer\");\n  const wsRef = useRef<WebSocket | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<\"connecting\" | \"connected\" | \"disconnected\">(\"disconnected\");\n  \n  // Collaboration feature states\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [isVoiceEnabled, setIsVoiceEnabled] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [isGlobalAccess, setIsGlobalAccess] = useState(false);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  // Fetch active collaboration sessions\n  const { data: sessions, isLoading: isSessionsLoading } = useQuery({\n    queryKey: [\"/api/collaboration/sessions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/collaboration/sessions\");\n      if (!response.ok) throw new Error(\"Failed to fetch sessions\");\n      return response.json();\n    },\n    refetchInterval: 5000 // Refresh every 5 seconds\n  });\n\n  // Create new session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async ({ sessionName, language, participantName }: { sessionName: string; language: string; participantName: string }) => {\n      return new Promise((resolve, reject) => {\n        if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n          connectWebSocket();\n          setTimeout(() => {\n            if (wsRef.current?.readyState === WebSocket.OPEN) {\n              wsRef.current.send(JSON.stringify({\n                type: 'create_session',\n                sessionName,\n                language,\n                code: '',\n                participantName\n              }));\n              resolve({ sessionName });\n            } else {\n              reject(new Error(\"Failed to connect to collaboration server\"));\n            }\n          }, 1000);\n        } else {\n          wsRef.current.send(JSON.stringify({\n            type: 'create_session',\n            sessionName,\n            language,\n            code: '',\n            participantName\n          }));\n          resolve({ sessionName });\n        }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collaboration/sessions\"] });\n      setIsCreateDialogOpen(false);\n      setSessionName(\"\");\n    }\n  });\n\n  const connectWebSocket = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws/collaborate`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n      setConnectionStatus(\"connecting\");\n\n      wsRef.current.onopen = () => {\n        setConnectionStatus(\"connected\");\n        console.log(\"Connected to collaboration server\");\n      };\n\n      wsRef.current.onclose = () => {\n        setConnectionStatus(\"disconnected\");\n        console.log(\"Disconnected from collaboration server\");\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setConnectionStatus(\"disconnected\");\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          handleWebSocketMessage(message);\n        } catch (error) {\n          console.error(\"Error parsing WebSocket message:\", error);\n        }\n      };\n    } catch (error) {\n      console.error(\"Failed to connect to WebSocket:\", error);\n      setConnectionStatus(\"disconnected\");\n    }\n  };\n\n  const handleWebSocketMessage = (message: any) => {\n    switch (message.type) {\n      case 'session_created':\n        console.log(\"Session created:\", message.session);\n        if (onJoinSession) {\n          onJoinSession(message.session.id);\n        }\n        break;\n      case 'session_joined':\n        console.log(\"Joined session:\", message.session);\n        if (onJoinSession) {\n          onJoinSession(message.session.id);\n        }\n        break;\n      case 'participant_joined':\n        console.log(\"Participant joined:\", message.participant);\n        queryClient.invalidateQueries({ queryKey: [\"/api/collaboration/sessions\"] });\n        break;\n      case 'participant_left':\n        console.log(\"Participant left:\", message.participantId);\n        queryClient.invalidateQueries({ queryKey: [\"/api/collaboration/sessions\"] });\n        break;\n      case 'video_chat_start':\n        console.log(`${message.participantName} started video chat`);\n        break;\n      case 'video_chat_end':\n        console.log(`${message.participantName} ended video chat`);\n        break;\n      case 'voice_chat_start':\n        console.log(`${message.participantName} started voice chat with config:`, message.audioConfig);\n        break;\n      case 'voice_chat_end':\n        console.log(`${message.participantName} ended voice chat`);\n        break;\n      case 'screen_share_start':\n        console.log(`${message.participantName} started screen sharing:`, message.screenConfig);\n        break;\n      case 'screen_share_end':\n        console.log(`${message.participantName} stopped screen sharing`);\n        break;\n      case 'global_access_toggle':\n        console.log(`${message.participantName} ${message.globalAccess ? 'enabled' : 'disabled'} global access`);\n        break;\n      case 'error':\n        console.error(\"Collaboration error:\", message.message);\n        break;\n    }\n  };\n\n  const handleCreateSession = () => {\n    if (sessionName.trim() && selectedLanguage && participantName.trim()) {\n      createSessionMutation.mutate({\n        sessionName: sessionName.trim(),\n        language: selectedLanguage,\n        participantName: participantName.trim()\n      });\n    }\n  };\n\n  const handleJoinSession = (sessionId: string) => {\n    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n      connectWebSocket();\n      setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'join_session',\n            sessionId,\n            participantName\n          }));\n        }\n      }, 1000);\n    } else {\n      wsRef.current.send(JSON.stringify({\n        type: 'join_session',\n        sessionId,\n        participantName\n      }));\n    }\n  };\n\n  // Enhanced Real-Time Collaboration Functions\n  const toggleVideoChat = async () => {\n    try {\n      if (!isVideoEnabled) {\n        const mediaStream = await navigator.mediaDevices.getUserMedia({ \n          video: { width: 1280, height: 720, facingMode: 'user' }, \n          audio: { echoCancellation: true, noiseSuppression: true }\n        });\n        setStream(mediaStream);\n        if (videoRef.current) {\n          videoRef.current.srcObject = mediaStream;\n        }\n        setIsVideoEnabled(true);\n        \n        // Broadcast video chat start to other participants\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'video_chat_start',\n            participantName,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        console.log(\"Video chat enabled with real-time collaboration\");\n      } else {\n        if (stream) {\n          stream.getTracks().forEach(track => track.stop());\n          setStream(null);\n        }\n        setIsVideoEnabled(false);\n        \n        // Broadcast video chat end\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'video_chat_end',\n            participantName,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        console.log(\"Video chat disabled\");\n      }\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error);\n      alert(\"Camera access denied. Please allow camera permissions for video collaboration.\");\n    }\n  };\n\n  const toggleVoiceChat = async () => {\n    try {\n      if (!isVoiceEnabled) {\n        const mediaStream = await navigator.mediaDevices.getUserMedia({ \n          audio: { \n            echoCancellation: true, \n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 44100\n          }\n        });\n        setIsVoiceEnabled(true);\n        \n        // Start real-time audio collaboration\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'voice_chat_start',\n            participantName,\n            audioConfig: {\n              sampleRate: 44100,\n              echoCancellation: true,\n              noiseSuppression: true\n            },\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        console.log(\"Voice chat enabled with real-time audio collaboration\");\n      } else {\n        setIsVoiceEnabled(false);\n        \n        // End voice chat session\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'voice_chat_end',\n            participantName,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        console.log(\"Voice chat disabled\");\n      }\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n      alert(\"Microphone access denied. Please allow microphone permissions for voice collaboration.\");\n    }\n  };\n\n  const toggleScreenShare = async () => {\n    try {\n      if (!isScreenSharing) {\n        const mediaStream = await navigator.mediaDevices.getDisplayMedia({ \n          video: { \n            mediaSource: 'screen',\n            width: 1920, \n            height: 1080,\n            frameRate: 30\n          },\n          audio: true\n        });\n        setIsScreenSharing(true);\n        \n        // Broadcast screen sharing start\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'screen_share_start',\n            participantName,\n            screenConfig: {\n              width: 1920,\n              height: 1080,\n              frameRate: 30\n            },\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        // Handle when user stops screen sharing via browser UI\n        mediaStream.getVideoTracks()[0].onended = () => {\n          setIsScreenSharing(false);\n          if (wsRef.current?.readyState === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({\n              type: 'screen_share_end',\n              participantName,\n              timestamp: new Date().toISOString()\n            }));\n          }\n        };\n        \n        console.log(\"Screen sharing enabled with real-time collaboration\");\n      } else {\n        setIsScreenSharing(false);\n        \n        // Broadcast screen sharing end\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'screen_share_end',\n            participantName,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n        console.log(\"Screen sharing disabled\");\n      }\n    } catch (error) {\n      console.error(\"Error accessing screen:\", error);\n      alert(\"Screen sharing access denied or cancelled.\");\n    }\n  };\n\n  const toggleGlobalAccess = () => {\n    const newGlobalState = !isGlobalAccess;\n    setIsGlobalAccess(newGlobalState);\n    \n    // Broadcast global access change to all participants\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'global_access_toggle',\n        participantName,\n        globalAccess: newGlobalState,\n        permissions: {\n          worldwideCollaboration: newGlobalState,\n          publicSession: newGlobalState,\n          crossRegionAccess: newGlobalState\n        },\n        timestamp: new Date().toISOString()\n      }));\n    }\n    \n    console.log(`Global access ${newGlobalState ? 'enabled' : 'disabled'} - Worldwide collaboration ${newGlobalState ? 'active' : 'inactive'}`);\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const now = new Date();\n    const date = new Date(dateString);\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return \"Just now\";\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  useEffect(() => {\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      // Clean up media streams\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [stream]);\n\n  const ConnectionStatusBadge = () => (\n    <Badge variant={connectionStatus === \"connected\" ? \"default\" : connectionStatus === \"connecting\" ? \"secondary\" : \"destructive\"}>\n      {connectionStatus === \"connected\" ? \"Online\" : connectionStatus === \"connecting\" ? \"Connecting...\" : \"Offline\"}\n    </Badge>\n  );\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-6 w-6 text-green-500\" />\n          <h2 className=\"text-2xl font-bold\">Real-Time Collaboration</h2>\n          <Badge variant=\"secondary\">Live</Badge>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <ConnectionStatusBadge />\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center gap-2\">\n                <UserPlus className=\"h-4 w-4\" />\n                Create Session\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create Collaboration Session</DialogTitle>\n                <DialogDescription>\n                  Start a new real-time coding session and invite others to collaborate.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"sessionName\">Session Name</Label>\n                  <Input\n                    id=\"sessionName\"\n                    value={sessionName}\n                    onChange={(e) => setSessionName(e.target.value)}\n                    placeholder=\"My Coding Session\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"language\">Programming Language</Label>\n                  <select\n                    id=\"language\"\n                    value={selectedLanguage}\n                    onChange={(e) => setSelectedLanguage(e.target.value)}\n                    className=\"w-full px-3 py-2 border rounded-md\"\n                  >\n                    <option value=\"JavaScript\">JavaScript</option>\n                    <option value=\"Python\">Python</option>\n                    <option value=\"TypeScript\">TypeScript</option>\n                    <option value=\"Java\">Java</option>\n                    <option value=\"C++\">C++</option>\n                  </select>\n                </div>\n                <div>\n                  <Label htmlFor=\"participantName\">Your Name</Label>\n                  <Input\n                    id=\"participantName\"\n                    value={participantName}\n                    onChange={(e) => setParticipantName(e.target.value)}\n                    placeholder=\"Your name\"\n                  />\n                </div>\n                <Button \n                  onClick={handleCreateSession}\n                  disabled={createSessionMutation.isPending || !sessionName.trim()}\n                  className=\"w-full\"\n                >\n                  {createSessionMutation.isPending ? \"Creating...\" : \"Create Session\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Real-Time Collaboration Features */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 p-6\">\n        {/* Video Chat */}\n        <div \n          onClick={toggleVideoChat}\n          className={`flex items-center gap-4 p-6 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:scale-105 ${\n            isVideoEnabled \n              ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/30 dark:to-blue-900/20 shadow-lg shadow-blue-500/20' \n              : 'border-gray-200 hover:border-blue-300 dark:border-gray-700 dark:hover:border-blue-600 bg-card hover:shadow-md'\n          }`}\n        >\n          <div className={`w-16 h-16 rounded-2xl flex items-center justify-center ${\n            isVideoEnabled ? 'bg-blue-500 text-white shadow-lg' : 'bg-blue-100 dark:bg-blue-900/30 text-blue-600'\n          }`}>\n            üìπ\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-bold text-lg text-white\">Video Chat</h3>\n            <p className=\"text-sm text-gray-300\">Face-to-face collaboration</p>\n            {isVideoEnabled && (\n              <div className=\"flex items-center gap-2 mt-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-green-400 font-medium\">Live</span>\n              </div>\n            )}\n          </div>\n          {isVideoEnabled && (\n            <div className=\"text-green-400\">\n              <VideoIcon className=\"w-6 h-6\" />\n            </div>\n          )}\n        </div>\n\n        {/* Voice Chat */}\n        <div \n          onClick={toggleVoiceChat}\n          className={`flex items-center gap-4 p-6 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:scale-105 ${\n            isVoiceEnabled \n              ? 'border-green-500 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/30 dark:to-green-900/20 shadow-lg shadow-green-500/20' \n              : 'border-gray-200 hover:border-green-300 dark:border-gray-700 dark:hover:border-green-600 bg-card hover:shadow-md'\n          }`}\n        >\n          <div className={`w-16 h-16 rounded-2xl flex items-center justify-center ${\n            isVoiceEnabled ? 'bg-green-500 text-white shadow-lg' : 'bg-green-100 dark:bg-green-900/30 text-green-600'\n          }`}>\n            üéôÔ∏è\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-bold text-lg text-white\">Voice Chat</h3>\n            <p className=\"text-sm text-gray-300\">Audio communication</p>\n            {isVoiceEnabled && (\n              <div className=\"flex items-center gap-2 mt-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-green-400 font-medium\">Recording</span>\n              </div>\n            )}\n          </div>\n          {isVoiceEnabled && (\n            <div className=\"text-green-400\">\n              <Mic className=\"w-6 h-6\" />\n            </div>\n          )}\n        </div>\n\n        {/* Screen Share */}\n        <div \n          onClick={toggleScreenShare}\n          className={`flex items-center gap-4 p-6 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:scale-105 ${\n            isScreenSharing \n              ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/30 dark:to-purple-900/20 shadow-lg shadow-purple-500/20' \n              : 'border-gray-200 hover:border-purple-300 dark:border-gray-700 dark:hover:border-purple-600 bg-card hover:shadow-md'\n          }`}\n        >\n          <div className={`w-16 h-16 rounded-2xl flex items-center justify-center ${\n            isScreenSharing ? 'bg-purple-500 text-white shadow-lg' : 'bg-purple-100 dark:bg-purple-900/30 text-purple-600'\n          }`}>\n            üîó\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-bold text-lg text-white\">Screen Share</h3>\n            <p className=\"text-sm text-gray-300\">Share your screen</p>\n            {isScreenSharing && (\n              <div className=\"flex items-center gap-2 mt-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-green-400 font-medium\">Sharing</span>\n              </div>\n            )}\n          </div>\n          {isScreenSharing && (\n            <div className=\"text-green-400\">\n              <Share2 className=\"w-6 h-6\" />\n            </div>\n          )}\n        </div>\n\n        {/* Global Access */}\n        <div \n          onClick={toggleGlobalAccess}\n          className={`flex items-center gap-4 p-6 rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:scale-105 ${\n            isGlobalAccess \n              ? 'border-orange-500 bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/30 dark:to-orange-900/20 shadow-lg shadow-orange-500/20' \n              : 'border-gray-200 hover:border-orange-300 dark:border-gray-700 dark:hover:border-orange-600 bg-card hover:shadow-md'\n          }`}\n        >\n          <div className={`w-16 h-16 rounded-2xl flex items-center justify-center ${\n            isGlobalAccess ? 'bg-orange-500 text-white shadow-lg' : 'bg-orange-100 dark:bg-orange-900/30 text-orange-600'\n          }`}>\n            üåç\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-bold text-lg text-white\">Global Access</h3>\n            <p className=\"text-sm text-gray-300\">Collaborate worldwide</p>\n            {isGlobalAccess && (\n              <div className=\"flex items-center gap-2 mt-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-green-400 font-medium\">Active</span>\n              </div>\n            )}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            {isGlobalAccess && (\n              <div className=\"text-green-400\">\n                <Globe className=\"w-6 h-6\" />\n              </div>\n            )}\n            <div className=\"text-orange-400\">\n              üé§\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Video Chat Display */}\n      {isVideoEnabled && (\n        <div className=\"relative bg-black rounded-lg overflow-hidden\">\n          <video \n            ref={videoRef}\n            autoPlay \n            muted \n            className=\"w-full h-64 object-cover\"\n          />\n          <div className=\"absolute top-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-sm\">\n            You\n          </div>\n          <div className=\"absolute bottom-2 left-2 flex gap-2\">\n            <Button size=\"sm\" variant=\"outline\" onClick={toggleVideoChat}>\n              End Video\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Active Sessions */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Active Sessions</h3>\n        \n        {isSessionsLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-48 bg-muted rounded-lg animate-pulse\"></div>\n            ))}\n          </div>\n        ) : sessions && sessions.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {sessions.map((session: CollaborationSession) => (\n              <Card key={session.id} className=\"relative hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        {session.name}\n                        {session.participants.some(p => p.isActive) && (\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                        )}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center gap-2 mt-1\">\n                        <Badge variant=\"outline\">{session.language}</Badge>\n                        <span className=\"text-xs flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          {formatTimeAgo(session.lastActivity)}\n                        </span>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">\n                          Participants ({session.participants.filter(p => p.isActive).length})\n                        </span>\n                      </div>\n                      <div className=\"flex -space-x-2\">\n                        {session.participants.filter(p => p.isActive).slice(0, 4).map((participant, index) => (\n                          <Avatar key={participant.id} className=\"w-8 h-8 border-2 border-background\">\n                            <AvatarFallback \n                              style={{ backgroundColor: participant.color }}\n                              className=\"text-xs text-white\"\n                            >\n                              {participant.name.slice(0, 2).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                        ))}\n                        {session.participants.filter(p => p.isActive).length > 4 && (\n                          <div className=\"w-8 h-8 rounded-full bg-muted border-2 border-background flex items-center justify-center\">\n                            <span className=\"text-xs\">+{session.participants.filter(p => p.isActive).length - 4}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        onClick={() => handleJoinSession(session.id)}\n                        className=\"flex-1\"\n                        size=\"sm\"\n                      >\n                        <Share2 className=\"h-4 w-4 mr-1\" />\n                        Join Session\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-8\">\n              <Users className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Active Sessions</h3>\n              <p className=\"text-muted-foreground text-center mb-4\">\n                Create a new collaboration session to start coding with others in real-time.\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <UserPlus className=\"h-4 w-4 mr-1\" />\n                Create Session\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Features Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-8\">\n        <Card>\n          <CardContent className=\"flex items-center gap-3 pt-6\">\n            <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n              <Video className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h4 className=\"font-medium\">Video Chat</h4>\n              <p className=\"text-sm text-muted-foreground\">Face-to-face collaboration</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center gap-3 pt-6\">\n            <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n              <Mic className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n            </div>\n            <div>\n              <h4 className=\"font-medium\">Voice Chat</h4>\n              <p className=\"text-sm text-muted-foreground\">Audio communication</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center gap-3 pt-6\">\n            <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n              <Share2 className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n            </div>\n            <div>\n              <h4 className=\"font-medium\">Screen Share</h4>\n              <p className=\"text-sm text-muted-foreground\">Share your screen</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center gap-3 pt-6\">\n            <div className=\"p-2 bg-orange-100 dark:bg-orange-900 rounded-lg\">\n              <Globe className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n            </div>\n            <div>\n              <h4 className=\"font-medium\">Global Access</h4>\n              <p className=\"text-sm text-muted-foreground\">Collaborate worldwide</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":30874},"client/src/components/ErrorAnalysisPanel.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Download, Copy, CheckCircle, AlertTriangle, AlertCircle } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { ErrorDetail } from \"@shared/schema\";\n\ninterface ErrorAnalysisPanelProps {\n  errors: ErrorDetail[];\n  onGenerateVoice: (errorIndex: number) => void;\n  onApplyFix: (errorIndex: number) => void;\n  isGeneratingVoice: boolean;\n}\n\nexport default function ErrorAnalysisPanel({\n  errors,\n  onGenerateVoice,\n  onApplyFix,\n  isGeneratingVoice,\n}: ErrorAnalysisPanelProps) {\n  const [copyingIndex, setCopyingIndex] = useState<number | null>(null);\n\n  const syntaxErrors = errors.filter(e => e.severity === 'error');\n  const warnings = errors.filter(e => e.severity === 'warning');\n  const infos = errors.filter(e => e.severity === 'info');\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'error':\n        return <AlertTriangle className=\"w-4 h-4 text-error\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-4 h-4 text-warning\" />;\n      default:\n        return <CheckCircle className=\"w-4 h-4 text-success\" />;\n    }\n  };\n\n  const getSeverityBadge = (severity: string) => {\n    switch (severity) {\n      case 'error':\n        return <Badge variant=\"destructive\" className=\"text-xs\">SyntaxError</Badge>;\n      case 'warning':\n        return <Badge variant=\"secondary\" className=\"text-xs bg-warning/20 text-warning\">Warning</Badge>;\n      default:\n        return <Badge variant=\"secondary\" className=\"text-xs bg-success/20 text-success\">Info</Badge>;\n    }\n  };\n\n  const copyToClipboard = async (text: string, index: number) => {\n    setCopyingIndex(index);\n    try {\n      await navigator.clipboard.writeText(text);\n      setTimeout(() => setCopyingIndex(null), 1000);\n    } catch (error) {\n      console.error('Failed to copy to clipboard:', error);\n      setCopyingIndex(null);\n    }\n  };\n\n  if (errors.length === 0) {\n    return (\n      <div className=\"w-96 bg-elevated border-l border-border flex flex-col glass-card\">\n        <div className=\"p-4 border-b border-border glass\">\n          <h3 className=\"text-sm font-bold text-primary mb-2 bg-gradient-to-r from-accent-green to-accent-cyan bg-clip-text text-transparent\">Error Analysis</h3>\n          <div className=\"flex items-center space-x-2 text-xs\">\n            <span className=\"bg-gradient-success text-white px-3 py-1 rounded-full shadow-success\">Clean Code</span>\n          </div>\n        </div>\n        \n        <div className=\"flex-1 flex items-center justify-center p-6\">\n          <div className=\"text-center\">\n            <CheckCircle className=\"w-12 h-12 text-success mx-auto mb-4\" />\n            <h4 className=\"text-lg font-semibold text-text-primary mb-2\">\n              No Issues Found!\n            </h4>\n            <p className=\"text-text-secondary text-sm\">\n              Your code looks clean. No syntax errors, warnings, or issues detected.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-96 bg-dark-elevated border-l border-dark-border flex flex-col\">\n      {/* Panel Header */}\n      <div className=\"p-4 border-b border-dark-border\">\n        <h3 className=\"text-sm font-semibold text-text-primary mb-2\">Error Analysis</h3>\n        <div className=\"flex items-center space-x-2 text-xs\">\n          {syntaxErrors.length > 0 && (\n            <span className=\"bg-error/20 text-error px-2 py-1 rounded\">\n              {syntaxErrors.length} Error{syntaxErrors.length !== 1 ? 's' : ''}\n            </span>\n          )}\n          {warnings.length > 0 && (\n            <span className=\"bg-warning/20 text-warning px-2 py-1 rounded\">\n              {warnings.length} Warning{warnings.length !== 1 ? 's' : ''}\n            </span>\n          )}\n          {infos.length > 0 && (\n            <span className=\"bg-success/20 text-success px-2 py-1 rounded\">\n              {infos.length} Info\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Error List */}\n      <div className=\"flex-1 overflow-auto p-4 space-y-4\">\n        {errors.map((error, index) => (\n          <div\n            key={index}\n            className={`bg-dark rounded-lg border p-4 ${\n              error.severity === 'error' \n                ? 'border-error/30' \n                : error.severity === 'warning'\n                ? 'border-warning/30'\n                : 'border-success/30'\n            }`}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                {getSeverityIcon(error.severity)}\n                {getSeverityBadge(error.severity)}\n              </div>\n              <span className=\"text-xs text-text-secondary bg-dark-elevated px-2 py-1 rounded\">\n                Line {error.line}\n              </span>\n            </div>\n            \n            <p className=\"text-sm text-text-primary mb-3\">{error.message}</p>\n            \n            {error.suggestion && (\n              <div className=\"bg-dark-elevated rounded p-3 mb-3\">\n                <p className=\"text-xs text-text-secondary font-medium mb-1\">üí° Suggestion:</p>\n                <p className=\"text-xs text-text-primary\">{error.suggestion}</p>\n              </div>\n            )}\n\n            {/* Voice Controls */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <Button\n                onClick={() => onGenerateVoice(index)}\n                disabled={isGeneratingVoice}\n                size=\"sm\"\n                className=\"bg-primary-blue hover:bg-blue-600 text-white\"\n              >\n                <Play className=\"w-3 h-3 mr-2\" />\n                {isGeneratingVoice ? 'Generating...' : 'Listen to Error'}\n              </Button>\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(error.message, index)}\n                >\n                  {copyingIndex === index ? (\n                    <CheckCircle className=\"w-3 h-3 text-success\" />\n                  ) : (\n                    <Copy className=\"w-3 h-3 text-text-secondary\" />\n                  )}\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Download className=\"w-3 h-3 text-text-secondary\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Solution */}\n            {error.fix && (\n              <div className={`border rounded p-3 ${\n                error.severity === 'error'\n                  ? 'bg-success/10 border-success/30'\n                  : 'bg-primary-blue/10 border-primary-blue/30'\n              }`}>\n                <p className={`text-xs font-medium mb-2 ${\n                  error.severity === 'error' ? 'text-success' : 'text-primary-blue'\n                }`}>\n                  üí° {error.severity === 'error' ? 'Quick Fix' : 'Suggested Improvement'}\n                </p>\n                <div className=\"font-mono text-xs text-text-primary mb-2 bg-dark-elevated rounded p-2\">\n                  {error.fix}\n                </div>\n                <Button\n                  onClick={() => onApplyFix(index)}\n                  size=\"sm\"\n                  className={\n                    error.severity === 'error'\n                      ? 'bg-success hover:bg-green-400 text-dark'\n                      : 'bg-primary-blue hover:bg-blue-600 text-white'\n                  }\n                >\n                  Apply {error.severity === 'error' ? 'Fix' : 'Improvement'}\n                </Button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7790},"client/src/components/FloatingActionButton.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Mic, HelpCircle, Volume2, Zap } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMobile } from \"@/hooks/use-mobile\";\n\ninterface FloatingActionButtonProps {\n  onVoiceCommand: () => void;\n  onHelp: () => void;\n  onQuickAnalyze?: () => void;\n  onToggleVoice?: () => void;\n  isAnalyzing?: boolean;\n  hasAudio?: boolean;\n  isListening?: boolean;\n  isVoiceSupported?: boolean;\n}\n\nexport default function FloatingActionButton({ \n  onVoiceCommand, \n  onHelp, \n  onQuickAnalyze,\n  onToggleVoice,\n  isAnalyzing = false,\n  hasAudio = false,\n  isListening = false,\n  isVoiceSupported = true\n}: FloatingActionButtonProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const isMobile = useMobile();\n\n  const handleVoiceCommand = () => {\n    onVoiceCommand();\n  };\n\n  const buttonSize = isMobile ? \"w-14 h-14\" : \"w-12 h-12\";\n  const iconSize = isMobile ? \"w-6 h-6\" : \"w-5 h-5\";\n  const spacing = isMobile ? \"space-y-4\" : \"space-y-3\";\n  const bottomPosition = isMobile ? \"bottom-4 right-4\" : \"bottom-6 right-6\";\n\n  return (\n    <div className={`fixed ${bottomPosition} flex flex-col ${spacing} z-50`}>\n      {/* Expanded Action Buttons */}\n      {isExpanded && (\n        <>\n          {/* Quick Analyze Button */}\n          {onQuickAnalyze && (\n            <Button\n              onClick={onQuickAnalyze}\n              variant=\"outline\"\n              size=\"lg\"\n              disabled={isAnalyzing}\n              className={`${buttonSize} rounded-full shadow-glow border-border glass-card hover:bg-gradient-primary hover:text-white mobile-touch-friendly transition-all duration-300 ${\n                isAnalyzing ? 'animate-pulse bg-gradient-primary text-white' : ''\n              }`}\n              title=\"Quick Analyze\"\n            >\n              <Zap className={`${iconSize} ${isAnalyzing ? 'text-primary-blue' : 'text-text-secondary'}`} />\n            </Button>\n          )}\n\n          {/* Toggle Voice Playback */}\n          {onToggleVoice && hasAudio && (\n            <Button\n              onClick={onToggleVoice}\n              variant=\"outline\"\n              size=\"lg\"\n              className={`${buttonSize} rounded-full shadow-glow border-border glass-card hover:bg-gradient-success hover:text-white mobile-touch-friendly transition-all duration-300`}\n              title=\"Toggle Voice Playback\"\n            >\n              <Volume2 className={`${iconSize} text-text-secondary`} />\n            </Button>\n          )}\n\n          {/* Help Button */}\n          <Button\n            onClick={onHelp}\n            variant=\"outline\"\n            size=\"lg\"\n            className={`${buttonSize} rounded-full shadow-lg border-dark-border bg-dark-elevated hover:bg-dark hover:text-text-primary mobile-touch-friendly`}\n            title=\"Help & Documentation\"\n          >\n            <HelpCircle className={`${iconSize} text-text-secondary`} />\n          </Button>\n        </>\n      )}\n      \n      {/* Main Voice Command Button */}\n      <Button\n        onClick={isExpanded ? () => setIsExpanded(false) : handleVoiceCommand}\n        onDoubleClick={isMobile ? () => setIsExpanded(!isExpanded) : undefined}\n        size=\"lg\"\n        className={`${buttonSize} rounded-full shadow-xl transition-all duration-300 mobile-touch-friendly ${\n          isListening \n            ? 'bg-error hover:bg-red-600 animate-pulse-glow scale-110' \n            : isExpanded\n            ? 'bg-primary-blue/80 hover:bg-primary-blue rotate-45'\n            : 'bg-primary-blue hover:bg-blue-600 hover:scale-105'\n        }`}\n        title={\n          !isVoiceSupported ? \"Voice commands not supported\" : \n          isListening ? \"Listening... (Click to stop)\" : \n          isExpanded ? \"Close Menu\" : \"Voice Commands (Click to start)\"\n        }\n      >\n        <Mic className={`${iconSize} transition-transform duration-200 ${\n          isListening ? 'scale-110 text-white' : 'text-white'\n        }`} />\n      </Button>\n\n      {/* Voice Status Indicator */}\n      {isListening && (\n        <div className=\"absolute -top-16 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bg-dark-elevated border border-dark-border rounded-lg px-4 py-2 shadow-xl\">\n            <span className=\"text-sm text-text-primary flex items-center space-x-3\">\n              <div className=\"relative\">\n                <div className=\"w-3 h-3 bg-error rounded-full animate-pulse\"></div>\n                <div className=\"absolute top-0 left-0 w-3 h-3 bg-error rounded-full animate-ping\"></div>\n              </div>\n              <span className=\"font-medium\">Listening for commands...</span>\n            </span>\n            <div className=\"text-xs text-text-secondary mt-1 text-center\">\n              Say \"help\" for available commands\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Voice Unsupported Indicator */}\n      {!isVoiceSupported && isExpanded && (\n        <div className=\"absolute -top-12 left-1/2 transform -translate-x-1/2 z-50\">\n          <div className=\"bg-dark-elevated border border-orange-500 rounded-lg px-3 py-1 shadow-lg\">\n            <span className=\"text-xs text-orange-400 flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n              <span>Voice not supported</span>\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Expand Hint for Mobile */}\n      {isMobile && !isExpanded && !isListening && (\n        <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 opacity-0 hover:opacity-100 transition-opacity\">\n          <div className=\"text-xs text-text-secondary bg-dark-elevated rounded px-2 py-1 whitespace-nowrap\">\n            Hold for menu\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5769},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Settings, Wand2, Menu, X } from \"lucide-react\";\nimport { useMobile } from \"@/hooks/use-mobile\";\nimport SettingsModal from \"./SettingsModal\";\nimport UserProfileMenu from \"./UserProfileMenu\";\nimport UsageModal from \"./UsageModal\";\nimport TTSStatusToggle from \"./TTSStatusToggle\";\n\ninterface HeaderProps {\n  charactersUsed: number;\n  maxCharacters: number;\n  onMenuToggle?: () => void;\n  isMenuOpen?: boolean;\n}\n\nexport default function Header({ \n  charactersUsed, \n  maxCharacters, \n  onMenuToggle, \n  isMenuOpen = false \n}: HeaderProps) {\n  const isMobile = useMobile();\n  const usagePercentage = (charactersUsed / maxCharacters) * 100;\n  \n  // Modal states\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isUsageOpen, setIsUsageOpen] = useState(false);\n\n  return (\n    <header className=\"bg-elevated border-b border-border px-3 sm:px-4 md:px-6 py-2 sm:py-3 md:py-4 glass-card header-mobile\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2 sm:space-x-3 md:space-x-4\">\n          {/* Mobile Menu Button */}\n          {isMobile && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onMenuToggle}\n              className=\"p-1 lg:hidden mobile-touch-friendly hover:bg-white/10\"\n            >\n              {isMenuOpen ? (\n                <X className=\"w-4 h-4 sm:w-5 sm:h-5 text-primary\" />\n              ) : (\n                <Menu className=\"w-4 h-4 sm:w-5 sm:h-5 text-primary\" />\n              )}\n            </Button>\n          )}\n          \n          <div className=\"flex items-center space-x-1 sm:space-x-2 md:space-x-3\">\n            <div className=\"header-logo w-5 h-5 sm:w-6 sm:h-6 md:w-8 md:h-8 bg-gradient-primary rounded-xl flex items-center justify-center shadow-glow\">\n              <Wand2 className=\"text-white w-2.5 h-2.5 sm:w-3 sm:h-3 md:w-4 md:h-4\" />\n            </div>\n            <h1 className=\"header-title text-base sm:text-lg md:text-xl font-bold text-white\">\n              FixGenie\n            </h1>\n            <Badge variant=\"secondary\" className=\"bg-gradient-primary text-white text-xs shadow-glow hidden sm:inline-flex\">\n              AI-Powered\n            </Badge>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-1 sm:space-x-2 md:space-x-4\">\n          {/* TTS Status Toggle */}\n          <TTSStatusToggle className=\"hidden lg:flex\" />\n          \n          {/* API Usage - Clickable */}\n          <Button\n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => setIsUsageOpen(true)}\n            className=\"flex items-center space-x-1 md:space-x-2 text-secondary glass rounded-lg px-2 py-1 hover:shadow-glow/50 transition-all hover:scale-105\"\n          >\n            <BarChart3 className=\"w-3 h-3 md:w-4 md:h-4 text-accent-cyan\" />\n            <span className=\"text-xs md:text-sm\">\n              {isMobile \n                ? `${(charactersUsed / 1000).toFixed(0)}K`\n                : `${(charactersUsed / 1000).toFixed(1)}K / ${(maxCharacters / 1000000).toFixed(0)}M chars`\n              }\n            </span>\n          </Button>\n          \n          {/* Settings and User Menu */}\n          <div className=\"flex items-center space-x-1 sm:space-x-2 md:space-x-3\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => setIsSettingsOpen(true)}\n              className=\"mobile-touch-friendly glass hover:shadow-glow/50 transition-all hover:scale-105\"\n            >\n              <Settings className=\"w-3 h-3 md:w-4 md:h-4 text-secondary\" />\n            </Button>\n            <UserProfileMenu className=\"mobile-touch-friendly\" />\n          </div>\n        </div>\n      </div>\n      \n      {/* Modals */}\n      <SettingsModal \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)} \n      />\n      <UsageModal\n        isOpen={isUsageOpen}\n        onClose={() => setIsUsageOpen(false)}\n        charactersUsed={charactersUsed}\n        maxCharacters={maxCharacters}\n      />\n    </header>\n  );\n}\n","size_bytes":4243},"client/src/components/Sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PROGRAMMING_LANGUAGES, getAllCategories } from \"@/lib/languages\";\nimport type { ErrorAnalysis, MurfVoice } from \"@shared/schema\";\n\ninterface SidebarProps {\n  selectedLanguage: string;\n  onLanguageChange: (language: string) => void;\n  selectedVoice: string;\n  onVoiceChange: (voice: string) => void;\n  speechSpeed: number;\n  onSpeedChange: (speed: number) => void;\n  voices: MurfVoice[];\n  recentAnalyses: ErrorAnalysis[];\n  onAnalysisSelect: (analysis: ErrorAnalysis) => void;\n}\n\nexport default function Sidebar({\n  selectedLanguage,\n  onLanguageChange,\n  selectedVoice,\n  onVoiceChange,\n  speechSpeed,\n  onSpeedChange,\n  voices,\n  recentAnalyses,\n  onAnalysisSelect,\n}: SidebarProps) {\n  const [languageCategory, setLanguageCategory] = useState<string>(\"all\");\n  \n  const categories = getAllCategories();\n  const filteredLanguages = languageCategory === \"all\" \n    ? PROGRAMMING_LANGUAGES \n    : PROGRAMMING_LANGUAGES.filter(lang => lang.category === languageCategory);\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - new Date(date).getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (days > 0) return `${days}d ago`;\n    if (hours > 0) return `${hours}h ago`;\n    if (minutes > 0) return `${minutes}min ago`;\n    return 'Just now';\n  };\n\n  const getErrorTypeBadge = (errors: any[]) => {\n    const errorCount = errors.filter(e => e.severity === 'error').length;\n    const warningCount = errors.filter(e => e.severity === 'warning').length;\n    \n    if (errorCount > 0) {\n      return <Badge variant=\"destructive\" className=\"text-xs\">SyntaxError</Badge>;\n    }\n    if (warningCount > 0) {\n      return <Badge variant=\"secondary\" className=\"text-xs bg-warning/20 text-warning\">Warning</Badge>;\n    }\n    return <Badge variant=\"secondary\" className=\"text-xs bg-success/20 text-success\">Fixed</Badge>;\n  };\n\n  return (\n    <aside className=\"w-80 bg-elevated border-r border-border flex flex-col glass-card\">\n      {/* Language & Voice Settings */}\n      <div className=\"p-6 border-b border-border glass\">\n        <h3 className=\"text-sm font-bold mb-4 text-primary bg-gradient-to-r from-accent-purple to-accent-blue bg-clip-text text-transparent\">Language & Voice Settings</h3>\n        \n        {/* Category Filter */}\n        <div className=\"mb-4\">\n          <Label className=\"block text-xs font-medium text-secondary mb-2\">\n            Category Filter\n          </Label>\n          <Select value={languageCategory} onValueChange={setLanguageCategory}>\n            <SelectTrigger className=\"w-full glass border-border text-primary hover:shadow-glow/50 transition-all\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"glass-card border-border\">\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              {categories.map(category => (\n                <SelectItem key={category} value={category}>{category}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Programming Language Selector */}\n        <div className=\"mb-4 mobile-form-group\">\n          <Label className=\"block text-xs font-medium text-secondary mb-2\">\n            Programming Language\n          </Label>\n          <Select value={selectedLanguage} onValueChange={onLanguageChange}>\n            <SelectTrigger className=\"w-full glass border-border text-primary hover:shadow-glow/50 transition-all mobile-select\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"max-h-60 glass-card border-border\">\n              {filteredLanguages.map(language => (\n                <SelectItem key={language.id} value={language.id}>\n                  {language.name}\n                  <span className=\"ml-2 text-xs text-secondary\">({language.category})</span>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Voice Selection */}\n        <div className=\"mb-4 mobile-form-group\">\n          <Label className=\"block text-xs font-medium text-secondary mb-2\">\n            Murf Voice\n          </Label>\n          <Select value={selectedVoice} onValueChange={onVoiceChange}>\n            <SelectTrigger className=\"w-full glass border-border text-primary hover:shadow-glow/50 transition-all mobile-select\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"glass-card border-border\">\n              {voices.map(voice => (\n                <SelectItem key={voice.id} value={voice.id}>\n                  {voice.language.toUpperCase()} - {voice.gender.charAt(0).toUpperCase() + voice.gender.slice(1)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Voice Speed */}\n        <div className=\"mb-4\">\n          <Label className=\"block text-xs font-medium text-text-secondary mb-2\">\n            Speech Speed\n          </Label>\n          <div className=\"space-y-2\">\n            <Slider\n              value={[speechSpeed]}\n              onValueChange={(value) => onSpeedChange(value[0])}\n              min={0.5}\n              max={2}\n              step={0.1}\n              className=\"w-full\"\n            />\n            <div className=\"flex justify-between text-xs text-text-secondary\">\n              <span>0.5x</span>\n              <span>Current: {speechSpeed}x</span>\n              <span>2x</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Errors */}\n      <div className=\"p-6 border-b border-dark-border\">\n        <h3 className=\"text-sm font-semibold mb-4 text-text-primary\">Recent Error Fixes</h3>\n        <div className=\"space-y-3\">\n          {recentAnalyses.length === 0 ? (\n            <div className=\"text-center text-text-secondary text-sm py-4\">\n              No recent analyses yet\n            </div>\n          ) : (\n            recentAnalyses.map((analysis) => (\n              <div\n                key={analysis.id}\n                className=\"p-3 bg-dark rounded-lg border border-dark-border cursor-pointer hover:border-primary-blue transition-colors\"\n                onClick={() => onAnalysisSelect(analysis)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  {getErrorTypeBadge(analysis.errors)}\n                  <span className=\"text-xs text-text-secondary\">\n                    {formatTimeAgo(analysis.createdAt)}\n                  </span>\n                </div>\n                <p className=\"text-sm text-text-primary mb-1\">\n                  {analysis.errors.length > 0 \n                    ? analysis.errors[0].message \n                    : 'No errors found'\n                  }\n                </p>\n                <p className=\"text-xs text-text-secondary\">\n                  {PROGRAMMING_LANGUAGES.find(l => l.id === analysis.language)?.name || analysis.language} ‚Ä¢ \n                  {analysis.errors.length > 0 ? ` line ${analysis.errors[0].line}` : ' Clean code'}\n                </p>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"p-6 flex-1\">\n        <h3 className=\"text-sm font-semibold mb-4 text-text-primary\">Today's Stats</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-text-secondary\">Errors Fixed</span>\n            <span className=\"text-sm font-semibold text-success\">\n              {recentAnalyses.reduce((acc, analysis) => \n                acc + analysis.errors.filter(e => e.severity === 'error').length, 0\n              )}\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-text-secondary\">TTS Generated</span>\n            <span className=\"text-sm font-semibold text-primary-blue\">\n              {recentAnalyses.length}\n            </span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-text-secondary\">Languages Used</span>\n            <span className=\"text-sm font-semibold text-text-primary\">\n              {new Set(recentAnalyses.map(a => a.language)).size}\n            </span>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":8767},"client/src/components/VoicePlayer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Play, Pause, SkipForward, Volume2, Download } from \"lucide-react\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useEffect } from \"react\";\n\ninterface VoicePlayerProps {\n  audioUrl?: string;\n  title?: string;\n  isVisible: boolean;\n}\n\nexport default function VoicePlayer({ audioUrl, title, isVisible }: VoicePlayerProps) {\n  const { \n    isPlaying, \n    currentTime, \n    duration, \n    volume, \n    isLoading, \n    play, \n    pause, \n    seekTo, \n    setVolume, \n    downloadAudio \n  } = useAudio();\n\n  useEffect(() => {\n    if (audioUrl && isVisible) {\n      play(audioUrl);\n    }\n  }, [audioUrl, isVisible, play]);\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleProgressChange = (value: number[]) => {\n    seekTo((value[0] / 100) * duration);\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    setVolume(value[0] / 100);\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div className=\"p-4 border-t border-dark-border bg-dark\">\n      {/* Progress and Time */}\n      <div className=\"mb-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-xs font-medium text-text-secondary\">\n            {title || 'Now Playing'}\n          </span>\n          <span className=\"text-xs text-text-secondary\">\n            {formatTime(currentTime)} / {formatTime(duration)}\n          </span>\n        </div>\n        <Slider\n          value={[duration > 0 ? (currentTime / duration) * 100 : 0]}\n          onValueChange={handleProgressChange}\n          max={100}\n          step={1}\n          className=\"w-full\"\n          disabled={!audioUrl || isLoading}\n        />\n      </div>\n      \n      {/* Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant={isPlaying ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={isPlaying ? pause : () => audioUrl && play(audioUrl)}\n            disabled={!audioUrl || isLoading}\n            className={isPlaying ? \"bg-primary-blue hover:bg-blue-600\" : \"border-dark-border\"}\n          >\n            {isPlaying ? (\n              <Pause className=\"w-4 h-4\" />\n            ) : (\n              <Play className=\"w-4 h-4\" />\n            )}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            disabled={!audioUrl}\n            className=\"text-text-secondary hover:text-text-primary\"\n          >\n            <SkipForward className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Volume2 className=\"w-4 h-4 text-text-secondary\" />\n          <Slider\n            value={[volume * 100]}\n            onValueChange={handleVolumeChange}\n            max={100}\n            step={1}\n            className=\"w-16\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={downloadAudio}\n            disabled={!audioUrl}\n            className=\"text-text-secondary hover:text-text-primary\"\n          >\n            <Download className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3469},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n\n// Export alias for consistency\nexport const useMobile = useIsMobile;\n","size_bytes":636},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAudio.tsx":{"content":"import { useState, useRef, useCallback } from 'react';\n\nexport interface AudioState {\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  volume: number;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const useAudio = (audioUrl?: string) => {\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [state, setState] = useState<AudioState>({\n    isPlaying: false,\n    currentTime: 0,\n    duration: 0,\n    volume: 0.75,\n    isLoading: false,\n    error: null,\n  });\n\n  const initializeAudio = useCallback((url: string) => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current = null;\n    }\n\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    const audio = new Audio(url);\n    audioRef.current = audio;\n\n    audio.addEventListener('loadedmetadata', () => {\n      setState(prev => ({\n        ...prev,\n        duration: audio.duration,\n        isLoading: false,\n      }));\n    });\n\n    audio.addEventListener('timeupdate', () => {\n      setState(prev => ({\n        ...prev,\n        currentTime: audio.currentTime,\n      }));\n    });\n\n    audio.addEventListener('ended', () => {\n      setState(prev => ({\n        ...prev,\n        isPlaying: false,\n        currentTime: 0,\n      }));\n    });\n\n    audio.addEventListener('error', () => {\n      setState(prev => ({\n        ...prev,\n        error: 'Failed to load audio',\n        isLoading: false,\n      }));\n    });\n\n    audio.volume = state.volume;\n  }, [state.volume]);\n\n  const play = useCallback(async (url?: string) => {\n    try {\n      if (url && url !== audioRef.current?.src) {\n        initializeAudio(url);\n      }\n\n      if (!audioRef.current) {\n        throw new Error('No audio to play');\n      }\n\n      await audioRef.current.play();\n      setState(prev => ({ ...prev, isPlaying: true, error: null }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: 'Failed to play audio',\n        isPlaying: false,\n      }));\n    }\n  }, [initializeAudio]);\n\n  const pause = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      setState(prev => ({ ...prev, isPlaying: false }));\n    }\n  }, []);\n\n  const stop = useCallback(() => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current.currentTime = 0;\n      setState(prev => ({\n        ...prev,\n        isPlaying: false,\n        currentTime: 0,\n      }));\n    }\n  }, []);\n\n  const seekTo = useCallback((time: number) => {\n    if (audioRef.current) {\n      audioRef.current.currentTime = time;\n      setState(prev => ({ ...prev, currentTime: time }));\n    }\n  }, []);\n\n  const setVolume = useCallback((volume: number) => {\n    const clampedVolume = Math.max(0, Math.min(1, volume));\n    if (audioRef.current) {\n      audioRef.current.volume = clampedVolume;\n    }\n    setState(prev => ({ ...prev, volume: clampedVolume }));\n  }, []);\n\n  const downloadAudio = useCallback(() => {\n    if (audioRef.current?.src) {\n      const link = document.createElement('a');\n      link.href = audioRef.current.src;\n      link.download = 'fixgenie-audio.mp3';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }, []);\n\n  return {\n    ...state,\n    play,\n    pause,\n    stop,\n    seekTo,\n    setVolume,\n    downloadAudio,\n  };\n};\n","size_bytes":3337},"client/src/lib/languages.ts":{"content":"export interface ProgrammingLanguage {\n  id: string;\n  name: string;\n  category: string;\n  extension: string;\n  monacoId: string;\n}\n\nexport const PROGRAMMING_LANGUAGES: ProgrammingLanguage[] = [\n  // Compiled Languages\n  { id: 'c', name: 'C', category: 'Compiled', extension: '.c', monacoId: 'c' },\n  { id: 'cpp', name: 'C++', category: 'Compiled', extension: '.cpp', monacoId: 'cpp' },\n  { id: 'csharp', name: 'C#', category: 'Compiled', extension: '.cs', monacoId: 'csharp' },\n  { id: 'java', name: 'Java', category: 'Compiled', extension: '.java', monacoId: 'java' },\n  { id: 'fortran', name: 'Fortran', category: 'Compiled', extension: '.f90', monacoId: 'fortran' },\n  { id: 'algol', name: 'ALGOL', category: 'Compiled', extension: '.alg', monacoId: 'pascal' },\n  { id: 'cobol', name: 'COBOL', category: 'Compiled', extension: '.cob', monacoId: 'sql' },\n  { id: 'visualbasic', name: 'Visual Basic', category: 'Compiled', extension: '.vb', monacoId: 'vb' },\n  { id: 'smalltalk', name: 'Smalltalk', category: 'Compiled', extension: '.st', monacoId: 'st' },\n\n  // Interpreted Languages\n  { id: 'python', name: 'Python', category: 'Interpreted', extension: '.py', monacoId: 'python' },\n  { id: 'ruby', name: 'Ruby', category: 'Interpreted', extension: '.rb', monacoId: 'ruby' },\n  { id: 'perl', name: 'Perl', category: 'Interpreted', extension: '.pl', monacoId: 'perl' },\n  { id: 'pascal', name: 'Pascal', category: 'Interpreted', extension: '.pas', monacoId: 'pascal' },\n  { id: 'lisp', name: 'Lisp', category: 'Interpreted', extension: '.lisp', monacoId: 'scheme' },\n  { id: 'basic', name: 'BASIC', category: 'Interpreted', extension: '.bas', monacoId: 'vb' },\n  { id: 'apl', name: 'APL', category: 'Interpreted', extension: '.apl', monacoId: 'apl' },\n\n  // Scripting Languages\n  { id: 'php', name: 'PHP', category: 'Scripting', extension: '.php', monacoId: 'php' },\n  { id: 'vbscript', name: 'VBScript', category: 'Scripting', extension: '.vbs', monacoId: 'vb' },\n  { id: 'powershell', name: 'PowerShell', category: 'Scripting', extension: '.ps1', monacoId: 'powershell' },\n  { id: 'fscript', name: 'F-Script', category: 'Scripting', extension: '.fscript', monacoId: 'javascript' },\n  { id: 'beanshell', name: 'BeanShell', category: 'Scripting', extension: '.bsh', monacoId: 'java' },\n  { id: 'autoit', name: 'AutoIt', category: 'Scripting', extension: '.au3', monacoId: 'autoit' },\n  { id: 'r', name: 'R', category: 'Scripting', extension: '.r', monacoId: 'r' },\n  { id: 'lua', name: 'Lua', category: 'Scripting', extension: '.lua', monacoId: 'lua' },\n  { id: 'bash', name: 'Bash', category: 'Scripting', extension: '.sh', monacoId: 'shell' },\n\n  // Markup Languages\n  { id: 'html', name: 'HTML', category: 'Markup', extension: '.html', monacoId: 'html' },\n  { id: 'xml', name: 'XML', category: 'Markup', extension: '.xml', monacoId: 'xml' },\n  { id: 'xhtml', name: 'XHTML', category: 'Markup', extension: '.xhtml', monacoId: 'html' },\n  { id: 'sgml', name: 'SGML', category: 'Markup', extension: '.sgml', monacoId: 'xml' },\n  { id: 'curl', name: 'Curl', category: 'Markup', extension: '.curl', monacoId: 'xml' },\n\n  // Procedural Languages\n  { id: 'hypertalk', name: 'HyperTalk', category: 'Procedural', extension: '.hc', monacoId: 'javascript' },\n  { id: 'go', name: 'Go', category: 'Procedural', extension: '.go', monacoId: 'go' },\n  { id: 'plc', name: 'PL/C', category: 'Procedural', extension: '.plc', monacoId: 'sql' },\n  { id: 'pli', name: 'PL/I', category: 'Procedural', extension: '.pli', monacoId: 'sql' },\n  { id: 'curl-proc', name: 'Curl', category: 'Procedural', extension: '.curl', monacoId: 'xml' },\n  { id: 'matlab', name: 'MATLAB', category: 'Procedural', extension: '.m', monacoId: 'matlab' },\n\n  // Pure Functional Languages\n  { id: 'agda', name: 'Agda', category: 'Pure Functional', extension: '.agda', monacoId: 'haskell' },\n  { id: 'sac', name: 'SAC', category: 'Pure Functional', extension: '.sac', monacoId: 'c' },\n  { id: 'sasl', name: 'SASL', category: 'Pure Functional', extension: '.sasl', monacoId: 'haskell' },\n  { id: 'cuneiform', name: 'Cuneiform', category: 'Pure Functional', extension: '.cf', monacoId: 'erlang' },\n  { id: 'curry', name: 'Curry', category: 'Pure Functional', extension: '.curry', monacoId: 'haskell' },\n  { id: 'futhark', name: 'Futhark', category: 'Pure Functional', extension: '.fut', monacoId: 'haskell' },\n  { id: 'haskell', name: 'Haskell', category: 'Pure Functional', extension: '.hs', monacoId: 'haskell' },\n\n  // Impure Functional Languages\n  { id: 'apl-func', name: 'APL', category: 'Impure Functional', extension: '.apl', monacoId: 'apl' },\n  { id: 'cpp-func', name: 'C++ (since C++11)', category: 'Impure Functional', extension: '.cpp', monacoId: 'cpp' },\n  { id: 'csharp-func', name: 'C#', category: 'Impure Functional', extension: '.cs', monacoId: 'csharp' },\n  { id: 'vbnet', name: 'VB.NET', category: 'Impure Functional', extension: '.vb', monacoId: 'vb' },\n  { id: 'ceylon', name: 'Ceylon', category: 'Impure Functional', extension: '.ceylon', monacoId: 'java' },\n  { id: 'kotlin', name: 'Kotlin', category: 'Impure Functional', extension: '.kt', monacoId: 'kotlin' },\n  { id: 'lisp-func', name: 'LISP', category: 'Impure Functional', extension: '.lisp', monacoId: 'scheme' },\n  { id: 'clojure', name: 'Clojure', category: 'Impure Functional', extension: '.clj', monacoId: 'clojure' },\n  { id: 'javascript', name: 'JavaScript', category: 'Impure Functional', extension: '.js', monacoId: 'javascript' },\n  { id: 'php-func', name: 'PHP', category: 'Impure Functional', extension: '.php', monacoId: 'php' },\n  { id: 'python-func', name: 'Python', category: 'Impure Functional', extension: '.py', monacoId: 'python' },\n\n  // Logic-based Programming Languages\n  { id: 'prolog', name: 'Prolog', category: 'Logic-based', extension: '.pl', monacoId: 'prolog' },\n  { id: 'roop', name: 'ROOP', category: 'Logic-based', extension: '.roop', monacoId: 'prolog' },\n  { id: 'alf', name: 'ALF', category: 'Logic-based', extension: '.alf', monacoId: 'prolog' },\n  { id: 'alma0', name: 'Alma-0', category: 'Logic-based', extension: '.alma', monacoId: 'prolog' },\n  { id: 'curry-logic', name: 'Curry', category: 'Logic-based', extension: '.curry', monacoId: 'haskell' },\n  { id: 'fril', name: 'Fril', category: 'Logic-based', extension: '.fril', monacoId: 'prolog' },\n  { id: 'janus', name: 'Janus', category: 'Logic-based', extension: '.janus', monacoId: 'prolog' },\n\n  // Object-Oriented Languages\n  { id: 'scala', name: 'Scala', category: 'Object-Oriented', extension: '.scala', monacoId: 'scala' },\n  { id: 'cpp-oop', name: 'C++', category: 'Object-Oriented', extension: '.cpp', monacoId: 'cpp' },\n  { id: 'java-oop', name: 'Java', category: 'Object-Oriented', extension: '.java', monacoId: 'java' },\n  { id: 'python-oop', name: 'Python', category: 'Object-Oriented', extension: '.py', monacoId: 'python' },\n  { id: 'csharp-oop', name: 'C#', category: 'Object-Oriented', extension: '.cs', monacoId: 'csharp' },\n  { id: 'ruby-oop', name: 'Ruby', category: 'Object-Oriented', extension: '.rb', monacoId: 'ruby' },\n\n  // Dataflow Languages\n  { id: 'analytica', name: 'Analytica', category: 'Dataflow', extension: '.ana', monacoId: 'sql' },\n  { id: 'bmdfm', name: 'BMDFM', category: 'Dataflow', extension: '.bmdfm', monacoId: 'javascript' },\n  { id: 'hartmann', name: 'Hartmann pipelines', category: 'Dataflow', extension: '.hart', monacoId: 'javascript' },\n  { id: 'lucid', name: 'Lucid', category: 'Dataflow', extension: '.lucid', monacoId: 'haskell' },\n  { id: 'max', name: 'Max', category: 'Dataflow', extension: '.maxpat', monacoId: 'json' },\n  { id: 'oz', name: 'Oz', category: 'Dataflow', extension: '.oz', monacoId: 'oz' },\n  { id: 'prograph', name: 'Prograph', category: 'Dataflow', extension: '.prograph', monacoId: 'javascript' },\n  { id: 'puredata', name: 'Pure Data', category: 'Dataflow', extension: '.pd', monacoId: 'json' },\n\n  // Server Side Embeddable Languages\n  { id: 'php-server', name: 'PHP', category: 'Server Side Embeddable', extension: '.php', monacoId: 'php' },\n  { id: 'vbscript-server', name: 'VBScript', category: 'Server Side Embeddable', extension: '.vbs', monacoId: 'vb' },\n  { id: 'smx', name: 'SMX', category: 'Server Side Embeddable', extension: '.smx', monacoId: 'xml' },\n  { id: 'tcl', name: 'Tcl', category: 'Server Side Embeddable', extension: '.tcl', monacoId: 'tcl' },\n  { id: 'webdna', name: 'WebDNA', category: 'Server Side Embeddable', extension: '.dna', monacoId: 'html' },\n\n  // Client Side Embeddable Languages\n  { id: 'actionscript', name: 'ActionScript', category: 'Client Side Embeddable', extension: '.as', monacoId: 'actionscript' },\n  { id: 'javascript-client', name: 'JavaScript', category: 'Client Side Embeddable', extension: '.js', monacoId: 'javascript' },\n  { id: 'vbscript-client', name: 'VBScript', category: 'Client Side Embeddable', extension: '.vbs', monacoId: 'vb' },\n\n  // Machine Languages\n  { id: 'arm', name: 'ARM', category: 'Machine', extension: '.s', monacoId: 'arm' },\n  { id: 'dec', name: 'DEC', category: 'Machine', extension: '.mac', monacoId: 'assembly' },\n  { id: 'x86', name: 'x86', category: 'Machine', extension: '.asm', monacoId: 'assembly' },\n  { id: 'ibm360', name: 'IBM System/360', category: 'Machine', extension: '.s360', monacoId: 'assembly' },\n  { id: 'mips', name: 'MIPS', category: 'Machine', extension: '.s', monacoId: 'mips' },\n  { id: 'sparc', name: 'Sun, Oracle SPARC', category: 'Machine', extension: '.s', monacoId: 'assembly' },\n\n  // System Languages\n  { id: 'ada', name: 'Ada', category: 'System', extension: '.ada', monacoId: 'ada' },\n  { id: 'nim', name: 'Nim', category: 'System', extension: '.nim', monacoId: 'nim' },\n  { id: 'rust', name: 'Rust', category: 'System', extension: '.rs', monacoId: 'rust' },\n  { id: 'swift', name: 'Swift', category: 'System', extension: '.swift', monacoId: 'swift' },\n  { id: 'espol', name: 'ESPOL', category: 'System', extension: '.espol', monacoId: 'pascal' },\n\n  // Concurrent Languages\n  { id: 'go-concurrent', name: 'Go', category: 'Concurrent', extension: '.go', monacoId: 'go' },\n  { id: 'java-concurrent', name: 'Java', category: 'Concurrent', extension: '.java', monacoId: 'java' },\n  { id: 'julia', name: 'Julia', category: 'Concurrent', extension: '.jl', monacoId: 'julia' },\n  { id: 'clojure-concurrent', name: 'Clojure', category: 'Concurrent', extension: '.clj', monacoId: 'clojure' },\n  { id: 'scala-concurrent', name: 'Scala', category: 'Concurrent', extension: '.scala', monacoId: 'scala' },\n\n  // Multiparadigm Languages\n  { id: 'ada-multi', name: 'Ada', category: 'Multiparadigm', extension: '.ada', monacoId: 'ada' },\n  { id: 'apl-multi', name: 'APL', category: 'Multiparadigm', extension: '.apl', monacoId: 'apl' },\n  { id: 'beta', name: 'BETA', category: 'Multiparadigm', extension: '.bet', monacoId: 'pascal' },\n  { id: 'cpp-multi', name: 'C++', category: 'Multiparadigm', extension: '.cpp', monacoId: 'cpp' },\n  { id: 'csharp-multi', name: 'C#', category: 'Multiparadigm', extension: '.cs', monacoId: 'csharp' },\n  { id: 'cobra', name: 'Cobra', category: 'Multiparadigm', extension: '.cobra', monacoId: 'python' },\n\n  // Extension Languages\n  { id: 'autolisp', name: 'AutoLISP', category: 'Extension', extension: '.lsp', monacoId: 'scheme' },\n  { id: 'beanshell-ext', name: 'BeanShell', category: 'Extension', extension: '.bsh', monacoId: 'java' },\n  { id: 'perl-ext', name: 'Perl', category: 'Extension', extension: '.pl', monacoId: 'perl' },\n  { id: 'pike', name: 'Pike', category: 'Extension', extension: '.pike', monacoId: 'c' },\n  { id: 'ruby-ext', name: 'Ruby', category: 'Extension', extension: '.rb', monacoId: 'ruby' },\n\n  // Hardware Description Languages\n  { id: 'verilog-ams', name: 'Verilog-AMS', category: 'Hardware Description', extension: '.vams', monacoId: 'verilog' },\n  { id: 'vhdl-ams-basic', name: 'VHDL-AMS (Basic)', category: 'Hardware Description', extension: '.vhams', monacoId: 'vhdl' },\n  { id: 'abel', name: 'ABEL', category: 'Hardware Description', extension: '.abl', monacoId: 'verilog' },\n  { id: 'ahdl', name: 'AHDL', category: 'Hardware Description', extension: '.tdf', monacoId: 'verilog' },\n  { id: 'bluespec', name: 'Bluespec', category: 'Hardware Description', extension: '.bsv', monacoId: 'verilog' },\n  { id: 'lava', name: 'Lava', category: 'Hardware Description', extension: '.lhs', monacoId: 'haskell' },\n  { id: 'ella', name: 'ELLA', category: 'Hardware Description', extension: '.ella', monacoId: 'ada' },\n\n  // Visual Languages\n  { id: 'analytica-visual', name: 'Analytica', category: 'Visual', extension: '.ana', monacoId: 'sql' },\n  { id: 'blockly', name: 'Blockly', category: 'Visual', extension: '.blockly', monacoId: 'javascript' },\n  { id: 'drakon', name: 'DRAKON', category: 'Visual', extension: '.drn', monacoId: 'javascript' },\n  { id: 'fabrik', name: 'Fabrik', category: 'Visual', extension: '.fab', monacoId: 'javascript' },\n  { id: 'scratch', name: 'Scratch', category: 'Visual', extension: '.sb3', monacoId: 'javascript' },\n  { id: 'simulink', name: 'Simulink', category: 'Visual', extension: '.slx', monacoId: 'matlab' },\n\n  // Educational Languages\n  { id: 'logo', name: 'Logo', category: 'Educational', extension: '.logo', monacoId: 'logo' },\n  { id: 'scratch-edu', name: 'Scratch', category: 'Educational', extension: '.sb3', monacoId: 'javascript' },\n  { id: 'alice', name: 'Alice', category: 'Educational', extension: '.a3p', monacoId: 'java' },\n  { id: 'blockly-edu', name: 'Blockly', category: 'Educational', extension: '.blockly', monacoId: 'javascript' },\n  { id: 'karel', name: 'Karel', category: 'Educational', extension: '.krl', monacoId: 'pascal' },\n\n  // Non-English Languages\n  { id: 'chinese-basic', name: 'Chinese BASIC', category: 'Non-English', extension: '.bas', monacoId: 'vb' },\n  { id: 'fjolnir', name: 'Fj√∂lnir (Icelandic)', category: 'Non-English', extension: '.fjo', monacoId: 'pascal' },\n  { id: 'lse', name: 'Language Symbolique d\\'Enseignement (French)', category: 'Non-English', extension: '.lse', monacoId: 'pascal' },\n  { id: 'lexico', name: 'Lexico (Spanish)', category: 'Non-English', extension: '.lex', monacoId: 'javascript' },\n  { id: 'rapira', name: 'Rapira (Russian)', category: 'Non-English', extension: '.rap', monacoId: 'pascal' },\n  { id: 'chascript', name: 'ChaScript (Bengali)', category: 'Non-English', extension: '.cha', monacoId: 'javascript' },\n  { id: 'ezhil', name: 'ezhil (Tamil)', category: 'Non-English', extension: '.n', monacoId: 'python' },\n\n  // Additional Web Technologies\n  { id: 'typescript', name: 'TypeScript', category: 'Web', extension: '.ts', monacoId: 'typescript' },\n  { id: 'css', name: 'CSS', category: 'Web', extension: '.css', monacoId: 'css' },\n  { id: 'scss', name: 'SCSS', category: 'Web', extension: '.scss', monacoId: 'scss' },\n  { id: 'less', name: 'Less', category: 'Web', extension: '.less', monacoId: 'less' },\n\n  // Query Languages\n  { id: 'sql', name: 'SQL', category: 'Query', extension: '.sql', monacoId: 'sql' },\n  { id: 'xpath', name: 'XPath', category: 'Query', extension: '.xpath', monacoId: 'xml' },\n  { id: 'aql', name: 'AQL', category: 'Query', extension: '.aql', monacoId: 'sql' },\n  { id: 'pql', name: 'PQL', category: 'Query', extension: '.pql', monacoId: 'sql' },\n  { id: 'xquery', name: 'XQuery', category: 'Query', extension: '.xquery', monacoId: 'xml' },\n\n  // Data Formats\n  { id: 'json', name: 'JSON', category: 'Data', extension: '.json', monacoId: 'json' },\n  { id: 'yaml', name: 'YAML', category: 'Data', extension: '.yaml', monacoId: 'yaml' },\n  { id: 'toml', name: 'TOML', category: 'Data', extension: '.toml', monacoId: 'toml' },\n\n  // üß™ Esoteric & Experimental Languages\n  { id: 'brainfuck', name: 'Brainfuck', category: 'Esoteric', extension: '.bf', monacoId: 'plaintext' },\n  { id: 'lolcode', name: 'LOLCODE', category: 'Esoteric', extension: '.lol', monacoId: 'plaintext' },\n  { id: 'whitespace', name: 'Whitespace', category: 'Esoteric', extension: '.ws', monacoId: 'plaintext' },\n  { id: 'malbolge', name: 'Malbolge', category: 'Esoteric', extension: '.mb', monacoId: 'plaintext' },\n  { id: 'befunge', name: 'Befunge', category: 'Esoteric', extension: '.bf', monacoId: 'plaintext' },\n  { id: 'intercal', name: 'INTERCAL', category: 'Esoteric', extension: '.i', monacoId: 'plaintext' },\n  { id: 'ook', name: 'Ook!', category: 'Esoteric', extension: '.ook', monacoId: 'plaintext' },\n  { id: 'piet', name: 'Piet', category: 'Esoteric', extension: '.piet', monacoId: 'plaintext' },\n\n  // üß¨ Scientific & Analytical Languages\n  { id: 'j-lang', name: 'J', category: 'Scientific', extension: '.ijs', monacoId: 'apl' },\n  { id: 'nial', name: 'Nial', category: 'Scientific', extension: '.ndf', monacoId: 'apl' },\n  { id: 'idl', name: 'IDL (Interactive Data Language)', category: 'Scientific', extension: '.pro', monacoId: 'matlab' },\n  { id: 'gams', name: 'GAMS', category: 'Scientific', extension: '.gms', monacoId: 'plaintext' },\n  { id: 'mathematica', name: 'Mathematica/Wolfram Language', category: 'Scientific', extension: '.m', monacoId: 'mathematica' },\n  { id: 'scilab', name: 'Scilab', category: 'Scientific', extension: '.sci', monacoId: 'matlab' },\n  { id: 'octave', name: 'GNU Octave', category: 'Scientific', extension: '.m', monacoId: 'matlab' },\n  { id: 'sage', name: 'SageMath', category: 'Scientific', extension: '.sage', monacoId: 'python' },\n\n  // üßô‚Äç‚ôÇÔ∏è Blockchain & Smart Contract Languages\n  { id: 'solidity', name: 'Solidity', category: 'Blockchain', extension: '.sol', monacoId: 'solidity' },\n  { id: 'vyper', name: 'Vyper', category: 'Blockchain', extension: '.vy', monacoId: 'python' },\n  { id: 'move', name: 'Move', category: 'Blockchain', extension: '.move', monacoId: 'rust' },\n  { id: 'cairo', name: 'Cairo', category: 'Blockchain', extension: '.cairo', monacoId: 'rust' },\n  { id: 'scilla', name: 'Scilla', category: 'Blockchain', extension: '.scilla', monacoId: 'haskell' },\n  { id: 'michelson', name: 'Michelson', category: 'Blockchain', extension: '.tz', monacoId: 'lisp' },\n  { id: 'clarity', name: 'Clarity', category: 'Blockchain', extension: '.clar', monacoId: 'lisp' },\n\n  // üß∞ Configuration & Build Languages\n  { id: 'makefile', name: 'Makefile', category: 'Configuration', extension: '.mk', monacoId: 'makefile' },\n  { id: 'hcl', name: 'HCL (HashiCorp Configuration Language)', category: 'Configuration', extension: '.hcl', monacoId: 'hcl' },\n  { id: 'gradle', name: 'Gradle DSL', category: 'Configuration', extension: '.gradle', monacoId: 'groovy' },\n  { id: 'cmake', name: 'CMake', category: 'Configuration', extension: '.cmake', monacoId: 'cmake' },\n  { id: 'bazel', name: 'Bazel/Starlark', category: 'Configuration', extension: '.bzl', monacoId: 'python' },\n  { id: 'nix', name: 'Nix', category: 'Configuration', extension: '.nix', monacoId: 'nix' },\n  { id: 'dockerfile', name: 'Dockerfile', category: 'Configuration', extension: '.dockerfile', monacoId: 'dockerfile' },\n  { id: 'ansible', name: 'Ansible YAML', category: 'Configuration', extension: '.yml', monacoId: 'yaml' },\n\n  // üß© Emerging or Niche Languages\n  { id: 'zig', name: 'Zig', category: 'Emerging', extension: '.zig', monacoId: 'zig' },\n  { id: 'crystal', name: 'Crystal', category: 'Emerging', extension: '.cr', monacoId: 'ruby' },\n  { id: 'bosque', name: 'Bosque', category: 'Emerging', extension: '.bsq', monacoId: 'typescript' },\n  { id: 'v-lang', name: 'V', category: 'Emerging', extension: '.v', monacoId: 'go' },\n  { id: 'odin', name: 'Odin', category: 'Emerging', extension: '.odin', monacoId: 'go' },\n  { id: 'red', name: 'Red', category: 'Emerging', extension: '.red', monacoId: 'rebol' },\n  { id: 'pony', name: 'Pony', category: 'Emerging', extension: '.pony', monacoId: 'rust' },\n  { id: 'grain', name: 'Grain', category: 'Emerging', extension: '.gr', monacoId: 'ocaml' },\n\n  // üß† Metaprogramming & Macro Languages\n  { id: 'racket', name: 'Racket', category: 'Metaprogramming', extension: '.rkt', monacoId: 'racket' },\n  { id: 'elixir', name: 'Elixir', category: 'Metaprogramming', extension: '.ex', monacoId: 'elixir' },\n  { id: 'nim-meta', name: 'Nim (Metaprogramming)', category: 'Metaprogramming', extension: '.nim', monacoId: 'nim' },\n  { id: 'hy', name: 'Hy', category: 'Metaprogramming', extension: '.hy', monacoId: 'lisp' },\n  { id: 'clojure-macros', name: 'Clojure (with macros)', category: 'Metaprogramming', extension: '.clj', monacoId: 'clojure' },\n  { id: 'template-haskell', name: 'Template Haskell', category: 'Metaprogramming', extension: '.hs', monacoId: 'haskell' },\n  { id: 'rust-macros', name: 'Rust (with macros)', category: 'Metaprogramming', extension: '.rs', monacoId: 'rust' },\n\n  // üßë‚Äçüè´ Educational & Localized Languages\n  { id: 'kalaam', name: 'Kalaam (Hindi)', category: 'Educational', extension: '.kal', monacoId: 'plaintext' },\n  { id: 'citrine', name: 'Citrine', category: 'Educational', extension: '.ctr', monacoId: 'plaintext' },\n  { id: 'hedy', name: 'Hedy', category: 'Educational', extension: '.hedy', monacoId: 'python' },\n  { id: 'kojo', name: 'Kojo', category: 'Educational', extension: '.kojo', monacoId: 'scala' },\n  { id: 'snap', name: 'Snap!', category: 'Educational', extension: '.xml', monacoId: 'xml' },\n  { id: 'turtlestitch', name: 'TurtleStitch', category: 'Educational', extension: '.xml', monacoId: 'xml' },\n  { id: 'quorum', name: 'Quorum', category: 'Educational', extension: '.quorum', monacoId: 'java' },\n  { id: 'greenfoot', name: 'Greenfoot Java', category: 'Educational', extension: '.java', monacoId: 'java' },\n\n  // üß† Esoteric & Artistic Languages\n  { id: 'piet-art', name: 'Piet (Visual Art Programming)', category: 'Artistic', extension: '.piet', monacoId: 'plaintext' },\n  { id: 'shakespeare', name: 'Shakespeare Programming Language', category: 'Artistic', extension: '.spl', monacoId: 'plaintext' },\n  { id: 'chef', name: 'Chef', category: 'Artistic', extension: '.chef', monacoId: 'plaintext' },\n  { id: 'velato', name: 'Velato', category: 'Artistic', extension: '.mid', monacoId: 'plaintext' },\n  { id: 'taxi', name: 'Taxi', category: 'Artistic', extension: '.taxi', monacoId: 'plaintext' },\n\n  // üß¨ Mathematical & Modeling Languages\n  { id: 'modelica', name: 'Modelica', category: 'Mathematical', extension: '.mo', monacoId: 'pascal' },\n  { id: 'ampl', name: 'AMPL', category: 'Mathematical', extension: '.mod', monacoId: 'plaintext' },\n  { id: 'z3-smt', name: 'Z3 SMT-LIB', category: 'Mathematical', extension: '.smt2', monacoId: 'lisp' },\n  { id: 'maple', name: 'Maple', category: 'Mathematical', extension: '.mpl', monacoId: 'mathematica' },\n  { id: 'maxima', name: 'Maxima', category: 'Mathematical', extension: '.mac', monacoId: 'lisp' },\n  { id: 'gap', name: 'GAP (Groups, Algorithms, Programming)', category: 'Mathematical', extension: '.g', monacoId: 'pascal' },\n\n  // üßô‚Äç‚ôÄÔ∏è AI & Knowledge Representation Languages\n  { id: 'cycl', name: 'CycL', category: 'AI', extension: '.cyc', monacoId: 'lisp' },\n  { id: 'atomese', name: 'OpenCog Atomese', category: 'AI', extension: '.scm', monacoId: 'scheme' },\n  { id: 'clips', name: 'CLIPS', category: 'AI', extension: '.clp', monacoId: 'lisp' },\n  { id: 'drools', name: 'Drools Rule Language', category: 'AI', extension: '.drl', monacoId: 'java' },\n  { id: 'swrl', name: 'SWRL (Semantic Web Rule Language)', category: 'AI', extension: '.swrl', monacoId: 'xml' },\n  { id: 'jess', name: 'Jess', category: 'AI', extension: '.clp', monacoId: 'lisp' },\n\n  // üß© Robotics & Embedded Systems Languages\n  { id: 'urbi', name: 'URBI', category: 'Robotics', extension: '.u', monacoId: 'cpp' },\n  { id: 'nqc', name: 'NQC (Not Quite C)', category: 'Robotics', extension: '.nqc', monacoId: 'c' },\n  { id: 'ch', name: 'Ch (C/C++ Interpreter)', category: 'Robotics', extension: '.ch', monacoId: 'c' },\n  { id: 'robocode', name: 'Robocode', category: 'Robotics', extension: '.java', monacoId: 'java' },\n  { id: 'ros-launch', name: 'ROS Launch XML', category: 'Robotics', extension: '.launch', monacoId: 'xml' },\n  { id: 'arduino', name: 'Arduino (C/C++)', category: 'Robotics', extension: '.ino', monacoId: 'cpp' },\n\n  // üßë‚Äçüé® Creative Coding & Multimedia Languages\n  { id: 'processing', name: 'Processing', category: 'Creative', extension: '.pde', monacoId: 'java' },\n  { id: 'openframeworks', name: 'openFrameworks', category: 'Creative', extension: '.cpp', monacoId: 'cpp' },\n  { id: 'pure-data', name: 'Pure Data (Pd)', category: 'Creative', extension: '.pd', monacoId: 'plaintext' },\n  { id: 'supercollider', name: 'SuperCollider', category: 'Creative', extension: '.sc', monacoId: 'javascript' },\n  { id: 'chuck', name: 'ChucK', category: 'Creative', extension: '.ck', monacoId: 'c' },\n  { id: 'p5js', name: 'p5.js', category: 'Creative', extension: '.js', monacoId: 'javascript' },\n  { id: 'cinder', name: 'Cinder', category: 'Creative', extension: '.cpp', monacoId: 'cpp' },\n\n  // üßë‚Äçüî¨ Bioinformatics & Scientific Computing Languages\n  { id: 'bioperl', name: 'BioPerl', category: 'Bioinformatics', extension: '.pl', monacoId: 'perl' },\n  { id: 'bioconductor', name: 'Bioconductor (R)', category: 'Bioinformatics', extension: '.R', monacoId: 'r' },\n  { id: 'cellml', name: 'CellML', category: 'Bioinformatics', extension: '.cellml', monacoId: 'xml' },\n  { id: 'biopython', name: 'BioPython', category: 'Bioinformatics', extension: '.py', monacoId: 'python' },\n  { id: 'biojava', name: 'BioJava', category: 'Bioinformatics', extension: '.java', monacoId: 'java' },\n  { id: 'emboss', name: 'EMBOSS', category: 'Bioinformatics', extension: '.acd', monacoId: 'plaintext' },\n  { id: 'phylip', name: 'PHYLIP', category: 'Bioinformatics', extension: '.phy', monacoId: 'plaintext' },\n\n  // üß∞ Infrastructure & DevOps DSLs\n  { id: 'starlark', name: 'Starlark (Bazel)', category: 'Infrastructure', extension: '.bzl', monacoId: 'python' },\n  { id: 'dhall', name: 'Dhall', category: 'Infrastructure', extension: '.dhall', monacoId: 'haskell' },\n  { id: 'cue-lang', name: 'CUE', category: 'Infrastructure', extension: '.cue', monacoId: 'json' },\n  { id: 'jsonnet', name: 'Jsonnet', category: 'Infrastructure', extension: '.jsonnet', monacoId: 'json' },\n  { id: 'pulumi', name: 'Pulumi (Infrastructure as Code)', category: 'Infrastructure', extension: '.ts', monacoId: 'typescript' },\n  { id: 'helm', name: 'Helm Templates', category: 'Infrastructure', extension: '.tpl', monacoId: 'yaml' },\n  { id: 'kustomize', name: 'Kustomize', category: 'Infrastructure', extension: '.yaml', monacoId: 'yaml' },\n\n  // üß¨ Constraint & Rule-Based Languages\n  { id: 'chr', name: 'CHR (Constraint Handling Rules)', category: 'Constraint', extension: '.chr', monacoId: 'prolog' },\n  { id: 'drools-advanced', name: 'Drools (Business Rules)', category: 'Constraint', extension: '.drl', monacoId: 'java' },\n  { id: 'jess-expert', name: 'Jess (Expert Systems)', category: 'Constraint', extension: '.clp', monacoId: 'lisp' },\n\n  // üß© DSL Creation & Meta-Programming Languages\n  { id: 'metaocaml', name: 'MetaOCaml', category: 'DSL-Creation', extension: '.ml', monacoId: 'ocaml' },\n  { id: 'rascal', name: 'Rascal', category: 'DSL-Creation', extension: '.rsc', monacoId: 'java' },\n  { id: 'spoofax', name: 'Spoofax', category: 'DSL-Creation', extension: '.sdf3', monacoId: 'plaintext' },\n  { id: 'xtext', name: 'Xtext', category: 'DSL-Creation', extension: '.xtext', monacoId: 'java' },\n  { id: 'jetbrains-mps', name: 'JetBrains MPS', category: 'DSL-Creation', extension: '.mps', monacoId: 'xml' },\n\n  // üßô‚Äç‚ôÇÔ∏è Quantum & Emerging Paradigms\n  { id: 'qcl', name: 'QCL (Quantum Computation Language)', category: 'Quantum', extension: '.qcl', monacoId: 'c' },\n  { id: 'projectq', name: 'ProjectQ', category: 'Quantum', extension: '.py', monacoId: 'python' },\n  { id: 'liquid', name: 'LIQUi‚ü© (Microsoft Quantum)', category: 'Quantum', extension: '.fs', monacoId: 'fsharp' },\n  { id: 'qsharp', name: 'Q#', category: 'Quantum', extension: '.qs', monacoId: 'csharp' },\n  { id: 'cirq', name: 'Cirq', category: 'Quantum', extension: '.py', monacoId: 'python' },\n\n  // üß∞ Advanced Infrastructure & Automation\n  { id: 'ansible-advanced', name: 'Ansible YAML DSL', category: 'Automation', extension: '.yml', monacoId: 'yaml' },\n  { id: 'terraform-hcl', name: 'Terraform HCL', category: 'Automation', extension: '.tf', monacoId: 'hcl' },\n  { id: 'pulumi-advanced', name: 'Pulumi (Multi-language)', category: 'Automation', extension: '.ts', monacoId: 'typescript' },\n\n  // üßë‚Äçüé® Creative & Generative Art Languages\n  { id: 'chuck-advanced', name: 'ChucK (Audio Synthesis)', category: 'Creative-Advanced', extension: '.ck', monacoId: 'c' },\n  { id: 'supercollider-advanced', name: 'SuperCollider (Algorithmic Composition)', category: 'Creative-Advanced', extension: '.sc', monacoId: 'javascript' },\n  { id: 'hydra', name: 'Hydra (Live Coding Visuals)', category: 'Creative-Advanced', extension: '.js', monacoId: 'javascript' },\n  { id: 'sonic-pi', name: 'Sonic Pi', category: 'Creative-Advanced', extension: '.rb', monacoId: 'ruby' },\n  { id: 'tidal-cycles', name: 'TidalCycles', category: 'Creative-Advanced', extension: '.tidal', monacoId: 'haskell' },\n\n  // üßë‚Äçüè´ Accessibility & Inclusive Learning Languages\n  { id: 'quorum-advanced', name: 'Quorum (Accessibility)', category: 'Accessibility', extension: '.quorum', monacoId: 'java' },\n  { id: 'hedy-advanced', name: 'Hedy (Gradual Programming)', category: 'Accessibility', extension: '.hedy', monacoId: 'python' },\n  { id: 'turtleart', name: 'TurtleArt', category: 'Accessibility', extension: '.ta', monacoId: 'xml' },\n\n  // üß† Historical & Forgotten Languages\n  { id: 'trac', name: 'TRAC (Text Processing)', category: 'Historical', extension: '.trac', monacoId: 'plaintext' },\n  { id: 'tutor', name: 'TUTOR (PLATO System)', category: 'Historical', extension: '.tutor', monacoId: 'plaintext' },\n  { id: 'joss', name: 'JOSS (Interactive Language)', category: 'Historical', extension: '.joss', monacoId: 'basic' },\n  { id: 'mad', name: 'MAD (Michigan Algorithm Decoder)', category: 'Historical', extension: '.mad', monacoId: 'fortran' },\n  { id: 'focal', name: 'FOCAL (PDP Computers)', category: 'Historical', extension: '.focal', monacoId: 'basic' },\n  { id: 'pilot', name: 'PILOT', category: 'Historical', extension: '.pilot', monacoId: 'plaintext' },\n  { id: 'snobol', name: 'SNOBOL', category: 'Historical', extension: '.sno', monacoId: 'plaintext' },\n\n  // üß¨ Simulation & Modeling Languages\n  { id: 'gpss', name: 'GPSS (General Purpose Simulation)', category: 'Simulation', extension: '.gps', monacoId: 'plaintext' },\n  { id: 'simscript', name: 'SIMSCRIPT', category: 'Simulation', extension: '.sim', monacoId: 'plaintext' },\n  { id: 'dynamo', name: 'DYNAMO (System Dynamics)', category: 'Simulation', extension: '.dyn', monacoId: 'plaintext' },\n  { id: 'stella', name: 'STELLA/iThink', category: 'Simulation', extension: '.stella', monacoId: 'plaintext' },\n  { id: 'vensim', name: 'Vensim', category: 'Simulation', extension: '.mdl', monacoId: 'plaintext' },\n\n  // üßô‚Äç‚ôÇÔ∏è Advanced Quantum & Theoretical Languages\n  { id: 'qcl-advanced', name: 'QCL (Quantum Computation Language)', category: 'Quantum-Advanced', extension: '.qcl', monacoId: 'c' },\n  { id: 'liquid-advanced', name: 'LIQUi‚ü© (Microsoft Quantum Toolkit)', category: 'Quantum-Advanced', extension: '.fs', monacoId: 'fsharp' },\n  { id: 'openqasm', name: 'OpenQASM (IBM Quantum Assembly)', category: 'Quantum-Advanced', extension: '.qasm', monacoId: 'plaintext' },\n\n  // üß∞ Advanced Infrastructure & Automation DSLs\n  { id: 'bicep', name: 'Bicep (Azure IaC)', category: 'Infrastructure-Advanced', extension: '.bicep', monacoId: 'json' },\n  { id: 'tiltfile', name: 'Tiltfile (Kubernetes Workflow)', category: 'Infrastructure-Advanced', extension: '.tilt', monacoId: 'python' },\n  { id: 'cue-advanced', name: 'CUE (Configuration with Validation)', category: 'Infrastructure-Advanced', extension: '.cue', monacoId: 'json' },\n\n  // üßë‚Äçüé® Advanced Creative & Multimedia Languages\n  { id: 'fluxus', name: 'Fluxus (Live Coding Visuals)', category: 'Creative-Multimedia', extension: '.scm', monacoId: 'scheme' },\n  { id: 'gibber', name: 'Gibber (Browser Live Coding)', category: 'Creative-Multimedia', extension: '.js', monacoId: 'javascript' },\n  { id: 'impromptu', name: 'Impromptu (Live Audio/Visual)', category: 'Creative-Multimedia', extension: '.scm', monacoId: 'scheme' },\n\n  // üß† Obsolete & Ultra-Rare Languages\n  { id: 'rexx', name: 'REXX (IBM Scripting)', category: 'Obsolete', extension: '.rexx', monacoId: 'plaintext' },\n  { id: 'egl', name: 'EGL (Enterprise Generation Language)', category: 'Obsolete', extension: '.egl', monacoId: 'plaintext' },\n  { id: 'cms2', name: 'CMS-2 (Military Systems)', category: 'Obsolete', extension: '.cms', monacoId: 'plaintext' },\n  { id: 'jovial', name: 'JOVIAL (Aerospace/Defense)', category: 'Obsolete', extension: '.jov', monacoId: 'plaintext' },\n  { id: 'natural', name: 'NATURAL (4GL Adabas)', category: 'Obsolete', extension: '.nsn', monacoId: 'plaintext' },\n\n  // üß¨ Hardware & Platform-Specific Languages\n  { id: 'opencl-c', name: 'OpenCL C (GPU Programming)', category: 'Hardware-Specific', extension: '.cl', monacoId: 'c' },\n  { id: 'shaderlab', name: 'ShaderLab (Unity Shaders)', category: 'Hardware-Specific', extension: '.shader', monacoId: 'hlsl' },\n  { id: 'vhdl-ams', name: 'VHDL-AMS (Analog/Mixed-Signal)', category: 'Hardware-Specific', extension: '.vhd', monacoId: 'vhdl' },\n  { id: 'systemverilog', name: 'SystemVerilog (Hardware Design)', category: 'Hardware-Specific', extension: '.sv', monacoId: 'verilog' },\n\n  // üß© Language Design & Transformation Languages\n  { id: 'txl', name: 'TXL (Source Transformation)', category: 'Language-Design', extension: '.txl', monacoId: 'plaintext' },\n  { id: 'asf-sdf', name: 'ASF+SDF (Algebraic Specification)', category: 'Language-Design', extension: '.asf', monacoId: 'plaintext' },\n  { id: 'stratego-xt', name: 'Stratego/XT (Program Transformation)', category: 'Language-Design', extension: '.str', monacoId: 'plaintext' },\n\n  // üßô‚Äç‚ôÄÔ∏è Security & Formal Methods Languages\n  { id: 'spark-ada', name: 'SPARK Ada (High-Integrity)', category: 'Security-Formal', extension: '.ads', monacoId: 'ada' },\n  { id: 'cryptol', name: 'Cryptol (Cryptographic Algorithms)', category: 'Security-Formal', extension: '.cry', monacoId: 'haskell' },\n  { id: 'fstar', name: 'F* (Verification-Oriented)', category: 'Security-Formal', extension: '.fst', monacoId: 'fsharp' },\n\n  // üßë‚Äçüé® Live Coding & Performance Languages\n  { id: 'impromptu-performance', name: 'Impromptu (Performance)', category: 'Live-Performance', extension: '.scm', monacoId: 'scheme' },\n  { id: 'extempore', name: 'Extempore (Real-time Multimedia)', category: 'Live-Performance', extension: '.xtm', monacoId: 'lisp' },\n  { id: 'tidal-cycles-performance', name: 'TidalCycles (Live Music)', category: 'Live-Performance', extension: '.tidal', monacoId: 'haskell' },\n\n  // üß™ Additional Emerging Languages\n  { id: 'carbon', name: 'Carbon', category: 'Emerging & Specialized', extension: '.carbon', monacoId: 'cpp' },\n  { id: 'vale', name: 'Vale', category: 'Emerging & Specialized', extension: '.vale', monacoId: 'rust' },\n\n  // üß† AI & ML-Focused Languages\n  { id: 'mojo', name: 'Mojo', category: 'AI & ML-Focused', extension: '.mojo', monacoId: 'python' },\n  { id: 'gen', name: 'Gen', category: 'AI & ML-Focused', extension: '.gen', monacoId: 'julia' },\n\n  // üß© Domain-Specific & DSLs Enhanced\n  { id: 'elm', name: 'Elm', category: 'Domain-Specific & DSLs', extension: '.elm', monacoId: 'elm' },\n  { id: 'pony-dsl', name: 'Pony', category: 'Domain-Specific & DSLs', extension: '.pony', monacoId: 'rust' },\n  { id: 'red-dsl', name: 'Red', category: 'Domain-Specific & DSLs', extension: '.red', monacoId: 'rebol' },\n\n  // üßô‚Äç‚ôÄÔ∏è Obscure but Intriguing\n  { id: 'loop-lang', name: 'LOOP', category: 'Obscure but Intriguing', extension: '.loop', monacoId: 'scheme' },\n  { id: 'frink', name: 'Frink', category: 'Obscure but Intriguing', extension: '.frink', monacoId: 'java' },\n  { id: 'rebol', name: 'Rebol', category: 'Obscure but Intriguing', extension: '.r', monacoId: 'rebol' },\n];\n\nexport const getLanguageByCategory = (category: string): ProgrammingLanguage[] => {\n  return PROGRAMMING_LANGUAGES.filter(lang => lang.category === category);\n};\n\nexport const getLanguageById = (id: string): ProgrammingLanguage | undefined => {\n  return PROGRAMMING_LANGUAGES.find(lang => lang.id === id);\n};\n\nexport const getAllCategories = (): string[] => {\n  const categories = new Set(PROGRAMMING_LANGUAGES.map(lang => lang.category));\n  return Array.from(categories).sort();\n};\n","size_bytes":36635},"client/src/lib/monaco.ts":{"content":"import * as monaco from 'monaco-editor';\n\n// Simple worker configuration that doesn't cause issues\nif (typeof self !== 'undefined') {\n  self.MonacoEnvironment = {\n    getWorker: function () {\n      // Use a simple fallback that doesn't require worker modules\n      return {\n        postMessage: () => {},\n        addEventListener: () => {},\n        removeEventListener: () => {},\n        terminate: () => {}\n      };\n    }\n  };\n}\n\n// Configure Monaco Editor themes and languages\nexport const configureMonaco = () => {\n  // Define FixGenie dark theme\n  monaco.editor.defineTheme('fixgenie-dark', {\n    base: 'vs-dark',\n    inherit: true,\n    rules: [\n      { token: 'comment', foreground: '8B949E', fontStyle: 'italic' },\n      { token: 'keyword', foreground: 'C792EA' },\n      { token: 'string', foreground: '98C379' },\n      { token: 'number', foreground: 'F78C6C' },\n      { token: 'type', foreground: '82AAFF' },\n      { token: 'function', foreground: '82AAFF' },\n      { token: 'variable', foreground: 'F07178' },\n    ],\n    colors: {\n      'editor.background': '#0D1117',\n      'editor.foreground': '#F0F6FC',\n      'editor.selectionBackground': '#2F81F730',\n      'editor.lineHighlightBackground': '#161B22',\n      'editorLineNumber.foreground': '#8B949E',\n      'editorLineNumber.activeForeground': '#F0F6FC',\n      'editor.cursor': '#2F81F7',\n      'editorError.foreground': '#F85149',\n      'editorWarning.foreground': '#E3B341',\n      'editorInfo.foreground': '#56D364',\n    },\n  });\n\n  // Set default theme\n  monaco.editor.setTheme('fixgenie-dark');\n};\n\nexport const createErrorMarkers = (errors: any[]): monaco.editor.IMarkerData[] => {\n  return errors.map(error => ({\n    startLineNumber: error.line,\n    startColumn: error.column || 1,\n    endLineNumber: error.line,\n    endColumn: error.column ? error.column + 10 : 100,\n    message: error.message,\n    severity: getSeverity(error.severity),\n    source: 'FixGenie',\n  }));\n};\n\nconst getSeverity = (severity: string): monaco.MarkerSeverity => {\n  switch (severity) {\n    case 'error':\n      return monaco.MarkerSeverity.Error;\n    case 'warning':\n      return monaco.MarkerSeverity.Warning;\n    case 'info':\n      return monaco.MarkerSeverity.Info;\n    default:\n      return monaco.MarkerSeverity.Hint;\n  }\n};\n\nexport const getLanguageConfig = (languageId: string) => {\n  const configs = {\n    javascript: {\n      comments: { lineComment: '//', blockComment: ['/*', '*/'] },\n      brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n      autoClosingPairs: [\n        { open: '(', close: ')' },\n        { open: '[', close: ']' },\n        { open: '{', close: '}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n        { open: '`', close: '`' },\n      ],\n    },\n    python: {\n      comments: { lineComment: '#' },\n      brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n      autoClosingPairs: [\n        { open: '(', close: ')' },\n        { open: '[', close: ']' },\n        { open: '{', close: '}' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" },\n      ],\n    },\n    // Add more language configurations as needed\n  };\n\n  return configs[languageId] || configs.javascript;\n};\n","size_bytes":3179},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMobile } from \"@/hooks/use-mobile\";\nimport { useVoiceCommands, type VoiceCommand } from \"@/hooks/useVoiceCommands\";\nimport Header from \"@/components/Header\";\nimport Sidebar from \"@/components/Sidebar\";\nimport CodeEditor from \"@/components/CodeEditor\";\nimport ErrorAnalysisPanel from \"@/components/ErrorAnalysisPanel\";\nimport VoicePlayer from \"@/components/VoicePlayer\";\nimport FloatingActionButton from \"@/components/FloatingActionButton\";\nimport { AIMentor } from \"@/components/AIMentor\";\nimport { AnalyticsDashboard } from \"@/components/AnalyticsDashboard\";\nimport { CollaborationHub } from \"@/components/CollaborationHub\";\nimport Footer from \"@/components/Footer\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ErrorAnalysis, MurfVoice, VoiceGeneration } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"javascript\");\n  const [selectedVoice, setSelectedVoice] = useState(\"natalie\");\n  const [speechSpeed, setSpeechSpeed] = useState(1.0);\n  const [code, setCode] = useState(\"\");\n  const [currentAnalysis, setCurrentAnalysis] = useState<ErrorAnalysis | null>(null);\n  const [currentAudioUrl, setCurrentAudioUrl] = useState<string>(\"\");\n  const [isVoicePlayerVisible, setIsVoicePlayerVisible] = useState(false);\n  const [charactersUsed] = useState(2400);\n  const [maxCharacters] = useState(50000000);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"code\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isMobile = useMobile();\n\n  // Define voice commands\n  const voiceCommands: VoiceCommand[] = [\n    {\n      command: \"analyze_code\",\n      keywords: [\"analyze\", \"analyze code\", \"check code\", \"find errors\", \"scan code\"],\n      action: () => handleAnalyzeCode(),\n      description: \"Analyze the current code for errors\"\n    },\n    {\n      command: \"explain_errors\",\n      keywords: [\"explain\", \"explain errors\", \"read errors\", \"voice explanation\", \"speak errors\"],\n      action: () => handleExplainErrors(),\n      description: \"Generate voice explanation of errors\"\n    },\n    {\n      command: \"load_sample\",\n      keywords: [\"load sample\", \"sample code\", \"example code\", \"demo code\", \"load example\"],\n      action: () => {\n        const samples = {\n          javascript: `function calculateTotal(items) {\n    let total = 0;\n    for (let i = 0; i < items.length; i++) {\n        total += items[i].price;\n    }\n    if (total > 100) {\n        total = total * 0.9 // Missing semicolon\n    }\n    return total.toFixed(2) // Should return string with currency symbol\n}`,\n          python: `def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item['price']\n    if total > 100:\n        total = total * 0.9\n    return f\"$\" + str(total)`,\n          java: `public class Calculator {\n    public static double calculateTotal(Item[] items) {\n        double total = 0;\n        for (int i = 0; i < items.length; i++) {\n            total += items[i].getPrice();\n        }\n        if (total > 100) {\n            total = total * 0.9;\n        }\n        return total // Missing semicolon\n    }\n}`\n        };\n        setCode(samples[selectedLanguage] || samples.javascript);\n      },\n      description: \"Load sample code for the current language\"\n    },\n    {\n      command: \"clear_code\",\n      keywords: [\"clear\", \"clear code\", \"delete code\", \"reset\", \"new file\"],\n      action: () => setCode(\"\"),\n      description: \"Clear the code editor\"\n    },\n    {\n      command: \"change_language_javascript\",\n      keywords: [\"javascript\", \"change to javascript\", \"switch to javascript\", \"use javascript\"],\n      action: () => setSelectedLanguage(\"javascript\"),\n      description: \"Switch to JavaScript\"\n    },\n    {\n      command: \"change_language_python\",\n      keywords: [\"python\", \"change to python\", \"switch to python\", \"use python\"],\n      action: () => setSelectedLanguage(\"python\"),\n      description: \"Switch to Python\"\n    },\n    {\n      command: \"change_language_java\",\n      keywords: [\"java\", \"change to java\", \"switch to java\", \"use java\"],\n      action: () => setSelectedLanguage(\"java\"),\n      description: \"Switch to Java\"\n    },\n    {\n      command: \"play_audio\",\n      keywords: [\"play\", \"play audio\", \"start playback\", \"listen\", \"hear explanation\"],\n      action: () => setIsVoicePlayerVisible(true),\n      description: \"Show voice player and play audio\"\n    },\n    {\n      command: \"stop_audio\",\n      keywords: [\"stop\", \"stop audio\", \"pause\", \"stop playback\", \"silence\"],\n      action: () => setIsVoicePlayerVisible(false),\n      description: \"Hide voice player and stop audio\"\n    },\n    {\n      command: \"show_help\",\n      keywords: [\"help\", \"commands\", \"what can you do\", \"voice commands\", \"assistance\"],\n      action: () => {\n        const commandsList = voiceCommands.map(cmd => `‚Ä¢ \"${cmd.keywords[0]}\" - ${cmd.description}`).join('\\n');\n        toast({\n          title: \"Available Voice Commands\",\n          description: `Here are the available voice commands:\\n\\n${commandsList}`,\n        });\n      },\n      description: \"Show available voice commands\"\n    },\n    {\n      command: \"switch_tab_code\",\n      keywords: [\"code editor\", \"show code\", \"code tab\", \"editor\"],\n      action: () => setActiveTab(\"code\"),\n      description: \"Switch to Code Editor tab\"\n    },\n    {\n      command: \"switch_tab_ai\",\n      keywords: [\"ai mentor\", \"show ai\", \"mentor tab\", \"ai assistant\"],\n      action: () => setActiveTab(\"ai\"),\n      description: \"Switch to AI Mentor tab\"\n    },\n    {\n      command: \"switch_tab_analytics\",\n      keywords: [\"analytics\", \"show analytics\", \"statistics\", \"metrics\"],\n      action: () => setActiveTab(\"analytics\"),\n      description: \"Switch to Analytics tab\"\n    },\n    {\n      command: \"switch_tab_collaborate\",\n      keywords: [\"collaborate\", \"collaboration\", \"team\", \"share\"],\n      action: () => setActiveTab(\"collaborate\"),\n      description: \"Switch to Collaboration tab\"\n    }\n  ];\n\n  // Initialize voice commands\n  const { isListening, isSupported, toggleListening } = useVoiceCommands({\n    commands: voiceCommands,\n    language: 'en-US',\n    continuous: false,\n    interimResults: true\n  });\n\n  // Fetch voices\n  const { data: voices = [] } = useQuery<MurfVoice[]>({\n    queryKey: ['/api/voices'],\n  });\n\n  // Fetch recent analyses\n  const { data: recentAnalyses = [] } = useQuery<ErrorAnalysis[]>({\n    queryKey: ['/api/recent-analyses'],\n  });\n\n  // Analyze code mutation\n  const analyzeCodeMutation = useMutation({\n    mutationFn: async (data: { code: string; language: string }) => {\n      const response = await apiRequest('POST', '/api/analyze', data);\n      return response.json();\n    },\n    onSuccess: (analysis: ErrorAnalysis) => {\n      setCurrentAnalysis(analysis);\n      queryClient.invalidateQueries({ queryKey: ['/api/recent-analyses'] });\n      toast({\n        title: \"Analysis Complete\",\n        description: `Found ${analysis.errors.length} issue${analysis.errors.length !== 1 ? 's' : ''} in your code.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate voice mutation - Fixed to send proper data structure\n  const generateVoiceMutation = useMutation({\n    mutationFn: async (data: { \n      text: string;\n      voiceId: string; \n      speed: number; \n    }) => {\n      const response = await apiRequest('POST', '/api/generate-voice', data);\n      return response.json();\n    },\n    onSuccess: (voiceGeneration: any) => {\n      console.log('Murf voice generation successful:', voiceGeneration);\n      \n      if (voiceGeneration.success && voiceGeneration.audioUrl) {\n        // Murf TTS success - set up audio player\n        setCurrentAudioUrl(voiceGeneration.audioUrl);\n        setIsVoicePlayerVisible(true);\n        toast({\n          title: \"Voice Generated\",\n          description: `Professional voice explanation ready (${voiceGeneration.provider})`,\n        });\n      } else {\n        toast({\n          title: \"Voice Generation Error\",\n          description: \"Failed to generate voice with Murf TTS\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      console.error('Voice generation error:', error);\n      toast({\n        title: \"Voice Generation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyzeCode = () => {\n    if (!code.trim()) {\n      toast({\n        title: \"No Code to Analyze\",\n        description: \"Please enter some code first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analyzeCodeMutation.mutate({\n      code: code.trim(),\n      language: selectedLanguage,\n    });\n  };\n\n  const handleExplainErrors = () => {\n    if (!currentAnalysis || currentAnalysis.errors.length === 0) {\n      toast({\n        title: \"No Errors to Explain\",\n        description: \"Please analyze your code first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create comprehensive explanation for all errors\n    const allErrorsText = currentAnalysis.errors.map((error, index) => {\n      return `Error ${index + 1}: ${error.message} on line ${error.line}. \n      ${error.suggestion || ''} \n      ${error.fix ? `Fix: ${error.fix}` : ''}`;\n    }).join('\\n\\n');\n    \n    const explanationText = `\n      Code analysis complete. Found ${currentAnalysis.errors.length} ${currentAnalysis.errors.length === 1 ? 'issue' : 'issues'} in your ${currentAnalysis.language} code.\n      \n      ${allErrorsText}\n      \n      Please review these issues and apply the suggested fixes to improve your code quality.\n    `.trim();\n\n    console.log('Explaining all errors:', explanationText);\n\n    generateVoiceMutation.mutate({\n      text: explanationText,\n      voiceId: selectedVoice,\n      speed: speechSpeed,\n    });\n  };\n\n  const handleGenerateVoice = (errorIndex: number) => {\n    if (!currentAnalysis || !currentAnalysis.errors[errorIndex]) return;\n\n    const error = currentAnalysis.errors[errorIndex];\n    \n    // Create comprehensive error explanation text\n    const explanationText = `\n      Error found on line ${error.line}: ${error.message}\n      \n      Error type: ${error.type}\n      Severity: ${error.severity}\n      \n      ${error.suggestion ? `Suggestion: ${error.suggestion}` : ''}\n      \n      ${error.fix ? `Recommended fix: ${error.fix}` : ''}\n      \n      This error occurs because the code violates ${error.type} rules. \n      ${error.severity === 'error' ? 'This must be fixed for the code to run properly.' : \n        error.severity === 'warning' ? 'This should be addressed to improve code quality.' : \n        'This is informational and can help improve your code.'}\n    `.trim();\n\n    console.log('Generating voice for error:', error);\n    console.log('Explanation text:', explanationText);\n\n    generateVoiceMutation.mutate({\n      text: explanationText,\n      voiceId: selectedVoice,\n      speed: speechSpeed,\n    });\n  };\n\n  const handleApplyFix = (errorIndex: number) => {\n    if (!currentAnalysis || !currentAnalysis.errors[errorIndex]?.fix) return;\n\n    const error = currentAnalysis.errors[errorIndex];\n    const lines = code.split('\\n');\n    \n    if (error.line <= lines.length) {\n      lines[error.line - 1] = error.fix;\n      setCode(lines.join('\\n'));\n      \n      toast({\n        title: \"Fix Applied\",\n        description: `Applied fix for line ${error.line}.`,\n      });\n    }\n  };\n\n  const handleAnalysisSelect = (analysis: ErrorAnalysis) => {\n    setCurrentAnalysis(analysis);\n    setCode(analysis.code);\n    setSelectedLanguage(analysis.language);\n  };\n\n  const handleVoiceCommand = () => {\n    toggleListening();\n  };\n\n  const handleHelp = () => {\n    toast({\n      title: \"Help & Documentation\",\n      description: \"Opening help documentation...\",\n    });\n  };\n\n  // Auto-analyze when code changes (debounced)\n  useEffect(() => {\n    if (!code.trim()) {\n      setCurrentAnalysis(null);\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      handleAnalyzeCode();\n    }, 2000);\n\n    return () => clearTimeout(timeoutId);\n  }, [code, selectedLanguage]);\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header \n        charactersUsed={charactersUsed} \n        maxCharacters={maxCharacters}\n        onMenuToggle={toggleSidebar}\n        isMenuOpen={isSidebarOpen}\n      />\n      \n      <div className=\"flex h-[calc(100vh-64px)] relative\">\n        {/* Mobile Sidebar Overlay - Only show on actual mobile devices */}\n        {isMobile && isSidebarOpen && (\n          <div \n            className=\"sidebar-mobile-overlay lg:hidden\"\n            onClick={closeSidebar}\n          />\n        )}\n\n        {/* Sidebar - Always visible on desktop, mobile overlay when open */}\n        <div className={`\n          ${isMobile \n            ? `sidebar-mobile ${isSidebarOpen ? 'open' : ''}`\n            : 'sidebar-desktop block'\n          }\n        `}>\n          <Sidebar\n            selectedLanguage={selectedLanguage}\n            onLanguageChange={setSelectedLanguage}\n            selectedVoice={selectedVoice}\n            onVoiceChange={setSelectedVoice}\n            speechSpeed={speechSpeed}\n            onSpeedChange={setSpeechSpeed}\n            voices={voices}\n            recentAnalyses={recentAnalyses}\n            onAnalysisSelect={handleAnalysisSelect}\n          />\n        </div>\n        \n        {/* Main Content with Advanced Features */}\n        <div className={`\n          flex-1 flex flex-col\n          ${isMobile && isSidebarOpen ? 'pointer-events-none' : ''}\n        `}>\n          {/* Tab Navigation */}\n          <div className=\"border-b border-border bg-elevated glass-card tab-navigation\">\n            <div className=\"tab-container flex space-x-1 p-3 lg:space-x-2\">\n              {[\n                { id: \"code\", label: \"Code Editor\", icon: \"üíª\", shortLabel: \"Code\" },\n                { id: \"mentor\", label: \"AI Mentor\", icon: \"üß†\", shortLabel: \"Mentor\" },\n                { id: \"analytics\", label: \"Analytics\", icon: \"üìä\", shortLabel: \"Analytics\" },\n                { id: \"collaborate\", label: \"Collaborate\", icon: \"üë•\", shortLabel: \"Collab\" }\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`\n                    tab-button px-3 py-2 md:px-6 md:py-3 rounded-xl text-sm font-medium transition-all duration-300 relative overflow-hidden\n                    ${activeTab === tab.id \n                      ? 'bg-gradient-primary text-white shadow-glow transform scale-105' \n                      : 'text-secondary hover:text-primary glass hover:shadow-glow/50'\n                    }\n                  `}\n                >\n                  <span className=\"mr-1 md:mr-2 text-sm md:text-base\">{tab.icon}</span>\n                  <span className=\"font-semibold hidden sm:inline\">{tab.label}</span>\n                  <span className=\"font-semibold sm:hidden\">{tab.shortLabel}</span>\n                  {activeTab === tab.id && (\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent animate-pulse\" />\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"flex-1 min-h-0 main-content\">\n            {activeTab === \"code\" && (\n              <div className={`\n                h-full flex editor-container\n                ${isMobile ? 'flex-col' : 'flex-row'}\n              `}>\n                <div className=\"flex-1 min-h-0 code-editor-wrapper\">\n                  <CodeEditor\n                    language={selectedLanguage}\n                    code={code}\n                    onCodeChange={setCode}\n                    errors={currentAnalysis?.errors || []}\n                    onAnalyze={handleAnalyzeCode}\n                    onExplainErrors={handleExplainErrors}\n                    isAnalyzing={analyzeCodeMutation.isPending}\n                  />\n                </div>\n                \n                <div className={`\n                  ${isMobile \n                    ? 'error-panel-mobile border-t' \n                    : 'flex flex-col w-96 lg:w-[28rem] xl:w-96 border-l'\n                  } \n                  border-border bg-elevated glass-card error-analysis-panel\n                `}>\n                  <ErrorAnalysisPanel\n                    errors={currentAnalysis?.errors || []}\n                    onGenerateVoice={handleGenerateVoice}\n                    onApplyFix={handleApplyFix}\n                    isGeneratingVoice={generateVoiceMutation.isPending}\n                  />\n                  \n                  <VoicePlayer\n                    audioUrl={currentAudioUrl}\n                    title=\"Error Explanation\"\n                    isVisible={isVoicePlayerVisible}\n                  />\n                </div>\n              </div>\n            )}\n\n            {activeTab === \"mentor\" && (\n              <div className=\"h-full p-3 md:p-6 overflow-auto bg-background tab-content\">\n                <AIMentor\n                  code={code}\n                  language={selectedLanguage}\n                  onCodeSuggestion={(suggestion) => {\n                    if (suggestion.suggestedCode) {\n                      setCode(suggestion.suggestedCode);\n                    }\n                  }}\n                />\n              </div>\n            )}\n\n            {activeTab === \"analytics\" && (\n              <div className=\"h-full p-3 md:p-6 overflow-auto bg-background tab-content\">\n                <AnalyticsDashboard userId={1} />\n              </div>\n            )}\n\n            {activeTab === \"collaborate\" && (\n              <div className=\"h-full p-3 md:p-6 overflow-auto bg-background tab-content\">\n                <CollaborationHub\n                  onJoinSession={(sessionId) => {\n                    toast({\n                      title: \"Joined Collaboration Session\",\n                      description: `Connected to session: ${sessionId}`,\n                    });\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <FloatingActionButton\n        onVoiceCommand={handleVoiceCommand}\n        onHelp={handleHelp}\n        onQuickAnalyze={handleAnalyzeCode}\n        onToggleVoice={() => setIsVoicePlayerVisible(!isVoicePlayerVisible)}\n        isAnalyzing={analyzeCodeMutation.isPending}\n        hasAudio={!!currentAudioUrl}\n        isListening={isListening}\n        isVoiceSupported={isSupported}\n      />\n      \n      {/* Footer with FixGenie Branding */}\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19129},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Footer.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Code, Heart, Zap, Shield, Users, Target } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"w-full bg-elevated border-t border-border glass-card mt-8\">\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Main Footer Content */}\n        <div className=\"flex flex-col lg:flex-row items-center justify-between gap-6\">\n          {/* FixGenie Branding */}\n          <div className=\"flex flex-col items-center lg:items-start gap-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-primary rounded-xl flex items-center justify-center shadow-glow\">\n                <Code className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-2xl font-bold text-white\">\n                  FixGenie\n                </h3>\n                <Badge variant=\"secondary\" className=\"bg-gradient-primary text-white text-xs shadow-glow\">\n                  Revolutionary AI Platform\n                </Badge>\n              </div>\n            </div>\n            <p className=\"text-sm text-white/80 text-center lg:text-left max-w-md\">\n              The world's most advanced AI-powered code analysis platform with intelligent error detection, \n              high-quality TTS explanations, and comprehensive debugging across 320+ programming languages.\n            </p>\n          </div>\n\n          {/* Feature Highlights */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Target className=\"h-4 w-4 text-accent-cyan\" />\n              <span className=\"text-xs text-white/90\">AI Mentorship</span>\n            </div>\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Zap className=\"h-4 w-4 text-accent-orange\" />\n              <span className=\"text-xs text-white/90\">Code Optimization</span>\n            </div>\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Shield className=\"h-4 w-4 text-accent-blue\" />\n              <span className=\"text-xs text-white/90\">Security Audit</span>\n            </div>\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Users className=\"h-4 w-4 text-accent-green\" />\n              <span className=\"text-xs text-white/90\">Collaboration</span>\n            </div>\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Code className=\"h-4 w-4 text-accent-purple\" />\n              <span className=\"text-xs text-white/90\">320+ Languages</span>\n            </div>\n            <div className=\"flex items-center gap-2 glass rounded-lg p-3\">\n              <Heart className=\"h-4 w-4 text-accent-pink\" />\n              <span className=\"text-xs text-white/90\">Built with AI</span>\n            </div>\n          </div>\n        </div>\n\n        <Separator className=\"my-6\" />\n\n        {/* Bottom Footer */}\n        <div className=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-4 text-sm text-white/70\">\n            <span>¬© 2025 FixGenie. All rights reserved.</span>\n            <span>‚Ä¢</span>\n            <span>Powered by GPT-4o & Murf AI</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs border-accent-green/30 text-accent-green\">\n              Version 2.0\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs border-accent-blue/30 text-accent-blue\">\n              Next-Gen AI\n            </Badge>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":3851},"server/services/universalErrorAnalyzer.ts":{"content":"// ========== UNIVERSAL CODE ERROR ANALYZER ==========\n// Comprehensive error detection and analysis for 150+ programming languages\n\nimport { intelligentBackend } from \"./intelligentBackend\";\nimport { logicalErrorAnalyzer } from \"./logicalErrorAnalyzer\";\n\nexport interface CodeError {\n  type: string;\n  severity: 'error' | 'warning' | 'info';\n  message: string;\n  line: number;\n  column: number;\n  suggestion: string;\n  category: 'syntax' | 'logical' | 'runtime' | 'style' | 'security';\n}\n\nexport interface ErrorAnalysisResult {\n  language: string;\n  code: string;\n  errors: CodeError[];\n  suggestions: string[];\n  explanation: string;\n  fixedCode?: string;\n}\n\nexport class UniversalErrorAnalyzer {\n  \n  // ========== MAIN ANALYSIS METHOD ==========\n  async analyzeCode(code: string, language: string): Promise<ErrorAnalysisResult> {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    let explanation = \"\";\n    let fixedCode = code;\n\n    // Get language-specific analysis\n    const languageAnalysis = this.getLanguageSpecificAnalysis(code, language);\n\n    // ========== NEW: ADVANCED LOGICAL ERROR DETECTION ==========\n    try {\n      // 1. AI-powered logical error analysis\n      const aiLogicalAnalysis = await logicalErrorAnalyzer.analyzeLogicalErrors(code, language);\n      errors.push(...aiLogicalAnalysis.errors);\n      suggestions.push(...aiLogicalAnalysis.suggestions);\n      \n      // 2. Pattern-based logical error detection\n      const patternLogicalErrors = logicalErrorAnalyzer.detectCommonLogicalErrors(code, language);\n      errors.push(...patternLogicalErrors);\n\n      // Enhance explanation with logical error focus\n      if (aiLogicalAnalysis.explanation) {\n        explanation = aiLogicalAnalysis.explanation;\n      }\n      \n      // Use AI-fixed code if available\n      if (aiLogicalAnalysis.fixedCode && aiLogicalAnalysis.errors.length > 0) {\n        fixedCode = aiLogicalAnalysis.fixedCode;\n      }\n    } catch (error) {\n      console.log('AI analysis failed, using pattern-based analysis fallback:', error.message);\n      \n      // Fallback: Use pattern-based detection only\n      try {\n        const patternLogicalErrors = logicalErrorAnalyzer.detectCommonLogicalErrors(code, language);\n        errors.push(...patternLogicalErrors);\n        \n        // Generate fallback explanation based on detected patterns\n        if (patternLogicalErrors.length > 0) {\n          explanation = `Code analysis completed using pattern detection. Found ${patternLogicalErrors.length} potential issues that need attention.`;\n        }\n      } catch (patternError) {\n        console.log('Pattern analysis also failed, continuing with basic analysis:', patternError.message);\n      }\n    }\n    errors.push(...languageAnalysis.errors);\n    suggestions.push(...languageAnalysis.suggestions);\n    \n    // Apply universal code analysis patterns\n    const universalAnalysis = this.performUniversalAnalysis(code);\n    errors.push(...universalAnalysis.errors);\n    suggestions.push(...universalAnalysis.suggestions);\n\n    // Generate comprehensive explanation (only if we don't already have one from AI analysis)\n    if (!explanation) {\n      explanation = this.generateExplanation(errors, language);\n    }\n    \n    // Attempt to fix common errors\n    fixedCode = this.generateFixedCode(code, errors, language);\n\n    return {\n      language,\n      code,\n      errors: errors.slice(0, 10), // Limit to top 10 most critical errors\n      suggestions: [...new Set(suggestions)], // Remove duplicates\n      explanation,\n      fixedCode: fixedCode !== code ? fixedCode : undefined\n    };\n  }\n\n  // ========== LANGUAGE-SPECIFIC ANALYSIS ==========\n  private getLanguageSpecificAnalysis(code: string, language: string) {\n    const lang = language.toLowerCase();\n    \n    // Main supported languages with dedicated analyzers\n    switch (lang) {\n      // Web Technologies\n      case 'javascript':\n      case 'javascript-client':\n      case 'javascript-func':\n        return this.analyzeJavaScript(code);\n      case 'typescript':\n        return this.analyzeTypeScript(code);\n      case 'html':\n      case 'xhtml':\n        return this.analyzeHTML(code);\n      case 'css':\n      case 'scss':\n      case 'less':\n        return this.analyzeCSS(code);\n      case 'php':\n      case 'php-func':\n      case 'php-server':\n        return this.analyzePHP(code);\n      \n      // Compiled Languages\n      case 'c':\n        return this.analyzeC(code);\n      case 'cpp':\n      case 'c++':\n      case 'cpp-func':\n      case 'cpp-oop':\n      case 'cpp-multi':\n        return this.analyzeCpp(code);\n      case 'csharp':\n      case 'c#':\n      case 'csharp-func':\n      case 'csharp-oop':\n      case 'csharp-multi':\n        return this.analyzeCSharp(code);\n      case 'java':\n      case 'java-oop':\n      case 'java-concurrent':\n        return this.analyzeJava(code);\n      case 'go':\n      case 'go-concurrent':\n        return this.analyzeGo(code);\n      case 'rust':\n        return this.analyzeRust(code);\n      case 'swift':\n        return this.analyzeSwift(code);\n      \n      // Interpreted Languages\n      case 'python':\n      case 'python-func':\n      case 'python-oop':\n        return this.analyzePython(code);\n      case 'ruby':\n      case 'ruby-oop':\n      case 'ruby-ext':\n        return this.analyzeRuby(code);\n      case 'perl':\n      case 'perl-ext':\n        return this.analyzePerl(code);\n      case 'lua':\n        return this.analyzeLua(code);\n      case 'r':\n        return this.analyzeR(code);\n      \n      // Functional Languages\n      case 'haskell':\n        return this.analyzeHaskell(code);\n      case 'scala':\n      case 'scala-concurrent':\n        return this.analyzeScala(code);\n      case 'clojure':\n      case 'clojure-concurrent':\n        return this.analyzeClojure(code);\n      case 'lisp':\n      case 'lisp-func':\n        return this.analyzeLisp(code);\n      \n      // Scripting Languages\n      case 'bash':\n        return this.analyzeBash(code);\n      case 'powershell':\n        return this.analyzePowerShell(code);\n      case 'vbscript':\n      case 'vbscript-server':\n      case 'vbscript-client':\n        return this.analyzeVBScript(code);\n      \n      // Markup and Data Languages\n      case 'xml':\n      case 'sgml':\n        return this.analyzeXML(code);\n      case 'json':\n        return this.analyzeJSON(code);\n      case 'yaml':\n        return this.analyzeYAML(code);\n      case 'sql':\n        return this.analyzeSQL(code);\n      \n      // System Languages\n      case 'ada':\n      case 'ada-multi':\n        return this.analyzeAda(code);\n      case 'nim':\n        return this.analyzeNim(code);\n      case 'fortran':\n        return this.analyzeFortran(code);\n      \n      // Assembly and Machine Languages\n      case 'arm':\n      case 'x86':\n      case 'mips':\n      case 'sparc':\n        return this.analyzeAssembly(code, lang);\n      \n      // Educational and Visual Languages\n      case 'scratch':\n      case 'scratch-edu':\n        return this.analyzeScratch(code);\n      case 'logo':\n        return this.analyzeLogo(code);\n      \n      // Hardware Description Languages\n      case 'verilog-ams':\n      case 'vhdl-ams':\n      case 'abel':\n      case 'ahdl':\n        return this.analyzeHDL(code, lang);\n      \n      // Logic Programming\n      case 'prolog':\n        return this.analyzeProlog(code);\n      \n      // Legacy and Non-English Languages\n      case 'cobol':\n        return this.analyzeCOBOL(code);\n      case 'algol':\n        return this.analyzeALGOL(code);\n      case 'pascal':\n        return this.analyzePascal(code);\n      case 'basic':\n      case 'visualbasic':\n      case 'vbnet':\n      case 'chinese-basic':\n        return this.analyzeBasic(code);\n      \n      // Concurrent and Parallel Languages\n      case 'julia':\n        return this.analyzeJulia(code);\n      \n      // Domain-Specific Languages\n      case 'matlab':\n      case 'simulink':\n        return this.analyzeMATLAB(code);\n      \n      // Esoteric & Experimental Languages\n      case 'brainfuck': return this.analyzeBrainfuck(code);\n      case 'lolcode': return this.analyzeLOLCODE(code);\n      case 'whitespace': return this.analyzeWhitespace(code);\n      case 'malbolge': return this.analyzeMalbolge(code);\n      case 'befunge': return this.analyzeBefunge(code);\n      case 'intercal': return this.analyzeINTERCAL(code);\n      case 'ook': return this.analyzeOok(code);\n      case 'piet': return this.analyzePiet(code);\n      \n      // Scientific & Analytical Languages\n      case 'j-lang': return this.analyzeJ(code);\n      case 'nial': return this.analyzeNial(code);\n      case 'idl': return this.analyzeIDL(code);\n      case 'gams': return this.analyzeGAMS(code);\n      case 'mathematica': return this.analyzeMathematica(code);\n      case 'scilab': return this.analyzeScilab(code);\n      case 'octave': return this.analyzeOctave(code);\n      case 'sage': return this.analyzeSage(code);\n      \n      // Blockchain & Smart Contract Languages\n      case 'solidity': return this.analyzeSolidity(code);\n      case 'vyper': return this.analyzeVyper(code);\n      case 'move': return this.analyzeMove(code);\n      case 'cairo': return this.analyzeCairo(code);\n      case 'scilla': return this.analyzeScilla(code);\n      case 'michelson': return this.analyzeMichelson(code);\n      case 'clarity': return this.analyzeClarity(code);\n      \n      // Configuration & Build Languages\n      case 'makefile': return this.analyzeMakefile(code);\n      case 'hcl': return this.analyzeHCL(code);\n      case 'gradle': return this.analyzeGradle(code);\n      case 'cmake': return this.analyzeCMake(code);\n      case 'bazel': return this.analyzeBazel(code);\n      case 'nix': return this.analyzeNix(code);\n      case 'dockerfile': return this.analyzeDockerfile(code);\n      case 'ansible': return this.analyzeAnsible(code);\n      \n      // Emerging or Niche Languages\n      case 'zig': return this.analyzeZig(code);\n      case 'crystal': return this.analyzeCrystal(code);\n      case 'bosque': return this.analyzeBosque(code);\n      case 'v-lang': return this.analyzeV(code);\n      case 'odin': return this.analyzeOdin(code);\n      case 'red': return this.analyzeRed(code);\n      case 'pony': return this.analyzePony(code);\n      case 'grain': return this.analyzeGrain(code);\n      \n      // Metaprogramming & Macro Languages\n      case 'racket': return this.analyzeRacket(code);\n      case 'elixir': return this.analyzeElixir(code);\n      case 'nim': \n      case 'nim-meta': return this.analyzeNim(code);\n      case 'hy': return this.analyzeHy(code);\n      case 'clojure-macros': return this.analyzeClojureMacros(code);\n      case 'template-haskell': return this.analyzeTemplateHaskell(code);\n      case 'rust-macros': return this.analyzeRustMacros(code);\n      \n      // Educational & Localized Languages\n      case 'kalaam': return this.analyzeKalaam(code);\n      case 'citrine': return this.analyzeCitrine(code);\n      case 'hedy': return this.analyzeHedy(code);\n      case 'kojo': return this.analyzeKojo(code);\n      case 'snap': return this.analyzeSnap(code);\n      case 'turtlestitch': return this.analyzeTurtleStitch(code);\n      case 'quorum': return this.analyzeQuorum(code);\n      case 'greenfoot': return this.analyzeGreenfoot(code);\n      \n      // Esoteric & Artistic Languages\n      case 'piet-art': return this.analyzePietArt(code);\n      case 'shakespeare': return this.analyzeShakespeare(code);\n      case 'chef': return this.analyzeChef(code);\n      case 'velato': return this.analyzeVelato(code);\n      case 'taxi': return this.analyzeTaxi(code);\n      \n      // Mathematical & Modeling Languages\n      case 'modelica': return this.analyzeModelica(code);\n      case 'ampl': return this.analyzeAMPL(code);\n      case 'z3-smt': return this.analyzeZ3SMT(code);\n      case 'maple': return this.analyzeMaple(code);\n      case 'maxima': return this.analyzeMaxima(code);\n      case 'gap': return this.analyzeGAP(code);\n      \n      // AI & Knowledge Representation Languages\n      case 'cycl': return this.analyzeCycL(code);\n      case 'atomese': return this.analyzeAtomese(code);\n      case 'clips': return this.analyzeCLIPS(code);\n      case 'drools': return this.analyzeDrools(code);\n      case 'swrl': return this.analyzeSWRL(code);\n      case 'jess': return this.analyzeJess(code);\n      \n      // Robotics & Embedded Systems Languages\n      case 'urbi': return this.analyzeURBI(code);\n      case 'nqc': return this.analyzeNQC(code);\n      case 'ch': return this.analyzeCh(code);\n      case 'robocode': return this.analyzeRobocode(code);\n      case 'ros-launch': return this.analyzeROSLaunch(code);\n      case 'arduino': return this.analyzeArduino(code);\n      \n      // Creative Coding & Multimedia Languages\n      case 'processing': return this.analyzeProcessing(code);\n      case 'openframeworks': return this.analyzeOpenFrameworks(code);\n      case 'pure-data': return this.analyzePureData(code);\n      case 'supercollider': return this.analyzeSuperCollider(code);\n      case 'chuck': return this.analyzeChucK(code);\n      case 'p5js': return this.analyzeP5js(code);\n      case 'cinder': return this.analyzeCinder(code);\n      \n      // Bioinformatics & Scientific Computing Languages\n      case 'bioperl': return this.analyzeBioPerl(code);\n      case 'bioconductor': return this.analyzeBioconductor(code);\n      case 'cellml': return this.analyzeCellML(code);\n      case 'biopython': return this.analyzeBioPython(code);\n      case 'biojava': return this.analyzeBioJava(code);\n      case 'emboss': return this.analyzeEMBOSS(code);\n      case 'phylip': return this.analyzePHYLIP(code);\n      \n      // Infrastructure & DevOps DSLs\n      case 'starlark': return this.analyzeStarlark(code);\n      case 'dhall': return this.analyzeDhall(code);\n      case 'cue-lang': return this.analyzeCUE(code);\n      case 'jsonnet': return this.analyzeJsonnet(code);\n      case 'pulumi': return this.analyzePulumi(code);\n      case 'helm': return this.analyzeHelm(code);\n      case 'kustomize': return this.analyzeKustomize(code);\n      \n      // Constraint & Rule-Based Languages\n      case 'chr': return this.analyzeCHR(code);\n      case 'drools-advanced': return this.analyzeDroolsAdvanced(code);\n      case 'jess-expert': return this.analyzeJessExpert(code);\n      \n      // DSL Creation & Meta-Programming Languages\n      case 'metaocaml': return this.analyzeMetaOCaml(code);\n      case 'rascal': return this.analyzeRascal(code);\n      case 'spoofax': return this.analyzeSpoofax(code);\n      case 'xtext': return this.analyzeXtext(code);\n      case 'jetbrains-mps': return this.analyzeJetBrainsMPS(code);\n      \n      // Quantum & Emerging Paradigms\n      case 'qcl': return this.analyzeQCL(code);\n      case 'projectq': return this.analyzeProjectQ(code);\n      case 'liquid': return this.analyzeLIQUi(code);\n      case 'qsharp': return this.analyzeQSharp(code);\n      case 'cirq': return this.analyzeCirq(code);\n      \n      // Advanced Infrastructure & Automation\n      case 'ansible-advanced': return this.analyzeAnsibleAdvanced(code);\n      case 'terraform-hcl': return this.analyzeTerraformHCL(code);\n      case 'pulumi-advanced': return this.analyzePulumiAdvanced(code);\n      \n      // Creative & Generative Art Languages\n      case 'chuck-advanced': return this.analyzeChucKAdvanced(code);\n      case 'supercollider-advanced': return this.analyzeSuperColliderAdvanced(code);\n      case 'hydra': return this.analyzeHydra(code);\n      case 'sonic-pi': return this.analyzeSonicPi(code);\n      case 'tidal-cycles': return this.analyzeTidalCycles(code);\n      \n      // Accessibility & Inclusive Learning Languages\n      case 'quorum-advanced': return this.analyzeQuorumAdvanced(code);\n      case 'hedy-advanced': return this.analyzeHedyAdvanced(code);\n      case 'turtleart': return this.analyzeTurtleArt(code);\n      \n      // Historical & Forgotten Languages\n      case 'trac': return this.analyzeTRAC(code);\n      case 'tutor': return this.analyzeTUTOR(code);\n      case 'joss': return this.analyzeJOSS(code);\n      case 'mad': return this.analyzeMAD(code);\n      case 'focal': return this.analyzeFOCAL(code);\n      case 'pilot': return this.analyzePILOT(code);\n      case 'snobol': return this.analyzeSNOBOL(code);\n      \n      // Simulation & Modeling Languages\n      case 'gpss': return this.analyzeGPSS(code);\n      case 'simscript': return this.analyzeSIMSCRIPT(code);\n      case 'dynamo': return this.analyzeDYNAMO(code);\n      case 'stella': return this.analyzeSTELLA(code);\n      case 'vensim': return this.analyzeVensim(code);\n      \n      // Advanced Quantum & Theoretical Languages\n      case 'qcl-advanced': return this.analyzeQCLAdvanced(code);\n      case 'liquid-advanced': return this.analyzeLIQUiAdvanced(code);\n      case 'openqasm': return this.analyzeOpenQASM(code);\n      \n      // Advanced Infrastructure & Automation DSLs\n      case 'bicep': return this.analyzeBicep(code);\n      case 'tiltfile': return this.analyzeTiltfile(code);\n      case 'cue-advanced': return this.analyzeCUEAdvanced(code);\n      \n      // Advanced Creative & Multimedia Languages\n      case 'fluxus': return this.analyzeFluxus(code);\n      case 'gibber': return this.analyzeGibber(code);\n      case 'impromptu': return this.analyzeImpromptu(code);\n      \n      // Obsolete & Ultra-Rare Languages\n      case 'rexx': return this.analyzeREXX(code);\n      case 'egl': return this.analyzeEGL(code);\n      case 'cms2': return this.analyzeCMS2(code);\n      case 'jovial': return this.analyzeJOVIAL(code);\n      case 'natural': return this.analyzeNATURAL(code);\n      \n      // Hardware & Platform-Specific Languages\n      case 'opencl-c': return this.analyzeOpenCLC(code);\n      case 'shaderlab': return this.analyzeShaderLab(code);\n      case 'vhdl-ams': \n      case 'vhdl-ams-basic': return this.analyzeVHDLAMS(code);\n      case 'systemverilog': return this.analyzeSystemVerilog(code);\n      \n      // Language Design & Transformation Languages\n      case 'txl': return this.analyzeTXL(code);\n      case 'asf-sdf': return this.analyzeASFSDF(code);\n      case 'stratego-xt': return this.analyzeStrategoXT(code);\n      \n      // Security & Formal Methods Languages\n      case 'spark-ada': return this.analyzeSPARKAda(code);\n      case 'cryptol': return this.analyzeCryptol(code);\n      case 'fstar': return this.analyzeFStar(code);\n      \n      // Live Coding & Performance Languages\n      case 'impromptu-performance': return this.analyzeImpromptuPerformance(code);\n      case 'extempore': return this.analyzeExtempore(code);\n      case 'tidal-cycles-performance': return this.analyzeTidalCyclesPerformance(code);\n\n      // üß™ Emerging & Specialized Languages\n      case 'bosque': return this.analyzeBosque(code);\n      case 'zig': return this.analyzeZig(code);\n      case 'v-lang': return this.analyzeV(code);\n      case 'carbon': return this.analyzeCarbon(code);\n      case 'vale': return this.analyzeVale(code);\n\n      // üß† AI & ML-Focused Languages\n      case 'mojo': return this.analyzeMojo(code);\n      case 'gen': return this.analyzeGen(code);\n\n      // üß¨ Scientific & Mathematical Enhanced\n      case 'j-lang': return this.analyzeJ(code);\n\n      // üß© Domain-Specific & DSLs Enhanced\n      case 'elm': return this.analyzeElm(code);\n      case 'pony-dsl': return this.analyzePony(code);\n      case 'red-dsl': return this.analyzeRed(code);\n\n      // üßô‚Äç‚ôÄÔ∏è Obscure but Intriguing\n      case 'loop-lang': return this.analyzeLoop(code);\n      case 'frink': return this.analyzeFrink(code);\n      case 'rebol': return this.analyzeRebol(code);\n      \n      default:\n        return this.analyzeGeneric(code, language);\n    }\n  }\n\n  // ========== JAVASCRIPT/TYPESCRIPT ANALYSIS ==========\n  private analyzeJavaScript(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    // Missing semicolons\n    const lines = code.split('\\n');\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (trimmed && \n          !trimmed.endsWith(';') && \n          !trimmed.endsWith('{') && \n          !trimmed.endsWith('}') &&\n          !trimmed.startsWith('//') &&\n          !trimmed.startsWith('/*') &&\n          !trimmed.includes('if ') &&\n          !trimmed.includes('for ') &&\n          !trimmed.includes('while ') &&\n          !trimmed.includes('function ') &&\n          trimmed.length > 5) {\n        errors.push({\n          type: 'Missing Semicolon',\n          severity: 'warning',\n          message: 'Missing semicolon at end of statement',\n          line: index + 1,\n          column: line.length,\n          suggestion: 'Add semicolon at the end of this line',\n          category: 'syntax'\n        });\n      }\n    });\n\n    // Undefined variables (simple detection)\n    if (code.includes('console.log(') && !code.includes('console')) {\n      errors.push({\n        type: 'Undefined Variable',\n        severity: 'error',\n        message: 'console is not defined',\n        line: 1,\n        column: 1,\n        suggestion: 'Make sure to run this in a browser or Node.js environment',\n        category: 'runtime'\n      });\n    }\n\n    // Using var instead of let/const\n    if (code.includes('var ')) {\n      errors.push({\n        type: 'Deprecated Variable Declaration',\n        severity: 'warning',\n        message: 'Use let or const instead of var',\n        line: 1,\n        column: 1,\n        suggestion: 'Replace var with let for mutable variables or const for constants',\n        category: 'style'\n      });\n    }\n\n    // Missing brackets\n    const openBrackets = (code.match(/\\{/g) || []).length;\n    const closeBrackets = (code.match(/\\}/g) || []).length;\n    if (openBrackets !== closeBrackets) {\n      errors.push({\n        type: 'Mismatched Brackets',\n        severity: 'error',\n        message: `Mismatched curly brackets: ${openBrackets} opening, ${closeBrackets} closing`,\n        line: lines.length,\n        column: 1,\n        suggestion: openBrackets > closeBrackets ? 'Add missing closing bracket }' : 'Remove extra closing bracket or add opening bracket {',\n        category: 'syntax'\n      });\n    }\n\n    // Missing parentheses\n    const openParens = (code.match(/\\(/g) || []).length;\n    const closeParens = (code.match(/\\)/g) || []).length;\n    if (openParens !== closeParens) {\n      errors.push({\n        type: 'Mismatched Parentheses',\n        severity: 'error',\n        message: `Mismatched parentheses: ${openParens} opening, ${closeParens} closing`,\n        line: lines.length,\n        column: 1,\n        suggestion: openParens > closeParens ? 'Add missing closing parenthesis )' : 'Remove extra closing parenthesis or add opening parenthesis (',\n        category: 'syntax'\n      });\n    }\n\n    suggestions.push('Use strict mode with \"use strict\"');\n    suggestions.push('Consider using TypeScript for better type safety');\n    suggestions.push('Use const for values that never change');\n    \n    return { errors, suggestions };\n  }\n\n  // ========== PYTHON ANALYSIS ==========\n  private analyzePython(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    const lines = code.split('\\n');\n\n    // Indentation errors\n    lines.forEach((line, index) => {\n      if (line.trim() && line[0] === ' ') {\n        const spaces = line.search(/\\S/);\n        if (spaces % 4 !== 0) {\n          errors.push({\n            type: 'Indentation Error',\n            severity: 'error',\n            message: 'Python uses 4-space indentation',\n            line: index + 1,\n            column: 1,\n            suggestion: 'Use 4 spaces for each indentation level',\n            category: 'syntax'\n          });\n        }\n      }\n    });\n\n    // Missing colons\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if ((trimmed.startsWith('if ') || trimmed.startsWith('def ') || \n           trimmed.startsWith('for ') || trimmed.startsWith('while ') ||\n           trimmed.startsWith('class ') || trimmed.startsWith('try') ||\n           trimmed.startsWith('except') || trimmed.startsWith('else')) &&\n          !trimmed.endsWith(':')) {\n        errors.push({\n          type: 'Missing Colon',\n          severity: 'error',\n          message: 'Missing colon at end of statement',\n          line: index + 1,\n          column: line.length,\n          suggestion: 'Add colon (:) at the end of this line',\n          category: 'syntax'\n        });\n      }\n    });\n\n    // Undefined variables (basic detection)\n    if (code.includes('print(') && !code.includes('print ')) {\n      // This is actually correct for Python 3\n    }\n\n    suggestions.push('Follow PEP 8 style guidelines');\n    suggestions.push('Use meaningful variable names');\n    suggestions.push('Add docstrings to functions and classes');\n    \n    return { errors, suggestions };\n  }\n\n  // ========== JAVA ANALYSIS ==========\n  private analyzeJava(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    const lines = code.split('\\n');\n\n    // Missing semicolons\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (trimmed && \n          !trimmed.endsWith(';') && \n          !trimmed.endsWith('{') && \n          !trimmed.endsWith('}') &&\n          !trimmed.startsWith('//') &&\n          !trimmed.includes('class ') &&\n          !trimmed.includes('if ') &&\n          !trimmed.includes('for ') &&\n          !trimmed.includes('while ') &&\n          trimmed.length > 5) {\n        errors.push({\n          type: 'Missing Semicolon',\n          severity: 'error',\n          message: 'Missing semicolon at end of statement',\n          line: index + 1,\n          column: line.length,\n          suggestion: 'Add semicolon at the end of this line',\n          category: 'syntax'\n        });\n      }\n    });\n\n    // Class naming convention\n    const classMatch = code.match(/class\\s+([a-z][a-zA-Z]*)/);\n    if (classMatch) {\n      errors.push({\n        type: 'Naming Convention',\n        severity: 'warning',\n        message: 'Class names should start with uppercase letter',\n        line: 1,\n        column: 1,\n        suggestion: `Rename class to ${classMatch[1].charAt(0).toUpperCase() + classMatch[1].slice(1)}`,\n        category: 'style'\n      });\n    }\n\n    // Missing main method\n    if (code.includes('class ') && !code.includes('public static void main')) {\n      errors.push({\n        type: 'Missing Main Method',\n        severity: 'info',\n        message: 'Java applications need a main method to run',\n        line: 1,\n        column: 1,\n        suggestion: 'Add: public static void main(String[] args) { }',\n        category: 'logical'\n      });\n    }\n\n    suggestions.push('Use camelCase for method and variable names');\n    suggestions.push('Use PascalCase for class names');\n    suggestions.push('Add proper exception handling');\n    \n    return { errors, suggestions };\n  }\n\n  // ========== C/C++ ANALYSIS ==========\n  private analyzeCpp(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    const lines = code.split('\\n');\n\n    // Missing semicolons\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (trimmed && \n          !trimmed.endsWith(';') && \n          !trimmed.endsWith('{') && \n          !trimmed.endsWith('}') &&\n          !trimmed.startsWith('#') &&\n          !trimmed.startsWith('//') &&\n          !trimmed.includes('if ') &&\n          !trimmed.includes('for ') &&\n          !trimmed.includes('while ') &&\n          trimmed.length > 5) {\n        errors.push({\n          type: 'Missing Semicolon',\n          severity: 'error',\n          message: 'Missing semicolon at end of statement',\n          line: index + 1,\n          column: line.length,\n          suggestion: 'Add semicolon at the end of this line',\n          category: 'syntax'\n        });\n      }\n    });\n\n    // Missing includes\n    if (!code.includes('#include')) {\n      errors.push({\n        type: 'Missing Include',\n        severity: 'warning',\n        message: 'No include statements found',\n        line: 1,\n        column: 1,\n        suggestion: 'Add necessary #include statements (e.g., #include <iostream>)',\n        category: 'logical'\n      });\n    }\n\n    // Missing main function\n    if (!code.includes('int main') && !code.includes('void main')) {\n      errors.push({\n        type: 'Missing Main Function',\n        severity: 'error',\n        message: 'C/C++ programs need a main function',\n        line: 1,\n        column: 1,\n        suggestion: 'Add: int main() { return 0; }',\n        category: 'logical'\n      });\n    }\n\n    suggestions.push('Use smart pointers in C++');\n    suggestions.push('Always initialize variables');\n    suggestions.push('Check for memory leaks');\n    \n    return { errors, suggestions };\n  }\n\n  // ========== GENERIC ANALYSIS FOR OTHER LANGUAGES ==========\n  private analyzeCSharp(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    // Basic C# checks similar to Java\n    if (!code.includes('using ') && code.includes('Console.')) {\n      errors.push({\n        type: 'Missing Using Statement',\n        severity: 'warning',\n        message: 'Missing using System; statement',\n        line: 1,\n        column: 1,\n        suggestion: 'Add \"using System;\" at the top of the file',\n        category: 'logical'\n      });\n    }\n\n    suggestions.push('Use PascalCase for public members');\n    suggestions.push('Use camelCase for private fields');\n    return { errors, suggestions };\n  }\n\n  private analyzePHP(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    if (!code.includes('<?php')) {\n      errors.push({\n        type: 'Missing PHP Opening Tag',\n        severity: 'error',\n        message: 'PHP code must start with <?php',\n        line: 1,\n        column: 1,\n        suggestion: 'Add <?php at the beginning of the file',\n        category: 'syntax'\n      });\n    }\n\n    suggestions.push('Use PSR-4 autoloading standards');\n    suggestions.push('Validate user input');\n    return { errors, suggestions };\n  }\n\n  private analyzeRuby(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    suggestions.push('Use snake_case for variables and methods');\n    suggestions.push('Use CamelCase for classes');\n    return { errors, suggestions };\n  }\n\n  private analyzeGo(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    if (!code.includes('package ')) {\n      errors.push({\n        type: 'Missing Package Declaration',\n        severity: 'error',\n        message: 'Go files must declare a package',\n        line: 1,\n        column: 1,\n        suggestion: 'Add \"package main\" at the top of the file',\n        category: 'syntax'\n      });\n    }\n\n    suggestions.push('Use gofmt to format your code');\n    suggestions.push('Handle errors explicitly');\n    return { errors, suggestions };\n  }\n\n  private analyzeRust(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    if (!code.includes('fn main')) {\n      errors.push({\n        type: 'Missing Main Function',\n        severity: 'warning',\n        message: 'Rust programs need a main function to run',\n        line: 1,\n        column: 1,\n        suggestion: 'Add: fn main() { }',\n        category: 'logical'\n      });\n    }\n\n    suggestions.push('Use cargo fmt to format your code');\n    suggestions.push('Handle Option and Result types properly');\n    return { errors, suggestions };\n  }\n\n  private analyzeSwift(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    suggestions.push('Use camelCase for variables and functions');\n    suggestions.push('Use PascalCase for types and protocols');\n    return { errors, suggestions };\n  }\n\n  // ========== ADDITIONAL LANGUAGE ANALYZERS ==========\n  \n  private analyzeTypeScript(code: string) {\n    const jsAnalysis = this.analyzeJavaScript(code);\n    const errors = [...jsAnalysis.errors];\n    const suggestions = [...jsAnalysis.suggestions];\n    \n    // TypeScript-specific checks\n    if (!code.includes('interface') && !code.includes('type') && code.length > 100) {\n      suggestions.push('Consider using TypeScript interfaces or types for better type safety');\n    }\n    \n    if (code.includes('any')) {\n      errors.push({\n        type: 'Type Safety',\n        severity: 'warning',\n        message: 'Using \"any\" type reduces type safety',\n        line: this.findLineWithText(code, 'any'),\n        column: 0,\n        suggestion: 'Use specific types instead of \"any\"',\n        category: 'style'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n  \n  // Comprehensive language analyzers for major language families\n  private analyzeHTML(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    if (code.includes('<img') && !code.includes('alt=')) {\n      errors.push({\n        type: 'Accessibility',\n        severity: 'warning',\n        message: 'Image missing alt attribute',\n        line: this.findLineWithText(code, '<img'),\n        column: 0,\n        suggestion: 'Add alt attribute for accessibility',\n        category: 'style'\n      });\n    }\n    \n    suggestions.push('Validate HTML using W3C validator');\n    suggestions.push('Use semantic HTML elements for better accessibility');\n    return { errors, suggestions };\n  }\n  \n  private analyzeCSS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    suggestions.push('Use CSS Grid or Flexbox for layouts');\n    suggestions.push('Consider using CSS variables for consistent theming');\n    return { errors, suggestions };\n  }\n  \n  private analyzePerl(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    if (!code.includes('use strict;')) {\n      errors.push({\n        type: 'Best Practice',\n        severity: 'warning',\n        message: 'Missing \"use strict;\" pragma',\n        line: 1,\n        column: 0,\n        suggestion: 'Add \"use strict;\" at the beginning of your script',\n        category: 'style'\n      });\n    }\n    \n    suggestions.push('Use modern Perl practices and modules');\n    return { errors, suggestions };\n  }\n  \n  private analyzeLua(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    const functionCount = (code.match(/\\bfunction\\b/g) || []).length;\n    const endCount = (code.match(/\\bend\\b/g) || []).length;\n    \n    if (functionCount > endCount) {\n      errors.push({\n        type: 'Syntax Error',\n        severity: 'error',\n        message: 'Missing \"end\" keyword for function',\n        line: this.findLineWithText(code, 'function'),\n        column: 0,\n        suggestion: 'Add \"end\" keyword to close function block',\n        category: 'syntax'\n      });\n    }\n    \n    suggestions.push('Use local variables when possible');\n    return { errors, suggestions };\n  }\n  \n  // Stub analyzers for comprehensive language support\n  private analyzeC(code: string) { return this.analyzeCpp(code); }\n  private analyzeR(code: string) { \n    const errors: CodeError[] = [];\n    const suggestions = ['Use vectorized operations for better performance', 'Follow R style guide conventions'];\n    return { errors, suggestions };\n  }\n  private analyzeHaskell(code: string) { \n    const errors: CodeError[] = [];\n    const suggestions = ['Use pattern matching effectively', 'Leverage Haskell\\'s type system for safety'];\n    return { errors, suggestions };\n  }\n  private analyzeScala(code: string) { return this.analyzeJava(code); }\n  private analyzeClojure(code: string) { return this.analyzeLisp(code); }\n  private analyzeLisp(code: string) { \n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper parentheses balancing', 'Follow Lisp naming conventions'];\n    return { errors, suggestions };\n  }\n  private analyzeBash(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper quoting for variables', 'Add error checking with set -e'];\n    if (!code.includes('#!/bin/bash')) {\n      errors.push({\n        type: 'Missing Shebang',\n        severity: 'warning',\n        message: 'Missing shebang line',\n        line: 1,\n        column: 0,\n        suggestion: 'Add #!/bin/bash at the beginning',\n        category: 'style'\n      });\n    }\n    return { errors, suggestions };\n  }\n  private analyzePowerShell(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use approved verbs for functions', 'Add proper error handling'];\n    return { errors, suggestions };\n  }\n  private analyzeVBScript(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Option Explicit', 'Proper error handling with On Error Resume Next'];\n    return { errors, suggestions };\n  }\n  private analyzeXML(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Validate XML structure', 'Use proper namespaces'];\n    return { errors, suggestions };\n  }\n  private analyzeSQL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use parameterized queries to prevent SQL injection', 'Index frequently queried columns'];\n    return { errors, suggestions };\n  }\n  private analyzeJSON(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    try {\n      JSON.parse(code);\n    } catch (error) {\n      errors.push({\n        type: 'JSON Syntax',\n        severity: 'error',\n        message: 'Invalid JSON format',\n        line: 1,\n        column: 0,\n        suggestion: 'Fix JSON syntax errors',\n        category: 'syntax'\n      });\n    }\n    return { errors, suggestions };\n  }\n  private analyzeYAML(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Check indentation consistency', 'Validate YAML syntax'];\n    return { errors, suggestions };\n  }\n  private analyzeAda(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Ada naming conventions', 'Proper package structure'];\n    return { errors, suggestions };\n  }\n  private analyzeNim(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Nim style guide', 'Leverage compile-time features'];\n    return { errors, suggestions };\n  }\n  private analyzeFortran(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use modern Fortran features', 'Proper array handling'];\n    return { errors, suggestions };\n  }\n  private analyzeAssembly(code: string, variant: string) {\n    const errors: CodeError[] = [];\n    const suggestions = [`Follow ${variant.toUpperCase()} assembly conventions`, 'Use comments to document register usage'];\n    return { errors, suggestions };\n  }\n  private analyzeScratch(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper sprite management', 'Add comments to blocks'];\n    return { errors, suggestions };\n  }\n  private analyzeLogo(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper turtle graphics commands', 'Add structured programming'];\n    return { errors, suggestions };\n  }\n  private analyzeHDL(code: string, lang: string) {\n    const errors: CodeError[] = [];\n    const suggestions = [`Follow ${lang.toUpperCase()} conventions`, 'Use proper signal declarations'];\n    return { errors, suggestions };\n  }\n  private analyzeProlog(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper fact and rule structure', 'Add cut operators carefully'];\n    return { errors, suggestions };\n  }\n  private analyzeCOBOL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Follow COBOL column structure', 'Use proper division organization'];\n    return { errors, suggestions };\n  }\n  private analyzeALGOL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use structured programming', 'Proper block structure'];\n    return { errors, suggestions };\n  }\n  private analyzePascal(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper Pascal syntax', 'Structure with procedures and functions'];\n    return { errors, suggestions };\n  }\n  private analyzeBasic(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use line numbers appropriately', 'Structure with subroutines'];\n    return { errors, suggestions };\n  }\n  private analyzeJulia(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Julia type system effectively', 'Leverage multiple dispatch'];\n    return { errors, suggestions };\n  }\n  private analyzeMATLAB(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use vectorized operations', 'Proper matrix operations'];\n    return { errors, suggestions };\n  }\n\n  // ========== NEW LANGUAGE ANALYZERS ==========\n  \n  // Esoteric & Experimental Languages\n  private analyzeBrainfuck(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Brainfuck uses only 8 commands: ><+-.,[]', 'Use online interpreters for testing'];\n    \n    const validChars = new Set('><+-.,[]');\n    for (let i = 0; i < code.length; i++) {\n      if (!validChars.has(code[i]) && code[i] !== '\\n' && code[i] !== ' ') {\n        errors.push({\n          type: 'Invalid Character',\n          severity: 'error',\n          message: `Invalid character: ${code[i]}`,\n          line: 1,\n          column: i,\n          suggestion: 'Only use ><+-.,[] characters in Brainfuck',\n          category: 'syntax'\n        });\n      }\n    }\n    return { errors, suggestions };\n  }\n\n  private analyzeLOLCODE(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Start with HAI and end with KTHXBYE', 'Use proper LOLCODE syntax'];\n    \n    if (!code.includes('HAI')) {\n      errors.push({\n        type: 'Missing Program Start',\n        severity: 'error',\n        message: 'LOLCODE programs must start with HAI',\n        line: 1,\n        column: 0,\n        suggestion: 'Add HAI at the beginning',\n        category: 'syntax'\n      });\n    }\n    \n    if (!code.includes('KTHXBYE')) {\n      errors.push({\n        type: 'Missing Program End',\n        severity: 'error',\n        message: 'LOLCODE programs must end with KTHXBYE',\n        line: 1,\n        column: 0,\n        suggestion: 'Add KTHXBYE at the end',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeWhitespace(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Whitespace uses only spaces, tabs, and newlines', 'Each command has specific whitespace patterns'];\n    \n    for (let i = 0; i < code.length; i++) {\n      if (code[i] !== ' ' && code[i] !== '\\t' && code[i] !== '\\n') {\n        errors.push({\n          type: 'Invalid Character',\n          severity: 'error',\n          message: 'Whitespace only allows spaces, tabs, and newlines',\n          line: 1,\n          column: i,\n          suggestion: 'Remove all visible characters',\n          category: 'syntax'\n        });\n      }\n    }\n    return { errors, suggestions };\n  }\n\n  private analyzeMalbolge(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Malbolge is intentionally difficult', 'Use specialized tools for Malbolge development'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBefunge(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Befunge is a 2D language', 'Program flow changes direction with ><^v'];\n    return { errors, suggestions };\n  }\n\n  private analyzeINTERCAL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use PLEASE for politeness in INTERCAL', 'Follow INTERCAL conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeOok(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Ook! uses only Ook. Ook? Ook!', 'Based on Brainfuck semantics'];\n    return { errors, suggestions };\n  }\n\n  private analyzePiet(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Piet is a visual language using colors', 'Use Piet interpreters for execution'];\n    return { errors, suggestions };\n  }\n\n  // Scientific & Analytical Languages\n  private analyzeJ(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['J is array-oriented like APL', 'Use J-specific operators and syntax'];\n    return { errors, suggestions };\n  }\n\n  private analyzeNial(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Nial is nested array language', 'Combines functional and array programming', 'Use Nial array operations and transformations'];\n    return { errors, suggestions };\n  }\n\n  private analyzeIDL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['IDL is great for data analysis', 'Use proper IDL procedures and functions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGAMS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['GAMS is for optimization problems', 'Define sets, parameters, and equations properly'];\n    return { errors, suggestions };\n  }\n\n  private analyzeMathematica(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Mathematica/Wolfram Language syntax', 'Leverage symbolic computation features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeScilab(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Scilab is similar to MATLAB', 'Use Scilab-specific functions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeOctave(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['GNU Octave is MATLAB-compatible', 'Use vectorized operations'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSage(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SageMath combines many math libraries', 'Use Python-based syntax'];\n    return { errors, suggestions };\n  }\n\n  // Blockchain & Smart Contract Languages\n  private analyzeSolidity(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper Solidity pragma version', 'Implement security best practices', 'Handle gas optimization'];\n    \n    if (!code.includes('pragma solidity')) {\n      errors.push({\n        type: 'Missing Pragma',\n        severity: 'error',\n        message: 'Solidity files must specify pragma version',\n        line: 1,\n        column: 0,\n        suggestion: 'Add pragma solidity ^0.8.0; at the top',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeVyper(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Vyper is Pythonic smart contract language', 'Focus on security and simplicity'];\n    return { errors, suggestions };\n  }\n\n  private analyzeMove(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Move focuses on resource safety', 'Use proper module and resource definitions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCairo(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Cairo is for StarkNet contracts', 'Use proper Cairo syntax and patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeScilla(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Scilla is functional and safe', 'Use proper contract structure'];\n    return { errors, suggestions };\n  }\n\n  private analyzeMichelson(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Michelson is stack-based', 'Use proper Tezos contract patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeClarity(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Clarity is decidable and safe', 'Use proper Stacks blockchain patterns'];\n    return { errors, suggestions };\n  }\n\n  // Configuration & Build Languages\n  private analyzeMakefile(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use tabs for indentation in Makefiles', 'Define proper targets and dependencies'];\n    \n    const lines = code.split('\\n');\n    lines.forEach((line, index) => {\n      if (line.startsWith(' ') && line.includes(':')) {\n        errors.push({\n          type: 'Indentation Error',\n          severity: 'error',\n          message: 'Makefiles require tabs, not spaces',\n          line: index + 1,\n          column: 0,\n          suggestion: 'Use tabs for indentation',\n          category: 'syntax'\n        });\n      }\n    });\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeHCL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper HCL syntax', 'Follow Terraform conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGradle(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Gradle DSL properly', 'Define dependencies correctly'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCMake(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use CMake best practices', 'Define targets and dependencies'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBazel(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Bazel/Starlark syntax', 'Define build rules properly'];\n    return { errors, suggestions };\n  }\n\n  private analyzeNix(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Nix expression language', 'Define derivations properly'];\n    return { errors, suggestions };\n  }\n\n  private analyzeDockerfile(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper Dockerfile instructions', 'Optimize for layer caching'];\n    \n    if (!code.includes('FROM')) {\n      errors.push({\n        type: 'Missing Base Image',\n        severity: 'error',\n        message: 'Dockerfile must start with FROM instruction',\n        line: 1,\n        column: 0,\n        suggestion: 'Add FROM instruction at the beginning',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeAnsible(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use proper Ansible YAML syntax', 'Define tasks and handlers correctly'];\n    return { errors, suggestions };\n  }\n\n  // Emerging or Niche Languages\n  private analyzeZig(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Zig focuses on safety and performance', 'Use proper error handling'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCrystal(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Crystal has Ruby-like syntax', 'Use static typing features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBosque(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Bosque is experimental from Microsoft', 'Use proper type annotations'];\n    return { errors, suggestions };\n  }\n\n  private analyzeV(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['V is simple and fast', 'Use proper V syntax'];\n    return { errors, suggestions };\n  }\n\n  private analyzeOdin(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Odin is data-oriented', 'Use proper procedures and structures'];\n    return { errors, suggestions };\n  }\n\n  private analyzeRed(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Red is full-stack language', 'Use proper Red syntax'];\n    return { errors, suggestions };\n  }\n\n  private analyzePony(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Pony is actor-model language', 'Use proper capability security'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGrain(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Grain is functional language', 'Use proper pattern matching'];\n    return { errors, suggestions };\n  }\n\n  // Metaprogramming & Macro Languages\n  private analyzeRacket(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Racket is great for language design', 'Use proper macro definitions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeElixir(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Elixir is functional and concurrent', 'Use proper pattern matching'];\n    return { errors, suggestions };\n  }\n\n  private analyzeHy(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Hy is Lisp on Python', 'Use proper S-expressions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeClojureMacros(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Use Clojure macros wisely', 'Prefer functions over macros'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTemplateHaskell(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Template Haskell enables metaprogramming', 'Use compile-time code generation'];\n    return { errors, suggestions };\n  }\n\n  private analyzeRustMacros(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Rust macros are hygienic', 'Use proper macro syntax'];\n    return { errors, suggestions };\n  }\n\n  // Educational & Localized Languages\n  private analyzeKalaam(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Kalaam uses Hindi keywords', 'Follow Kalaam syntax rules'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCitrine(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Citrine supports multiple human languages', 'Use proper object-oriented patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeHedy(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Hedy is beginner-friendly', 'Use gradual programming concepts'];\n    return { errors, suggestions };\n  }\n\n  private analyzeKojo(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Kojo is for learning programming', 'Use turtle graphics and Scala features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSnap(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Snap! is visual block-based', 'Use proper block connections'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTurtleStitch(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TurtleStitch is for embroidery', 'Use proper stitching patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeQuorum(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Quorum is evidence-based language', 'Use proper accessibility features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGreenfoot(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Greenfoot is educational Java', 'Use proper actor-based programming'];\n    return { errors, suggestions };\n  }\n\n  // ========== SPECIALIZED LANGUAGE ANALYZERS ==========\n  \n  // Esoteric & Artistic Languages\n  private analyzePietArt(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Piet programs are abstract art images', 'Use color transitions to represent operations', 'Test with Piet interpreters'];\n    return { errors, suggestions };\n  }\n\n  private analyzeShakespeare(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Write code like a dramatic play', 'Use character names as variables', 'Follow Shakespearean language patterns'];\n    \n    if (!code.includes('Romeo') && !code.includes('Juliet')) {\n      suggestions.push('Consider using classic character names like Romeo and Juliet');\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeChef(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Write programs as cooking recipes', 'Use cooking terminology for operations', 'Include ingredients and method steps'];\n    \n    if (!code.includes('Ingredients') && !code.includes('Method')) {\n      errors.push({\n        type: 'Missing Recipe Structure',\n        severity: 'warning',\n        message: 'Chef programs should have Ingredients and Method sections',\n        line: 1,\n        column: 0,\n        suggestion: 'Add Ingredients: and Method: sections',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeVelato(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Velato uses MIDI music files as source code', 'Program logic encoded in musical notes', 'Use MIDI editors for development'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTaxi(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Taxi uses city metaphors for programming', 'Variables are passengers', 'Operations are destinations'];\n    return { errors, suggestions };\n  }\n\n  // Mathematical & Modeling Languages\n  private analyzeModelica(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Modelica is for physical system modeling', 'Use proper equation-based modeling', 'Define components and connections'];\n    \n    if (!code.includes('model') && !code.includes('class')) {\n      errors.push({\n        type: 'Missing Model Definition',\n        severity: 'warning',\n        message: 'Modelica code should define models or classes',\n        line: 1,\n        column: 0,\n        suggestion: 'Add model or class definition',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeAMPL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['AMPL is for mathematical optimization', 'Define sets, parameters, variables, and constraints', 'Use proper optimization syntax'];\n    return { errors, suggestions };\n  }\n\n  private analyzeZ3SMT(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Z3 SMT-LIB is for theorem proving', 'Use proper SMT-LIB syntax', 'Define assertions and check satisfiability'];\n    \n    if (!code.includes('(assert') && !code.includes('(check-sat')) {\n      suggestions.push('Consider adding assertions and satisfiability checks');\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeMaple(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Maple is for symbolic mathematics', 'Use proper mathematical notation', 'Leverage symbolic computation features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeMaxima(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Maxima is for symbolic computation', 'Use Lisp-like syntax', 'Leverage computer algebra features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGAP(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['GAP is for computational group theory', 'Use proper group-theoretic functions', 'Follow GAP syntax conventions'];\n    return { errors, suggestions };\n  }\n\n  // AI & Knowledge Representation Languages\n  private analyzeCycL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CycL represents human knowledge', 'Use proper ontological structures', 'Follow Cyc knowledge base conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeAtomese(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Atomese is for cognitive architectures', 'Use hypergraph-based knowledge representation', 'Follow OpenCog conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCLIPS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CLIPS is for expert systems', 'Use rule-based programming', 'Define facts and rules properly'];\n    \n    if (!code.includes('(defrule') && !code.includes('(deffacts')) {\n      suggestions.push('Consider defining rules with (defrule) and facts with (deffacts)');\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeDrools(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Drools is for business rules', 'Use when-then syntax', 'Follow business rule patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSWRL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SWRL extends OWL with rules', 'Use semantic web rule language syntax', 'Define proper ontological rules'];\n    return { errors, suggestions };\n  }\n\n  private analyzeJess(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Jess is Java-based expert system', 'Use rule-based programming', 'Follow Jess syntax patterns'];\n    return { errors, suggestions };\n  }\n\n  // Robotics & Embedded Systems Languages\n  private analyzeURBI(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['URBI is for robotics programming', 'Use event-driven scripting', 'Follow robotics control patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeNQC(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['NQC is for Lego Mindstorms', 'Use C-like syntax for robotics', 'Define proper robot behaviors'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCh(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Ch is embeddable C/C++', 'Use for scripting and embedded systems', 'Follow C/C++ conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeRobocode(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Robocode is for robot battle programming', 'Extend Robot or AdvancedRobot classes', 'Implement robot AI strategies'];\n    return { errors, suggestions };\n  }\n\n  private analyzeROSLaunch(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ROS Launch uses XML configuration', 'Define nodes, parameters, and topics', 'Follow ROS conventions'];\n    \n    if (!code.includes('<launch>') || !code.includes('</launch>')) {\n      errors.push({\n        type: 'Missing Launch Tags',\n        severity: 'error',\n        message: 'ROS launch files need <launch> tags',\n        line: 1,\n        column: 0,\n        suggestion: 'Wrap content in <launch></launch> tags',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeArduino(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Arduino uses C/C++ for microcontrollers', 'Include setup() and loop() functions', 'Use Arduino libraries and functions'];\n    \n    if (!code.includes('void setup()') || !code.includes('void loop()')) {\n      errors.push({\n        type: 'Missing Arduino Functions',\n        severity: 'error',\n        message: 'Arduino sketches need setup() and loop() functions',\n        line: 1,\n        column: 0,\n        suggestion: 'Add void setup() and void loop() functions',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  // Creative Coding & Multimedia Languages\n  private analyzeProcessing(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Processing is for visual arts programming', 'Use setup() and draw() functions', 'Leverage creative coding features'];\n    \n    if (!code.includes('void setup()') && !code.includes('void draw()')) {\n      suggestions.push('Consider adding setup() and draw() functions for Processing sketches');\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeOpenFrameworks(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['openFrameworks is C++ for creative coding', 'Use ofApp class structure', 'Leverage multimedia capabilities'];\n    return { errors, suggestions };\n  }\n\n  private analyzePureData(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Pure Data is visual programming for audio', 'Connect objects with patch cords', 'Use proper signal flow'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSuperCollider(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SuperCollider is for audio synthesis', 'Use Server and language features', 'Follow audio programming patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeChucK(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ChucK is for real-time audio programming', 'Use time-based programming concepts', 'Follow ChucK syntax patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeP5js(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['p5.js is JavaScript for creative coding', 'Use setup() and draw() functions', 'Leverage web-based creative features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCinder(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Cinder is C++ for creative coding', 'Use proper app structure', 'Leverage graphics and multimedia features'];\n    return { errors, suggestions };\n  }\n\n  // Bioinformatics & Scientific Computing Languages\n  private analyzeBioPerl(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['BioPerl is for biological data processing', 'Use Bio:: modules', 'Follow bioinformatics best practices'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBioconductor(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Bioconductor uses R for genomics', 'Use proper R/Bioconductor packages', 'Follow genomic analysis workflows'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCellML(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CellML models biological processes', 'Use proper XML structure', 'Define mathematical models of cells'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBioPython(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['BioPython extends Python for biology', 'Use Bio modules and classes', 'Follow bioinformatics conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeBioJava(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['BioJava extends Java for biology', 'Use org.biojava packages', 'Follow bioinformatics patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeEMBOSS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['EMBOSS is for sequence analysis', 'Use proper application definitions', 'Follow bioinformatics standards'];\n    return { errors, suggestions };\n  }\n\n  private analyzePHYLIP(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['PHYLIP is for phylogenetic analysis', 'Use proper data formats', 'Follow phylogenetic conventions'];\n    return { errors, suggestions };\n  }\n\n  // Infrastructure & DevOps DSLs\n  private analyzeStarlark(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Starlark is Python-like for Bazel', 'Use proper build rule definitions', 'Follow Bazel conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeDhall(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Dhall is strongly-typed configuration', 'Use proper type annotations', 'Leverage functional programming features'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCUE(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CUE is for data validation and configuration', 'Use proper schema definitions', 'Follow CUE syntax patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeJsonnet(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Jsonnet extends JSON with programming', 'Use proper templating features', 'Follow Jsonnet conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzePulumi(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Pulumi is infrastructure as code', 'Use proper cloud resource definitions', 'Follow IaC best practices'];\n    return { errors, suggestions };\n  }\n\n  private analyzeHelm(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Helm uses Go templating for Kubernetes', 'Use proper chart structure', 'Follow Kubernetes conventions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeKustomize(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Kustomize customizes Kubernetes YAML', 'Use proper overlay structure', 'Follow GitOps patterns'];\n    return { errors, suggestions };\n  }\n\n  // ========== ADVANCED SPECIALIZED ANALYZERS ==========\n\n  // Constraint & Rule-Based Languages\n  private analyzeCHR(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CHR extends Prolog with constraints', 'Use proper constraint handling rules', 'Follow CHR syntax patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeDroolsAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Drools for business rule management', 'Use when-then-end syntax', 'Define proper rule patterns'];\n    \n    if (!code.includes('rule') || !code.includes('when') || !code.includes('then')) {\n      errors.push({\n        type: 'Missing Rule Structure',\n        severity: 'error',\n        message: 'Drools rules need rule-when-then structure',\n        line: 1,\n        column: 0,\n        suggestion: 'Add rule \"RuleName\" when condition then action end',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeJessExpert(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Jess for Java-based expert systems', 'Use (defrule) and (deffacts)', 'Follow expert system patterns'];\n    return { errors, suggestions };\n  }\n\n  // DSL Creation & Meta-Programming Languages\n  private analyzeMetaOCaml(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['MetaOCaml for staged programming', 'Use proper staging annotations', 'Leverage compile-time code generation'];\n    return { errors, suggestions };\n  }\n\n  private analyzeRascal(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Rascal for source code analysis', 'Use pattern matching and transformation', 'Follow DSL creation patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSpoofax(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Spoofax language workbench', 'Define syntax and semantics', 'Use proper SDF3 grammar definitions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeXtext(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Xtext for Eclipse-based DSLs', 'Define grammar and semantics', 'Use proper Xtext patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeJetBrainsMPS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['JetBrains MPS for language design', 'Use projectional editing', 'Define language concepts properly'];\n    return { errors, suggestions };\n  }\n\n  // Quantum & Emerging Paradigms\n  private analyzeQCL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['QCL for quantum algorithms', 'Use quantum gates and circuits', 'Follow quantum programming patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeProjectQ(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ProjectQ quantum framework', 'Use Python-based quantum programming', 'Implement quantum algorithms'];\n    return { errors, suggestions };\n  }\n\n  private analyzeLIQUi(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['LIQUi‚ü© for quantum simulation', 'Use F# for quantum programming', 'Follow Microsoft Quantum patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeQSharp(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Q# for quantum programming', 'Use quantum operations and functions', 'Follow Azure Quantum patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCirq(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Cirq for quantum circuits', 'Use Google quantum framework', 'Implement NISQ algorithms'];\n    return { errors, suggestions };\n  }\n\n  // Advanced Infrastructure & Automation\n  private analyzeAnsibleAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Ansible for automation', 'Use YAML playbooks', 'Define tasks, handlers, and roles'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTerraformHCL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Terraform HCL for infrastructure', 'Define resources and providers', 'Use proper state management'];\n    return { errors, suggestions };\n  }\n\n  private analyzePulumiAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Pulumi for cloud infrastructure', 'Use familiar programming languages', 'Follow cloud-native patterns'];\n    return { errors, suggestions };\n  }\n\n  // Creative & Generative Art Languages\n  private analyzeChucKAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ChucK for real-time audio synthesis', 'Use time-based programming', 'Implement sound generators'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSuperColliderAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SuperCollider for algorithmic composition', 'Use Server and Language components', 'Create audio synthesis patterns'];\n    return { errors, suggestions };\n  }\n\n  private analyzeHydra(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Hydra for live coding visuals', 'Use browser-based visual synthesis', 'Create real-time graphics'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSonicPi(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Sonic Pi for live coding music', 'Use Ruby-based music programming', 'Create musical compositions'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTidalCycles(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TidalCycles for algorithmic music', 'Use Haskell-based pattern language', 'Create complex rhythmic patterns'];\n    return { errors, suggestions };\n  }\n\n  // Accessibility & Inclusive Learning Languages\n  private analyzeQuorumAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Quorum designed for accessibility', 'Evidence-based language design', 'Support for screen readers'];\n    return { errors, suggestions };\n  }\n\n  private analyzeHedyAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Hedy for gradual programming learning', 'Multilingual programming concepts', 'Progressive syntax introduction'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTurtleArt(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TurtleArt for creative programming', 'Visual block-based interface', 'Focus on artistic expression'];\n    return { errors, suggestions };\n  }\n\n  // Historical & Forgotten Languages\n  private analyzeTRAC(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TRAC from 1960s text processing', 'Macro-based language', 'Historical programming significance'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTUTOR(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TUTOR for PLATO educational system', 'Early computer-assisted instruction', 'Educational programming pioneer'];\n    return { errors, suggestions };\n  }\n\n  private analyzeJOSS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['JOSS early interactive language', 'Time-sharing system pioneer', 'Conversational programming style'];\n    return { errors, suggestions };\n  }\n\n  private analyzeMAD(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['MAD Michigan Algorithm Decoder', 'Early scientific computing', 'University of Michigan heritage'];\n    return { errors, suggestions };\n  }\n\n  private analyzeFOCAL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['FOCAL for PDP computers', 'Early interactive programming', 'DEC computer systems'];\n    return { errors, suggestions };\n  }\n\n  private analyzePILOT(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['PILOT for computer-aided instruction', 'Educational programming language', 'Simple command structure'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSNOBOL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SNOBOL for string manipulation', 'Pattern matching pioneer', 'Text processing capabilities'];\n    return { errors, suggestions };\n  }\n\n  // Simulation & Modeling Languages\n  private analyzeGPSS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['GPSS for discrete event simulation', 'Use blocks and transactions', 'Model complex systems'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSIMSCRIPT(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SIMSCRIPT for simulation modeling', 'Military and logistics applications', 'Event-based simulation'];\n    return { errors, suggestions };\n  }\n\n  private analyzeDYNAMO(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['DYNAMO for system dynamics', 'Model feedback loops', 'Jay Forrester methodology'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSTELLA(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['STELLA/iThink for system modeling', 'Visual modeling interface', 'Stock and flow diagrams'];\n    return { errors, suggestions };\n  }\n\n  private analyzeVensim(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Vensim for system dynamics', 'Business and policy modeling', 'Causal loop diagrams'];\n    return { errors, suggestions };\n  }\n\n  // ========== ULTIMATE SPECIALIZED ANALYZERS ==========\n\n  // Advanced Quantum & Theoretical Languages\n  private analyzeQCLAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['QCL for quantum computation', 'Use quantum gates and registers', 'Implement quantum algorithms'];\n    return { errors, suggestions };\n  }\n\n  private analyzeLIQUiAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['LIQUi‚ü© Microsoft quantum toolkit', 'Use F# for quantum simulation', 'Implement quantum circuits'];\n    return { errors, suggestions };\n  }\n\n  private analyzeOpenQASM(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['OpenQASM IBM quantum assembly', 'Define quantum registers and gates', 'Follow QASM syntax'];\n    \n    if (!code.includes('qreg') && !code.includes('creg')) {\n      errors.push({\n        type: 'Missing Quantum Registers',\n        severity: 'warning',\n        message: 'OpenQASM programs should define quantum and classical registers',\n        line: 1,\n        column: 0,\n        suggestion: 'Add qreg and creg declarations',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  // Advanced Infrastructure & Automation DSLs\n  private analyzeBicep(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Bicep for Azure infrastructure', 'Use declarative syntax', 'Define resources and parameters'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTiltfile(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Tiltfile for Kubernetes workflows', 'Use Starlark-based configuration', 'Define development environments'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCUEAdvanced(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CUE for configuration validation', 'Use type constraints', 'Define schemas and validation rules'];\n    return { errors, suggestions };\n  }\n\n  // Advanced Creative & Multimedia Languages\n  private analyzeFluxus(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Fluxus for live coding visuals', 'Use Scheme-based syntax', 'Create real-time 3D graphics'];\n    return { errors, suggestions };\n  }\n\n  private analyzeGibber(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Gibber for browser live coding', 'Use JavaScript-based audio/visual', 'Create interactive performances'];\n    return { errors, suggestions };\n  }\n\n  private analyzeImpromptu(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Impromptu for live audio/visual', 'Use Scheme for real-time programming', 'Create multimedia performances'];\n    return { errors, suggestions };\n  }\n\n  // Obsolete & Ultra-Rare Languages\n  private analyzeREXX(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['REXX for IBM system scripting', 'Use simple syntax structure', 'Legacy mainframe automation'];\n    return { errors, suggestions };\n  }\n\n  private analyzeEGL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['EGL Enterprise Generation Language', 'IBM Rational development tool', 'Business application generation'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCMS2(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['CMS-2 for military systems', 'Real-time embedded programming', 'Defense application heritage'];\n    return { errors, suggestions };\n  }\n\n  private analyzeJOVIAL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['JOVIAL for aerospace/defense', 'System programming language', 'Military specification heritage'];\n    return { errors, suggestions };\n  }\n\n  private analyzeNATURAL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['NATURAL 4GL with Adabas', 'Database application development', 'Enterprise data processing'];\n    return { errors, suggestions };\n  }\n\n  // Hardware & Platform-Specific Languages\n  private analyzeOpenCLC(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['OpenCL C for GPU programming', 'Use kernel functions', 'Parallel computing optimization'];\n    \n    if (!code.includes('__kernel')) {\n      suggestions.push('Consider defining kernel functions with __kernel qualifier');\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeShaderLab(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ShaderLab for Unity shaders', 'Use HLSL/CG syntax', 'Define vertex and fragment shaders'];\n    \n    if (!code.includes('Shader') || !code.includes('Properties')) {\n      errors.push({\n        type: 'Missing Shader Structure',\n        severity: 'error',\n        message: 'ShaderLab needs Shader and Properties blocks',\n        line: 1,\n        column: 0,\n        suggestion: 'Add Shader \"Name\" { Properties { } }',\n        category: 'structure'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeVHDLAMS(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['VHDL-AMS for analog/mixed-signal', 'Use analog and digital modeling', 'Define electrical behavior'];\n    return { errors, suggestions };\n  }\n\n  private analyzeSystemVerilog(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SystemVerilog for hardware design', 'Use enhanced verification features', 'Define interfaces and classes'];\n    return { errors, suggestions };\n  }\n\n  // Language Design & Transformation Languages\n  private analyzeTXL(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TXL for source transformation', 'Define grammar and transformation rules', 'Program analysis and refactoring'];\n    return { errors, suggestions };\n  }\n\n  private analyzeASFSDF(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['ASF+SDF for language specification', 'Define algebraic specifications', 'Formal language definition'];\n    return { errors, suggestions };\n  }\n\n  private analyzeStrategoXT(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Stratego/XT for program transformation', 'Use rewrite rules', 'Define transformation strategies'];\n    return { errors, suggestions };\n  }\n\n  // Security & Formal Methods Languages\n  private analyzeSPARKAda(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['SPARK Ada for high-integrity systems', 'Use formal verification', 'Safety-critical development'];\n    return { errors, suggestions };\n  }\n\n  private analyzeCryptol(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Cryptol for cryptographic algorithms', 'Use functional programming', 'Specify cryptographic properties'];\n    return { errors, suggestions };\n  }\n\n  private analyzeFStar(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['F* for verification-oriented programming', 'Use dependent types', 'Formal verification and proofs'];\n    return { errors, suggestions };\n  }\n\n  // Live Coding & Performance Languages\n  private analyzeImpromptuPerformance(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Impromptu for live performance', 'Real-time audio/visual programming', 'Interactive multimedia shows'];\n    return { errors, suggestions };\n  }\n\n  private analyzeExtempore(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Extempore for real-time multimedia', 'Use Scheme-based live coding', 'Audio and visual synthesis'];\n    return { errors, suggestions };\n  }\n\n  private analyzeTidalCyclesPerformance(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['TidalCycles for live music coding', 'Use pattern-based composition', 'Algorithmic music performance'];\n    return { errors, suggestions };\n  }\n\n  // ========== NEW EMERGING & SPECIALIZED LANGUAGES ==========\n  \n  // üß™ Emerging & Specialized Languages\n  private analyzeBosque(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Bosque eliminates complexity sources', 'No mutable state or loops', 'Microsoft research language'];\n    \n    if (code.includes('while') || code.includes('for')) {\n      errors.push({\n        type: 'Loop Not Allowed',\n        severity: 'error',\n        message: 'Bosque eliminates loops to reduce complexity',\n        line: 1,\n        column: 1,\n        suggestion: 'Use functional programming patterns instead of loops',\n        category: 'logical'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeZig(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Zig aims to replace C', 'Focus on safety and performance', 'Manual memory management with safety'];\n    \n    if (!code.includes('const') && !code.includes('var')) {\n      errors.push({\n        type: 'Missing Variable Declaration',\n        severity: 'warning',\n        message: 'Zig requires explicit variable declarations',\n        line: 1,\n        column: 1,\n        suggestion: 'Use const or var for variable declarations',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeV(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['V is simple, fast, and safe', 'Building maintainable software', 'Compiled language with Go-like syntax'];\n    \n    if (code.includes('mut ') && !code.includes('// mutable')) {\n      errors.push({\n        type: 'Mutable Variable Warning',\n        severity: 'info',\n        message: 'Consider if mutable variable is necessary',\n        line: 1,\n        column: 1,\n        suggestion: 'V prefers immutable variables when possible',\n        category: 'style'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeCarbon(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Carbon is experimental C++ successor', 'Google-proposed language', 'Focus on performance and safety'];\n    \n    if (!code.includes('fn ') && code.length > 10) {\n      errors.push({\n        type: 'Missing Function Declaration',\n        severity: 'warning',\n        message: 'Carbon uses fn for function declarations',\n        line: 1,\n        column: 1,\n        suggestion: 'Define functions with fn keyword',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeVale(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Vale provides memory safety', 'Region-based memory management', 'Systems programming language'];\n    \n    return { errors, suggestions };\n  }\n\n  // üß† AI & ML-Focused Languages\n  private analyzeMojo(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Mojo for high-performance AI', 'Python syntax with systems speed', 'Designed for AI workloads'];\n    \n    if (code.includes('def ') && !code.includes('@register_passable')) {\n      errors.push({\n        type: 'Performance Optimization Available',\n        severity: 'info',\n        message: 'Consider using @register_passable for performance',\n        line: 1,\n        column: 1,\n        suggestion: 'Use Mojo decorators for AI optimization',\n        category: 'performance'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeGen(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Gen for probabilistic programming', 'Built on Julia for statistical modeling', 'Advanced ML inference'];\n    \n    if (!code.includes('@gen') && code.includes('function')) {\n      errors.push({\n        type: 'Missing Gen Decorator',\n        severity: 'warning',\n        message: 'Gen functions typically use @gen decorator',\n        line: 1,\n        column: 1,\n        suggestion: 'Add @gen decorator for probabilistic functions',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  // üß¨ Scientific & Mathematical Enhanced\n  private analyzeJ(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['J is descendant of APL', 'Mathematical and statistical computing', 'Array-oriented programming'];\n    \n    return { errors, suggestions };\n  }\n\n  // üß© Domain-Specific & DSLs Enhanced\n  private analyzeElm(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Elm for front-end web development', 'Functional language with no runtime exceptions', 'Strong guarantees'];\n    \n    if (!code.includes('module ') && code.length > 20) {\n      errors.push({\n        type: 'Missing Module Declaration',\n        severity: 'error',\n        message: 'Elm files must start with module declaration',\n        line: 1,\n        column: 1,\n        suggestion: 'Add module declaration at the top',\n        category: 'syntax'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzePony(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Pony for safe concurrent programming', 'Actor-model based language', 'Memory safety guarantees'];\n    \n    if (code.includes('class ') && !code.includes('actor ')) {\n      errors.push({\n        type: 'Consider Actor Model',\n        severity: 'info',\n        message: 'Pony emphasizes actor-based programming',\n        line: 1,\n        column: 1,\n        suggestion: 'Consider using actor instead of class for concurrency',\n        category: 'style'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeRed(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Red inspired by Rebol', 'Full-stack language for scripting and GUI', 'Expressive syntax'];\n    \n    return { errors, suggestions };\n  }\n\n  // üßô‚Äç‚ôÄÔ∏è Obscure but Intriguing\n  private analyzeLoop(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['LOOP for computability studies', 'Theoretical language', 'Used in complexity theory'];\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeFrink(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Frink tracks units of measure', 'Great for physics and engineering', 'Dimensional analysis built-in'];\n    \n    if (!code.includes('unit') && code.includes('*') || code.includes('/')) {\n      errors.push({\n        type: 'Consider Unit Tracking',\n        severity: 'info',\n        message: 'Frink excels at unit tracking for calculations',\n        line: 1,\n        column: 1,\n        suggestion: 'Add unit declarations for dimensional analysis',\n        category: 'style'\n      });\n    }\n    \n    return { errors, suggestions };\n  }\n\n  private analyzeRebol(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions = ['Rebol lightweight scripting language', 'Expressive syntax with GUI support', 'Messaging and data exchange'];\n    \n    return { errors, suggestions };\n  }\n  \n  // ========== UTILITY METHODS ==========\n  private findLineWithText(code: string, searchText: string): number {\n    const lines = code.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].includes(searchText)) {\n        return i + 1;\n      }\n    }\n    return 1;\n  }\n\n  private analyzeGeneric(code: string, language: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    // Generic checks that apply to most languages\n    const lines = code.split('\\n');\n    \n    // Empty code\n    if (lines.filter(line => line.trim().length > 0).length === 0) {\n      errors.push({\n        type: 'Empty Code',\n        severity: 'warning',\n        message: 'Code appears to be empty',\n        line: 1,\n        column: 1,\n        suggestion: 'Add some code to analyze',\n        category: 'logical'\n      });\n    }\n\n    // Very long lines\n    lines.forEach((line, index) => {\n      if (line.length > 120) {\n        errors.push({\n          type: 'Line Too Long',\n          severity: 'info',\n          message: 'Line exceeds recommended length',\n          line: index + 1,\n          column: 120,\n          suggestion: 'Break this line into multiple lines for better readability',\n          category: 'style'\n        });\n      }\n    });\n\n    suggestions.push(`Follow ${language} coding conventions`);\n    suggestions.push('Use meaningful variable names');\n    suggestions.push('Add comments for complex logic');\n    \n    return { errors, suggestions };\n  }\n\n  // ========== UNIVERSAL ANALYSIS PATTERNS ==========\n  private performUniversalAnalysis(code: string) {\n    const errors: CodeError[] = [];\n    const suggestions: string[] = [];\n    \n    // Security checks\n    if (code.includes('eval(')) {\n      errors.push({\n        type: 'Security Risk',\n        severity: 'error',\n        message: 'Use of eval() is dangerous',\n        line: 1,\n        column: 1,\n        suggestion: 'Avoid eval() as it can execute arbitrary code',\n        category: 'security'\n      });\n    }\n\n    if (code.includes('password') && !code.includes('hash')) {\n      errors.push({\n        type: 'Security Risk',\n        severity: 'warning',\n        message: 'Potential plain text password',\n        line: 1,\n        column: 1,\n        suggestion: 'Always hash passwords before storing',\n        category: 'security'\n      });\n    }\n\n    // Performance issues\n    if (code.includes('while (true)') || code.includes('for (;;)')) {\n      errors.push({\n        type: 'Potential Infinite Loop',\n        severity: 'warning',\n        message: 'Possible infinite loop detected',\n        line: 1,\n        column: 1,\n        suggestion: 'Ensure loop has proper exit condition',\n        category: 'logical'\n      });\n    }\n\n    return { errors, suggestions };\n  }\n\n  // ========== EXPLANATION GENERATION ==========\n  private generateExplanation(errors: CodeError[], language: string): string {\n    if (errors.length === 0) {\n      return `Great job! Your ${language} code looks clean and doesn't have any obvious errors. Keep up the good work!`;\n    }\n\n    const errorCount = errors.filter(e => e.severity === 'error').length;\n    const warningCount = errors.filter(e => e.severity === 'warning').length;\n    \n    let explanation = `I found ${errorCount} error${errorCount !== 1 ? 's' : ''} and ${warningCount} warning${warningCount !== 1 ? 's' : ''} in your ${language} code. `;\n    \n    if (errorCount > 0) {\n      explanation += `The main issues are: ${errors.filter(e => e.severity === 'error').slice(0, 3).map(e => e.type).join(', ')}. `;\n    }\n    \n    explanation += `Here are the key improvements you can make: ${errors.slice(0, 3).map(e => e.suggestion).join('. ')}`;\n    \n    return explanation;\n  }\n\n  // ========== CODE FIXING ==========\n  private generateFixedCode(code: string, errors: CodeError[], language: string): string {\n    let fixedCode = code;\n    \n    // Apply simple fixes\n    for (const error of errors) {\n      if (error.type === 'Missing Semicolon') {\n        const lines = fixedCode.split('\\n');\n        if (lines[error.line - 1] && !lines[error.line - 1].trim().endsWith(';')) {\n          lines[error.line - 1] = lines[error.line - 1].trimEnd() + ';';\n          fixedCode = lines.join('\\n');\n        }\n      }\n      \n      if (error.type === 'Deprecated Variable Declaration' && language.toLowerCase() === 'javascript') {\n        fixedCode = fixedCode.replace(/var\\s+/g, 'let ');\n      }\n      \n      if (error.type === 'Missing PHP Opening Tag') {\n        fixedCode = '<?php\\n' + fixedCode;\n      }\n      \n      if (error.type === 'Missing Colon' && language.toLowerCase() === 'python') {\n        const lines = fixedCode.split('\\n');\n        if (lines[error.line - 1] && !lines[error.line - 1].trim().endsWith(':')) {\n          lines[error.line - 1] = lines[error.line - 1].trimEnd() + ':';\n          fixedCode = lines.join('\\n');\n        }\n      }\n    }\n    \n    return fixedCode;\n  }\n\n  // ========== COMPREHENSIVE SAMPLE CODE GENERATION FOR ALL 320 LANGUAGES ==========\n  generateSampleCode(language: string): string {\n    const lang = language.toLowerCase();\n    \n    // Get language info to determine category and characteristics\n    const languageInfo = this.getLanguageInfo(lang);\n    \n    // Generate language-specific boilerplate based on category and syntax\n    return this.generateLanguageSpecificSample(lang, languageInfo);\n  }\n\n  private getLanguageInfo(lang: string): { category: string; syntax: string; paradigm: string } {\n    const languageMap: Record<string, { category: string; syntax: string; paradigm: string }> = {\n      // Compiled Languages\n      'c': { category: 'compiled', syntax: 'c-like', paradigm: 'procedural' },\n      'cpp': { category: 'compiled', syntax: 'c-like', paradigm: 'oop' },\n      'csharp': { category: 'compiled', syntax: 'c-like', paradigm: 'oop' },\n      'java': { category: 'compiled', syntax: 'c-like', paradigm: 'oop' },\n      'go': { category: 'compiled', syntax: 'c-like', paradigm: 'procedural' },\n      'rust': { category: 'compiled', syntax: 'c-like', paradigm: 'systems' },\n      'swift': { category: 'compiled', syntax: 'swift', paradigm: 'oop' },\n      \n      // Interpreted Languages  \n      'python': { category: 'interpreted', syntax: 'python', paradigm: 'multi' },\n      'ruby': { category: 'interpreted', syntax: 'ruby', paradigm: 'oop' },\n      'javascript': { category: 'interpreted', syntax: 'javascript', paradigm: 'functional' },\n      'typescript': { category: 'interpreted', syntax: 'javascript', paradigm: 'functional' },\n      'php': { category: 'interpreted', syntax: 'php', paradigm: 'procedural' },\n      \n      // Functional Languages\n      'haskell': { category: 'functional', syntax: 'haskell', paradigm: 'pure-functional' },\n      'lisp': { category: 'functional', syntax: 'lisp', paradigm: 'functional' },\n      'clojure': { category: 'functional', syntax: 'lisp', paradigm: 'functional' },\n      'erlang': { category: 'functional', syntax: 'erlang', paradigm: 'functional' },\n      'elixir': { category: 'functional', syntax: 'ruby', paradigm: 'functional' },\n      'scala': { category: 'functional', syntax: 'scala', paradigm: 'functional' },\n      'fsharp': { category: 'functional', syntax: 'ml', paradigm: 'functional' },\n      \n      // Esoteric Languages\n      'brainfuck': { category: 'esoteric', syntax: 'symbolic', paradigm: 'imperative' },\n      'whitespace': { category: 'esoteric', syntax: 'whitespace', paradigm: 'stack' },\n      'lolcode': { category: 'esoteric', syntax: 'english', paradigm: 'procedural' },\n      'malbolge': { category: 'esoteric', syntax: 'symbolic', paradigm: 'functional' },\n      'befunge': { category: 'esoteric', syntax: 'symbolic', paradigm: '2d' },\n      'ook': { category: 'esoteric', syntax: 'ook', paradigm: 'brainfuck' },\n      'piet': { category: 'esoteric', syntax: 'visual', paradigm: 'stack' },\n      \n      // Blockchain Languages\n      'solidity': { category: 'blockchain', syntax: 'javascript', paradigm: 'contract' },\n      'vyper': { category: 'blockchain', syntax: 'python', paradigm: 'contract' },\n      'move': { category: 'blockchain', syntax: 'rust', paradigm: 'resource' },\n      \n      // Scientific Languages\n      'matlab': { category: 'scientific', syntax: 'matlab', paradigm: 'numerical' },\n      'r': { category: 'scientific', syntax: 'r', paradigm: 'statistical' },\n      'julia': { category: 'scientific', syntax: 'julia', paradigm: 'numerical' },\n      'mathematica': { category: 'scientific', syntax: 'mathematica', paradigm: 'symbolic' },\n      'octave': { category: 'scientific', syntax: 'matlab', paradigm: 'numerical' },\n      \n      // Assembly Languages  \n      'assembly': { category: 'assembly', syntax: 'assembly', paradigm: 'low-level' },\n      'nasm': { category: 'assembly', syntax: 'assembly', paradigm: 'low-level' },\n      'masm': { category: 'assembly', syntax: 'assembly', paradigm: 'low-level' },\n      \n      // Markup Languages\n      'html': { category: 'markup', syntax: 'xml', paradigm: 'declarative' },\n      'xml': { category: 'markup', syntax: 'xml', paradigm: 'declarative' },\n      'yaml': { category: 'markup', syntax: 'yaml', paradigm: 'declarative' },\n      'json': { category: 'markup', syntax: 'json', paradigm: 'data' },\n      'toml': { category: 'markup', syntax: 'ini', paradigm: 'config' },\n      \n      // Query Languages\n      'sql': { category: 'query', syntax: 'sql', paradigm: 'declarative' },\n      'cypher': { category: 'query', syntax: 'sql', paradigm: 'graph' },\n      'sparql': { category: 'query', syntax: 'sql', paradigm: 'rdf' },\n      \n      // Emerging Languages\n      'zig': { category: 'systems', syntax: 'c-like', paradigm: 'systems' },\n      'crystal': { category: 'compiled', syntax: 'ruby', paradigm: 'oop' },\n      'nim': { category: 'compiled', syntax: 'python', paradigm: 'meta' },\n      'carbon': { category: 'systems', syntax: 'c-like', paradigm: 'systems' },\n      'vale': { category: 'systems', syntax: 'c-like', paradigm: 'memory-safe' }\n    };\n    \n    return languageMap[lang] || { category: 'generic', syntax: 'c-like', paradigm: 'procedural' };\n  }\n\n  private generateLanguageSpecificSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    // Generate different types of samples based on language characteristics\n    switch (info.category) {\n      case 'esoteric':\n        return this.generateEsotericSample(lang, info);\n      case 'blockchain':\n        return this.generateBlockchainSample(lang, info);\n      case 'functional':\n        return this.generateFunctionalSample(lang, info);\n      case 'scientific':\n        return this.generateScientificSample(lang, info);\n      case 'markup':\n        return this.generateMarkupSample(lang, info);\n      case 'query':\n        return this.generateQuerySample(lang, info);\n      case 'assembly':\n        return this.generateAssemblySample(lang, info);\n      case 'systems':\n        return this.generateSystemsSample(lang, info);\n      default:\n        return this.generateStandardSample(lang, info);\n    }\n  }\n\n  private generateStandardSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    // Standard imperative/OOP languages\n    const templates: Record<string, string> = {\n      javascript: `function calculateTotal(items) {\n    let total = 0;\n    for (let i = 0; i < items.length; i++) {\n        total += items[i].price;\n    }\n    if (total > 100) {\n        total = total * 0.9; // 10% discount\n    }\n    return total.toFixed(2);\n}`,\n      \n      python: `def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item['price']\n    if total > 100:\n        total = total * 0.9  # 10% discount\n    return f\"$\" + str(round(total, 2))`,\n\n      java: `public class Calculator {\n    public static double calculateTotal(Item[] items) {\n        double total = 0;\n        for (int i = 0; i < items.length; i++) {\n            total += items[i].getPrice();\n        }\n        if (total > 100) {\n            total = total * 0.9;\n        }\n        return total;\n    }\n}`,\n\n      c: `#include <stdio.h>\n\ndouble calculateTotal(double prices[], int count) {\n    double total = 0.0;\n    for (int i = 0; i < count; i++) {\n        total += prices[i];\n    }\n    if (total > 100.0) {\n        total = total * 0.9;\n    }\n    return total;\n}\n\nint main() {\n    double prices[] = {10.5, 25.0, 15.75};\n    double result = calculateTotal(prices, 3);\n    printf(\"Total: %.2f\\\\n\", result);\n    return 0;\n}`,\n\n      cpp: `#include <iostream>\n#include <vector>\n\nclass Calculator {\npublic:\n    static double calculateTotal(const std::vector<double>& prices) {\n        double total = 0.0;\n        for (const auto& price : prices) {\n            total += price;\n        }\n        if (total > 100.0) {\n            total *= 0.9; // Apply discount\n        }\n        return total;\n    }\n};\n\nint main() {\n    std::vector<double> prices = {10.5, 25.0, 15.75};\n    double result = Calculator::calculateTotal(prices);\n    std::cout << \"Total: $\" << result << std::endl;\n    return 0;\n}`,\n\n      csharp: `using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Calculator \n{\n    public static decimal CalculateTotal(IEnumerable<decimal> prices) \n    {\n        decimal total = prices.Sum();\n        \n        if (total > 100) \n        {\n            total = total * 0.9m; // Apply 10% discount\n        }\n        \n        return Math.Round(total, 2);\n    }\n    \n    static void Main(string[] args) \n    {\n        decimal[] prices = {10.5m, 25.0m, 15.75m};\n        decimal result = CalculateTotal(prices);\n        Console.WriteLine($\"Total: ${result}\");\n    }\n}`,\n\n      go: `package main\n\nimport (\n    \"fmt\"\n)\n\ntype Item struct {\n    Name  string\n    Price float64\n}\n\nfunc calculateTotal(items []Item) float64 {\n    var total float64\n    \n    for _, item := range items {\n        total += item.Price\n    }\n    \n    if total > 100.0 {\n        total = total * 0.9 // Apply 10% discount\n    }\n    \n    return total\n}\n\nfunc main() {\n    items := []Item{\n        {\"Widget A\", 10.5},\n        {\"Widget B\", 25.0},\n        {\"Widget C\", 15.75},\n    }\n    \n    result := calculateTotal(items)\n    fmt.Printf(\"Total: $%.2f\\\\n\", result)\n}`,\n\n      rust: `#[derive(Debug)]\nstruct Item {\n    name: String,\n    price: f64,\n}\n\nimpl Item {\n    fn new(name: &str, price: f64) -> Self {\n        Item {\n            name: name.to_string(),\n            price,\n        }\n    }\n}\n\nfn calculate_total(items: &[Item]) -> f64 {\n    let total: f64 = items.iter().map(|item| item.price).sum();\n    \n    if total > 100.0 {\n        total * 0.9 // Apply 10% discount\n    } else {\n        total\n    }\n}\n\nfn main() {\n    let items = vec![\n        Item::new(\"Widget A\", 10.5),\n        Item::new(\"Widget B\", 25.0),\n        Item::new(\"Widget C\", 15.75),\n    ];\n    \n    let result = calculate_total(&items);\n    println!(\"Total: {:.2}\", result);\n}`,\n\n      php: `<?php\nclass Calculator {\n    public static function calculateTotal($items) {\n        $total = 0;\n        \n        foreach ($items as $item) {\n            $total += $item['price'];\n        }\n        \n        if ($total > 100) {\n            $total = $total * 0.9; // Apply 10% discount\n        }\n        \n        return round($total, 2);\n    }\n}\n\n$items = [\n    ['name' => 'Widget A', 'price' => 10.5],\n    ['name' => 'Widget B', 'price' => 25.0],\n    ['name' => 'Widget C', 'price' => 15.75]\n];\n\n$result = Calculator::calculateTotal($items);\necho \"Total: $\" . $result . PHP_EOL;\n?>`,\n\n      ruby: `class Calculator\n  def self.calculate_total(items)\n    total = items.sum { |item| item[:price] }\n    \n    if total > 100\n      total * 0.9  # Apply 10% discount\n    else\n      total\n    end\n  end\nend\n\nitems = [\n  { name: 'Widget A', price: 10.5 },\n  { name: 'Widget B', price: 25.0 },\n  { name: 'Widget C', price: 15.75 }\n]\n\nresult = Calculator.calculate_total(items)\nputs \"Total: $#{sprintf('%.2f', result)}\"`,\n\n      swift: `import Foundation\n\nstruct Item {\n    let name: String\n    let price: Double\n}\n\nclass Calculator {\n    static func calculateTotal(items: [Item]) -> Double {\n        let total = items.reduce(0) { $0 + $1.price }\n        \n        if total > 100 {\n            return total * 0.9  // Apply 10% discount\n        } else {\n            return total\n        }\n    }\n}\n\nlet items = [\n    Item(name: \"Widget A\", price: 10.5),\n    Item(name: \"Widget B\", price: 25.0),\n    Item(name: \"Widget C\", price: 15.75)\n]\n\nlet result = Calculator.calculateTotal(items: items)\nprint(String(format: \"Total: $%.2f\", result))`,\n\n      kotlin: `data class Item(val name: String, val price: Double)\n\nclass Calculator {\n    companion object {\n        fun calculateTotal(items: List<Item>): Double {\n            val total = items.sumOf { it.price }\n            \n            return if (total > 100) {\n                total * 0.9  // Apply 10% discount\n            } else {\n                total\n            }\n        }\n    }\n}\n\nfun main() {\n    val items = listOf(\n        Item(\"Widget A\", 10.5),\n        Item(\"Widget B\", 25.0),\n        Item(\"Widget C\", 15.75)\n    )\n    \n    val result = Calculator.calculateTotal(items)\n    println(\"Total: ${'$'}%.2f\".format(result))\n}`,\n\n      typescript: `interface Item {\n    name: string;\n    price: number;\n}\n\nclass Calculator {\n    static calculateTotal(items: Item[]): number {\n        const total = items.reduce((sum, item) => sum + item.price, 0);\n        \n        if (total > 100) {\n            return total * 0.9; // Apply 10% discount\n        }\n        \n        return Math.round(total * 100) / 100;\n    }\n}\n\nconst items: Item[] = [\n    { name: 'Widget A', price: 10.5 },\n    { name: 'Widget B', price: 25.0 },\n    { name: 'Widget C', price: 15.75 }\n];\n\nconst result = Calculator.calculateTotal(items);\nconsole.log(\\`Total: $\\${result.toFixed(2)}\\`);`\n    };\n\n    return templates[lang] || this.generateGenericStandardSample(lang, info);\n  }\n\n  private generateEsotericSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const esotericTemplates: Record<string, string> = {\n      brainfuck: `++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.`,\n      \n      whitespace: `   \\t  \\t  \n   \\t \\t\\t  \n   \\t\\t  \\t \n\\t\n\n \\t\n\n\n   \\t\\t    \n\\t\n\n \\t\n\n\n   \\t\\t   \\t\n\\t\n\n \\t\n\n\n\\t\n\\t \n\n\n`,\n\n      lolcode: `HAI 1.2\n    I HAS A total ITZ 0\n    I HAS A items ITZ A BUKKIT\n    items HAS A SRS 0 ITZ 10.5\n    items HAS A SRS 1 ITZ 25.0\n    items HAS A SRS 2 ITZ 15.75\n    \n    IM IN YR loop UPPIN YR i WILE DIFFRINT i AN 3\n        total R SUM OF total AN items'Z SRS i\n    IM OUTTA YR loop\n    \n    BOTH SAEM total AN BIGGR OF total AN 100, O RLY?\n        YA RLY\n            total R PRODUKT OF total AN \"0.9\"\n    OIC\n    \n    VISIBLE \"Total: \" total\nKTHXBYE`,\n\n      malbolge: \"(=<#9]~6ZY32Vx/4Rs+0No-&Jk)\\\"Fh}|Bcy?*z]Kw%oG4UUS0/@-ejc(:'8dc\",\n\n      befunge: `\"!dlroW ,olleH\">:#,_@`,\n\n      ook: `Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\nOok. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.\nOok. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.\nOok! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.`,\n\n      piet: `# Piet program (visual representation)\n# Red: Push 1   Yellow: Push 2   Blue: Add\n# Green: Duplicate   Purple: Output number\n# This is a textual representation of what would be colored blocks`,\n\n      intercal: `DO ,1 <- #13\nPLEASE DO ,1 SUB #1 <- #238\nDO ,1 SUB #2 <- #108\nDO ,1 SUB #3 <- #112\nDO ,1 SUB #4 <- #0\nDO ,1 SUB #5 <- #64\nDO ,1 SUB #6 <- #194\nPLEASE DO ,1 SUB #7 <- #48\nDO ,1 SUB #8 <- #22\nDO ,1 SUB #9 <- #248\nDO ,1 SUB #10 <- #168\nDO ,1 SUB #11 <- #24\nDO ,1 SUB #12 <- #16\nDO ,1 SUB #13 <- #162\nPLEASE READ OUT ,1\nPLEASE GIVE UP`,\n\n      shakespeare: `The Infamous Hello World Program.\n\nRomeo, a young man with a remarkable patience.\nJuliet, a likewise young woman of remarkable grace.\nOphelia, a remarkable woman much in love with the letter O.\nHamlet, the flatterer of Andersen Insulting A/S.\n\n                    Act I: Hamlet's insults and flattery.\n                    \n                    Scene I: The insulting of Romeo.`,\n\n      chef: `Hello World Souffle.\n\nThis recipe prints the immortal words \"Hello world!\", in a basically brute force way. It also makes a lot of food for one person.\n\nIngredients.\n72 g haricot beans\n101 eggs\n108 g lard\n111 cups oil\n32 zucchinis\n119 ml water\n114 g red salmon\n100 g dijon mustard\n33 potatoes\n\nMethod.\nPut potatoes into the mixing bowl. Put dijon mustard into the mixing bowl. Put lard into the mixing bowl. Put red salmon into the mixing bowl. Put oil into the mixing bowl. Put water into the mixing bowl. Put zucchinis into the mixing bowl. Put oil into the mixing bowl. Put lard into the mixing bowl. Put lard into the mixing bowl. Put eggs into the mixing bowl. Put haricot beans into the mixing bowl. Liquefy contents of the mixing bowl. Pour contents of the mixing bowl into the baking dish.\n\nServes 1.`\n    };\n\n    return esotericTemplates[lang] || `// ${lang.toUpperCase()} - Esoteric Programming Language\n# This language uses unique syntax patterns\n# Sample: Basic computation example\n${lang} specific syntax here`;\n  }\n\n  private generateBlockchainSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const blockchainTemplates: Record<string, string> = {\n      solidity: `// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ShoppingCart {\n    struct Item {\n        string name;\n        uint256 price;\n    }\n    \n    Item[] public items;\n    uint256 public discountThreshold = 100;\n    \n    function addItem(string memory _name, uint256 _price) public {\n        items.push(Item(_name, _price));\n    }\n    \n    function calculateTotal() public view returns (uint256) {\n        uint256 total = 0;\n        \n        for (uint256 i = 0; i < items.length; i++) {\n            total += items[i].price;\n        }\n        \n        if (total > discountThreshold) {\n            total = (total * 9) / 10; // 10% discount\n        }\n        \n        return total;\n    }\n    \n    function getItemCount() public view returns (uint256) {\n        return items.length;\n    }\n}`,\n\n      vyper: `# @version ^0.3.0\n\nstruct Item:\n    name: String[50]\n    price: uint256\n\nitems: public(DynArray[Item, 100])\ndiscount_threshold: public(uint256)\n\n@external\ndef __init__():\n    self.discount_threshold = 100\n\n@external\ndef add_item(_name: String[50], _price: uint256):\n    self.items.append(Item({name: _name, price: _price}))\n\n@external\n@view\ndef calculate_total() -> uint256:\n    total: uint256 = 0\n    \n    for item in self.items:\n        total += item.price\n    \n    if total > self.discount_threshold:\n        total = total * 9 / 10  # 10% discount\n    \n    return total\n\n@external\n@view\ndef get_item_count() -> uint256:\n    return len(self.items)`,\n\n      move: `module ShoppingCart {\n    use std::vector;\n\n    struct Item has store, drop {\n        name: vector<u8>,\n        price: u64,\n    }\n\n    struct Cart has key {\n        items: vector<Item>,\n        discount_threshold: u64,\n    }\n\n    public fun create_cart(account: &signer) {\n        let cart = Cart {\n            items: vector::empty<Item>(),\n            discount_threshold: 100,\n        };\n        move_to(account, cart);\n    }\n\n    public fun add_item(cart: &mut Cart, name: vector<u8>, price: u64) {\n        let item = Item { name, price };\n        vector::push_back(&mut cart.items, item);\n    }\n\n    public fun calculate_total(cart: &Cart): u64 {\n        let total = 0u64;\n        let i = 0;\n        \n        while (i < vector::length(&cart.items)) {\n            let item = vector::borrow(&cart.items, i);\n            total = total + item.price;\n            i = i + 1;\n        };\n        \n        if (total > cart.discount_threshold) {\n            total = total * 9 / 10  // 10% discount\n        };\n        \n        total\n    }\n}`\n    };\n\n    return blockchainTemplates[lang] || `// ${lang.toUpperCase()} - Blockchain Smart Contract\ncontract Calculator {\n    uint256 public total;\n    \n    function calculateTotal(uint256[] memory items) public pure returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < items.length; i++) {\n            sum += items[i];\n        }\n        return sum;\n    }\n}`;\n  }\n\n  private generateFunctionalSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const functionalTemplates: Record<string, string> = {\n      haskell: `calculateTotal :: [Double] -> Double\ncalculateTotal prices = \n    let total = sum prices\n    in if total > 100 then total * 0.9 else total\n\nmain :: IO ()\nmain = do\n    let prices = [10.5, 25.0, 15.75]\n    let result = calculateTotal prices\n    putStrLn $ \"Total: \" ++ show result`,\n\n      clojure: `(defn calculate-total [prices]\n  (let [total (reduce + prices)]\n    (if (> total 100)\n      (* total 0.9)\n      total)))\n\n(def prices [10.5 25.0 15.75])\n(def result (calculate-total prices))\n(println \"Total:\" result)`,\n\n      scala: `object Calculator {\n  def calculateTotal(prices: List[Double]): Double = {\n    val total = prices.sum\n    if (total > 100) total * 0.9 else total\n  }\n\n  def main(args: Array[String]): Unit = {\n    val prices = List(10.5, 25.0, 15.75)\n    val result = calculateTotal(prices)\n    println(f\"Total: $result%.2f\")\n  }\n}`,\n\n      lisp: `(defun calculate-total (prices)\n  (let ((total (apply '+ prices)))\n    (if (> total 100)\n        (* total 0.9)\n        total)))\n\n(setq prices '(10.5 25.0 15.75))\n(setq result (calculate-total prices))\n(format t \"Total: ~2,2f~%\" result)`,\n\n      erlang: `-module(calculator).\n-export([calculate_total/1, main/0]).\n\ncalculate_total(Prices) ->\n    Total = lists:sum(Prices),\n    if Total > 100 ->\n           Total * 0.9;\n       true ->\n           Total\n    end.\n\nmain() ->\n    Prices = [10.5, 25.0, 15.75],\n    Result = calculate_total(Prices),\n    io:format(\"Total: ~.2f~n\", [Result]).`,\n\n      elixir: `defmodule Calculator do\n  def calculate_total(prices) do\n    total = Enum.sum(prices)\n    if total > 100, do: total * 0.9, else: total\n  end\nend\n\nprices = [10.5, 25.0, 15.75]\nresult = Calculator.calculate_total(prices)\nIO.puts(\"Total: #{:io_lib.format('~.2f', [result])}\")`,\n\n      fsharp: `let calculateTotal prices =\n    let total = List.sum prices\n    if total > 100.0 then total * 0.9 else total\n\nlet prices = [10.5; 25.0; 15.75]\nlet result = calculateTotal prices\nprintfn \"Total: %.2f\" result`\n    };\n\n    return functionalTemplates[lang] || `-- ${lang.toUpperCase()} Functional Programming Sample\ncalculateTotal :: [Double] -> Double\ncalculateTotal xs = foldr (+) 0 xs`;\n  }\n\n  private generateScientificSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const scientificTemplates: Record<string, string> = {\n      matlab: `function total = calculateTotal(prices)\n    total = sum(prices);\n    if total > 100\n        total = total * 0.9;  % 10% discount\n    end\nend\n\n% Example usage\nprices = [10.5, 25.0, 15.75];\nresult = calculateTotal(prices);\nfprintf('Total: %.2f\\\\n', result);`,\n\n      r: `calculateTotal <- function(prices) {\n  total <- sum(prices)\n  if (total > 100) {\n    total <- total * 0.9  # 10% discount\n  }\n  return(total)\n}\n\n# Example usage  \nprices <- c(10.5, 25.0, 15.75)\nresult <- calculateTotal(prices)\ncat(\"Total:\", sprintf(\"%.2f\", result), \"\\\\n\")`,\n\n      julia: `function calculateTotal(prices::Vector{Float64})\n    total = sum(prices)\n    return total > 100 ? total * 0.9 : total\nend\n\n# Example usage\nprices = [10.5, 25.0, 15.75]\nresult = calculateTotal(prices)\nprintln(\"Total: \", round(result, digits=2))`,\n\n      mathematica: `calculateTotal[prices_List] := Module[{total},\n  total = Total[prices];\n  If[total > 100, total * 0.9, total]\n]\n\n(* Example usage *)\nprices = {10.5, 25.0, 15.75};\nresult = calculateTotal[prices];\nPrint[\"Total: \", NumberForm[result, 2]]`,\n\n      octave: `function total = calculateTotal(prices)\n  total = sum(prices);\n  if total > 100\n    total = total * 0.9;  % 10% discount\n  endif\nendfunction\n\n% Example usage\nprices = [10.5, 25.0, 15.75];\nresult = calculateTotal(prices);\nprintf('Total: %.2f\\\\n', result);`\n    };\n\n    return scientificTemplates[lang] || `% ${lang.toUpperCase()} Scientific Computing Sample\nfunction result = calculateTotal(data)\n    result = sum(data);\nend`;\n  }\n\n  private generateMarkupSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const markupTemplates: Record<string, string> = {\n      html: `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Shopping Cart Calculator</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Shopping Cart</h1>\n        <div id=\"items\">\n            <div class=\"item\">\n                <span class=\"name\">Widget A</span>\n                <span class=\"price\">$10.50</span>\n            </div>\n            <div class=\"item\">\n                <span class=\"name\">Widget B</span>\n                <span class=\"price\">$25.00</span>\n            </div>\n        </div>\n        <div class=\"total\">\n            <strong>Total: $35.50</strong>\n        </div>\n    </div>\n</body>\n</html>`,\n\n      xml: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<shoppingCart>\n    <items>\n        <item id=\"1\">\n            <name>Widget A</name>\n            <price>10.50</price>\n        </item>\n        <item id=\"2\">\n            <name>Widget B</name>\n            <price>25.00</price>\n        </item>\n    </items>\n    <calculation>\n        <subtotal>35.50</subtotal>\n        <discount>0.00</discount>\n        <total>35.50</total>\n    </calculation>\n</shoppingCart>`,\n\n      yaml: `shopping_cart:\n  items:\n    - name: \"Widget A\"\n      price: 10.50\n      quantity: 1\n    - name: \"Widget B\"\n      price: 25.00\n      quantity: 1\n  \n  calculation:\n    subtotal: 35.50\n    discount_rate: 0.10\n    discount_threshold: 100.00\n    final_total: 35.50`,\n\n      json: `{\n  \"shoppingCart\": {\n    \"items\": [\n      {\n        \"id\": 1,\n        \"name\": \"Widget A\",\n        \"price\": 10.50,\n        \"quantity\": 1\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Widget B\", \n        \"price\": 25.00,\n        \"quantity\": 1\n      }\n    ],\n    \"calculation\": {\n      \"subtotal\": 35.50,\n      \"discountRate\": 0.10,\n      \"discountThreshold\": 100.00,\n      \"finalTotal\": 35.50\n    }\n  }\n}`,\n\n      toml: `[shopping_cart]\ndiscount_threshold = 100.0\ndiscount_rate = 0.10\n\n[[shopping_cart.items]]\nname = \"Widget A\"\nprice = 10.50\nquantity = 1\n\n[[shopping_cart.items]]\nname = \"Widget B\"\nprice = 25.00\nquantity = 1\n\n[shopping_cart.calculation]\nsubtotal = 35.50\nfinal_total = 35.50`\n    };\n\n    return markupTemplates[lang] || `<!-- ${lang.toUpperCase()} Markup Sample -->\n<document>\n    <data>Sample content</data>\n</document>`;\n  }\n\n  private generateQuerySample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const queryTemplates: Record<string, string> = {\n      sql: `CREATE TABLE items (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    category VARCHAR(50)\n);\n\nINSERT INTO items (name, price, category) VALUES \n('Widget A', 10.50, 'Electronics'),\n('Widget B', 25.00, 'Electronics'),\n('Widget C', 15.75, 'Home');\n\nSELECT \n    SUM(price) as subtotal,\n    CASE \n        WHEN SUM(price) > 100 THEN SUM(price) * 0.9\n        ELSE SUM(price)\n    END as final_total\nFROM items;`,\n\n      cypher: `CREATE (a:Item {name: 'Widget A', price: 10.50, category: 'Electronics'})\nCREATE (b:Item {name: 'Widget B', price: 25.00, category: 'Electronics'})\nCREATE (c:Item {name: 'Widget C', price: 15.75, category: 'Home'})\n\nMATCH (item:Item)\nWITH SUM(item.price) as subtotal\nRETURN subtotal,\n       CASE WHEN subtotal > 100 THEN subtotal * 0.9 ELSE subtotal END as final_total`,\n\n      sparql: `PREFIX shop: <http://example.org/shop#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT ?total WHERE {\n  {\n    SELECT (SUM(?price) as ?subtotal) WHERE {\n      ?item rdf:type shop:Item ;\n            shop:price ?price .\n    }\n  }\n  BIND(IF(?subtotal > 100, ?subtotal * 0.9, ?subtotal) as ?total)\n}`\n    };\n\n    return queryTemplates[lang] || `-- ${lang.toUpperCase()} Query Language Sample\nSELECT * FROM data WHERE value > 0;`;\n  }\n\n  private generateAssemblySample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const assemblyTemplates: Record<string, string> = {\n      assembly: `section .data\n    prices dd 10.5, 25.0, 15.75, 0\n    result dd 0\n    hundred dd 100.0\n    discount dd 0.9\n    \nsection .text\n    global _start\n    \n_start:\n    xor eax, eax        ; clear accumulator\n    mov esi, prices     ; point to prices array\n    \nsum_loop:\n    fld dword [esi]     ; load price into FPU\n    fcomp dword [hundred] ; compare with zero\n    fstsw ax            ; store FPU status\n    sahf                ; transfer to CPU flags\n    jz done             ; if zero, we're done\n    \n    fadd                ; add to running total\n    add esi, 4          ; next price\n    jmp sum_loop\n    \ndone:\n    fst dword [result]  ; store result\n    \n    ; Exit system call\n    mov eax, 1          ; sys_exit\n    xor ebx, ebx        ; exit status\n    int 0x80`,\n\n      nasm: `section .data\n    msg db 'Total: ', 0\n    newline db 10, 0\n    \nsection .bss\n    total resd 1\n    \nsection .text\n    global _start\n    \n_start:\n    ; Initialize total to 0\n    mov eax, 0\n    mov [total], eax\n    \n    ; Add prices (simplified)\n    add eax, 1050   ; 10.50 * 100 for integer math\n    add eax, 2500   ; 25.00 * 100\n    add eax, 1575   ; 15.75 * 100\n    \n    ; Store result\n    mov [total], eax\n    \n    ; Exit\n    mov eax, 1      ; sys_exit\n    xor ebx, ebx    ; exit status  \n    int 0x80`,\n\n      masm: `.386\n.model flat, stdcall\n\n.data\n    prices REAL4 10.5, 25.0, 15.75, 0.0\n    total REAL4 ?\n    hundred REAL4 100.0\n    discount REAL4 0.9\n    \n.code\nstart:\n    finit                   ; initialize FPU\n    fldz                   ; load 0.0\n    \n    mov esi, OFFSET prices\n    \nsum_loop:\n    fld REAL4 PTR [esi]    ; load price\n    fcomp hundred          ; compare with 0\n    fstsw ax\n    sahf\n    jz done\n    \n    fadd                   ; add to total\n    add esi, 4\n    jmp sum_loop\n    \ndone:\n    fstp total             ; store total\n    \nend start`\n    };\n\n    return assemblyTemplates[lang] || `; ${lang.toUpperCase()} Assembly Language Sample\nsection .text\n    global _start\n    \n_start:\n    mov eax, 1      ; system call number for sys_exit\n    int 0x80        ; call kernel`;\n  }\n\n  private generateSystemsSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    const systemsTemplates: Record<string, string> = {\n      zig: `const std = @import(\"std\");\nconst print = std.debug.print;\n\nconst Item = struct {\n    name: []const u8,\n    price: f64,\n};\n\nfn calculateTotal(items: []const Item) f64 {\n    var total: f64 = 0.0;\n    \n    for (items) |item| {\n        total += item.price;\n    }\n    \n    if (total > 100.0) {\n        total *= 0.9; // Apply 10% discount\n    }\n    \n    return total;\n}\n\npub fn main() !void {\n    const items = [_]Item{\n        Item{ .name = \"Widget A\", .price = 10.5 },\n        Item{ .name = \"Widget B\", .price = 25.0 },\n        Item{ .name = \"Widget C\", .price = 15.75 },\n    };\n    \n    const result = calculateTotal(&items);\n    print(\"Total: {d:.2}\\\\n\", .{result});\n}`,\n\n      carbon: `package Main api;\n\nstruct Item {\n    var name: String;\n    var price: f64;\n}\n\nfn CalculateTotal(items: Array(Item)) -> f64 {\n    var total: f64 = 0.0;\n    \n    for (item: Item in items) {\n        total += item.price;\n    }\n    \n    if (total > 100.0) {\n        total *= 0.9;  // Apply 10% discount\n    }\n    \n    return total;\n}\n\nfn Main() -> i32 {\n    var items: Array(Item) = (\n        {.name = \"Widget A\", .price = 10.5},\n        {.name = \"Widget B\", .price = 25.0},\n        {.name = \"Widget C\", .price = 15.75}\n    );\n    \n    var result: f64 = CalculateTotal(items);\n    Print(\"Total: {0}\", result);\n    return 0;\n}`,\n\n      vale: `struct Item {\n    name str;\n    price f64;\n}\n\nfn calculateTotal(items &[]Item) f64 {\n    total mut = 0.0;\n    \n    each item in items {\n        set total = total + item.price;\n    }\n    \n    if (total > 100.0) {\n        set total = total * 0.9;  // Apply 10% discount\n    }\n    \n    ret total;\n}\n\nexported fn main() int {\n    items = [\n        Item(\"Widget A\", 10.5),\n        Item(\"Widget B\", 25.0),  \n        Item(\"Widget C\", 15.75)\n    ];\n    \n    result = calculateTotal(&items);\n    println(\"Total: \" + result);\n    ret 0;\n}`\n    };\n\n    return systemsTemplates[lang] || `// ${lang.toUpperCase()} Systems Programming Sample  \nfn main() {\n    // Sample systems programming code\n    let result = calculate_total(&[10.5, 25.0, 15.75]);\n    println!(\"Total: {:.2}\", result);\n}`;\n  }\n\n  private generateGenericStandardSample(lang: string, info: { category: string; syntax: string; paradigm: string }): string {\n    // Generic templates based on syntax patterns\n    if (info.syntax === 'python' || info.syntax === 'ruby') {\n      return `# ${lang.toUpperCase()} Sample Code\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total += item\n    if total > 100:\n        total = total * 0.9  # Apply discount\n    return total`;\n    } else if (info.syntax === 'c-like') {\n      return `// ${lang.toUpperCase()} Sample Code  \n#include <stdio.h>\n\ndouble calculateTotal(double items[], int count) {\n    double total = 0.0;\n    for (int i = 0; i < count; i++) {\n        total += items[i];\n    }\n    if (total > 100.0) {\n        total = total * 0.9;  // Apply discount\n    }\n    return total;\n}`;\n    } else {\n      return `// ${lang.toUpperCase()} Sample Code\nfunction calculateTotal(items) {\n    let total = 0;\n    for (let i = 0; i < items.length; i++) {\n        total += items[i];\n    }\n    if (total > 100) {\n        total = total * 0.9;  // Apply discount\n    }  \n    return total;\n}`;\n    }\n  }\n\n}\n\nexport const universalErrorAnalyzer = new UniversalErrorAnalyzer();\n","size_bytes":131565},"client/src/components/UserProfileMenu.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { \n  User, \n  Settings, \n  BarChart3, \n  Crown, \n  LogOut, \n  HelpCircle, \n  Star, \n  Trophy,\n  Zap,\n  Code,\n  ExternalLink,\n  Mail,\n  Calendar\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface UserProfileMenuProps {\n  className?: string;\n}\n\nexport default function UserProfileMenu({ className }: UserProfileMenuProps) {\n  const [isProfileOpen, setIsProfileOpen] = useState(false);\n  const [isAccountSettingsOpen, setIsAccountSettingsOpen] = useState(false);\n  const [isUsageBillingOpen, setIsUsageBillingOpen] = useState(false);\n  const [isHelpOpen, setIsHelpOpen] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const userId = 1; // In real app this would come from auth context\n\n  // Fetch real user profile data\n  const { data: userData, isLoading } = useQuery({\n    queryKey: [\"/api/user/profile\", userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/user/profile/${userId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch user profile\");\n      return response.json();\n    }\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/logout', {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been signed out of your account.\",\n      });\n      // In a real app, redirect to login page\n      window.location.href = '/';\n    },\n    onError: () => {\n      toast({\n        title: \"Logout failed\",\n        description: \"There was an error signing you out.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSignOut = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleViewProfile = () => {\n    setIsProfileOpen(true);\n  };\n\n  const handleAccountSettings = () => {\n    setIsAccountSettingsOpen(true);\n  };\n\n  const handleUsageBilling = () => {\n    setIsUsageBillingOpen(true);\n  };\n\n  const handleHelpSupport = () => {\n    setIsHelpOpen(true);\n  };\n\n  if (isLoading || !userData) {\n    return (\n      <Button variant=\"ghost\" className={`p-0 w-8 h-8 rounded-full ${className}`}>\n        <Avatar className=\"w-8 h-8 shadow-glow border border-blue-500/20\">\n          <AvatarFallback className=\"bg-gradient-primary text-white text-sm font-bold animate-pulse\">\n            ...\n          </AvatarFallback>\n        </Avatar>\n      </Button>\n    );\n  }\n\n  const expProgress = ((userData.experience % 1000) / 1000) * 100;\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className={`p-0 w-8 h-8 rounded-full ${className}`}>\n            <Avatar className=\"w-8 h-8 shadow-glow border border-blue-500/20\">\n              <AvatarFallback className=\"bg-gradient-primary text-white text-sm font-bold\">\n                U\n              </AvatarFallback>\n            </Avatar>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent \n          align=\"end\" \n          className=\"w-72 bg-dark-elevated border border-blue-500/20 shadow-xl\"\n        >\n          <DropdownMenuLabel className=\"pb-2\">\n            <div className=\"flex items-center gap-3 p-2\">\n              <Avatar className=\"w-12 h-12 shadow-glow\">\n                <AvatarFallback className=\"bg-gradient-primary text-white font-bold text-lg\">\n                  U\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-semibold text-text-primary\">{userData.name}</h3>\n                  <Badge variant=\"secondary\" className=\"bg-gradient-primary text-white text-xs\">\n                    <Crown className=\"w-3 h-3 mr-1\" />\n                    {userData.plan}\n                  </Badge>\n                </div>\n                <p className=\"text-xs text-text-secondary\">{userData.email}</p>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <div className=\"flex items-center gap-1 text-accent-blue\">\n                    <Star className=\"w-3 h-3\" />\n                    <span>Level {userData.level}</span>\n                  </div>\n                  <div className=\"flex-1 h-1 bg-dark rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-primary transition-all duration-500\"\n                      style={{ width: `${expProgress}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </DropdownMenuLabel>\n\n          <DropdownMenuSeparator className=\"bg-blue-500/20\" />\n\n          {/* Quick Stats */}\n          <div className=\"p-3 space-y-2\">\n            <h4 className=\"text-xs font-medium text-text-secondary uppercase tracking-wide\">\n              Quick Stats\n            </h4>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"flex items-center gap-2 text-xs\">\n                <Trophy className=\"w-4 h-4 text-accent-orange\" />\n                <span className=\"text-text-secondary\">{userData.achievements} Achievements</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-xs\">\n                <Code className=\"w-4 h-4 text-accent-green\" />\n                <span className=\"text-text-secondary\">{userData.codesSolved} Codes Fixed</span>\n              </div>\n            </div>\n          </div>\n\n          <DropdownMenuSeparator className=\"bg-blue-500/20\" />\n\n          <DropdownMenuItem \n            onClick={handleViewProfile}\n            className=\"flex items-center gap-3 p-3 hover:bg-blue-500/10 transition-colors cursor-pointer\"\n          >\n            <User className=\"w-4 h-4 text-accent-blue\" />\n            <span className=\"text-text-primary\">View Profile</span>\n          </DropdownMenuItem>\n\n          <DropdownMenuItem \n            onClick={handleAccountSettings}\n            className=\"flex items-center gap-3 p-3 hover:bg-blue-500/10 transition-colors cursor-pointer\"\n          >\n            <Settings className=\"w-4 h-4 text-accent-cyan\" />\n            <span className=\"text-text-primary\">Account Settings</span>\n          </DropdownMenuItem>\n\n          <DropdownMenuItem \n            onClick={handleUsageBilling}\n            className=\"flex items-center gap-3 p-3 hover:bg-blue-500/10 transition-colors cursor-pointer\"\n          >\n            <BarChart3 className=\"w-4 h-4 text-accent-purple\" />\n            <span className=\"text-text-primary\">Usage & Billing</span>\n          </DropdownMenuItem>\n\n          <DropdownMenuItem \n            onClick={handleHelpSupport}\n            className=\"flex items-center gap-3 p-3 hover:bg-blue-500/10 transition-colors cursor-pointer\"\n          >\n            <HelpCircle className=\"w-4 h-4 text-accent-green\" />\n            <span className=\"text-text-primary\">Help & Support</span>\n          </DropdownMenuItem>\n\n          <DropdownMenuSeparator className=\"bg-blue-500/20\" />\n\n          <DropdownMenuItem \n            onClick={handleSignOut}\n            className=\"flex items-center gap-3 p-3 hover:bg-red-500/10 transition-colors text-red-400 cursor-pointer\"\n            disabled={logoutMutation.isPending}\n          >\n            <LogOut className=\"w-4 h-4\" />\n            <span>{logoutMutation.isPending ? \"Signing out...\" : \"Sign Out\"}</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Detailed Profile Modal */}\n      <Dialog open={isProfileOpen} onOpenChange={setIsProfileOpen}>\n        <DialogContent className=\"max-w-2xl bg-dark-elevated border border-blue-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3 text-text-primary\">\n              <div className=\"p-2 bg-gradient-primary rounded-lg\">\n                <User className=\"w-5 h-5 text-white\" />\n              </div>\n              User Profile\n              <Badge variant=\"secondary\" className=\"bg-accent-blue/20 text-accent-blue\">\n                Pro Member\n              </Badge>\n            </DialogTitle>\n            <DialogDescription className=\"text-text-secondary\">\n              Your FixGenie coding journey and achievements\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Profile Header */}\n            <div className=\"flex items-center gap-4 p-4 glass rounded-xl\">\n              <Avatar className=\"w-20 h-20 shadow-glow border-2 border-blue-500/30\">\n                <AvatarFallback className=\"bg-gradient-primary text-white font-bold text-2xl\">\n                  U\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"flex items-center gap-3\">\n                  <h2 className=\"text-2xl font-bold text-text-primary\">{userData.name}</h2>\n                  <Badge className=\"bg-gradient-primary text-white\">\n                    <Crown className=\"w-4 h-4 mr-1\" />\n                    {userData.plan} Member\n                  </Badge>\n                </div>\n                <p className=\"text-text-secondary\">{userData.email}</p>\n                <p className=\"text-sm text-text-tertiary\">Member since {userData.joinDate}</p>\n                \n                {/* Experience Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-accent-blue font-medium\">Level {userData.level}</span>\n                    <span className=\"text-text-secondary\">{userData.experience}/{userData.nextLevelExp} XP</span>\n                  </div>\n                  <div className=\"w-full h-3 bg-dark rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-primary transition-all duration-1000 rounded-full\"\n                      style={{ width: `${expProgress}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"p-4 glass rounded-xl text-center space-y-2\">\n                <Trophy className=\"w-8 h-8 text-accent-orange mx-auto\" />\n                <div className=\"text-2xl font-bold text-text-primary\">{userData.achievements}</div>\n                <div className=\"text-sm text-text-secondary\">Achievements</div>\n              </div>\n              \n              <div className=\"p-4 glass rounded-xl text-center space-y-2\">\n                <Code className=\"w-8 h-8 text-accent-green mx-auto\" />\n                <div className=\"text-2xl font-bold text-text-primary\">{userData.codesSolved}</div>\n                <div className=\"text-sm text-text-secondary\">Codes Fixed</div>\n              </div>\n              \n              <div className=\"p-4 glass rounded-xl text-center space-y-2\">\n                <Zap className=\"w-8 h-8 text-accent-blue mx-auto\" />\n                <div className=\"text-2xl font-bold text-text-primary\">{userData.level}</div>\n                <div className=\"text-sm text-text-secondary\">Current Level</div>\n              </div>\n              \n              <div className=\"p-4 glass rounded-xl text-center space-y-2\">\n                <Star className=\"w-8 h-8 text-accent-purple mx-auto\" />\n                <div className=\"text-2xl font-bold text-text-primary\">4.9</div>\n                <div className=\"text-sm text-text-secondary\">Rating</div>\n              </div>\n            </div>\n\n            {/* Recent Achievements */}\n            <div className=\"space-y-3\">\n              <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2\">\n                <Trophy className=\"w-5 h-5 text-accent-orange\" />\n                Recent Achievements\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3 p-3 glass rounded-lg\">\n                  <div className=\"w-2 h-2 bg-accent-green rounded-full animate-pulse\" />\n                  <span className=\"text-text-primary\">Code Master - Fixed 150+ code issues</span>\n                  <Badge variant=\"secondary\" className=\"ml-auto bg-accent-green/20 text-accent-green text-xs\">\n                    New\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 glass rounded-lg\">\n                  <div className=\"w-2 h-2 bg-accent-blue rounded-full\" />\n                  <span className=\"text-text-primary\">Language Explorer - Used 25+ programming languages</span>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 glass rounded-lg\">\n                  <div className=\"w-2 h-2 bg-accent-purple rounded-full\" />\n                  <span className=\"text-text-primary\">AI Collaborator - Completed 100 AI-assisted fixes</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Account Settings Modal */}\n      <Dialog open={isAccountSettingsOpen} onOpenChange={setIsAccountSettingsOpen}>\n        <DialogContent className=\"max-w-2xl bg-dark-elevated border border-blue-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3 text-text-primary\">\n              <div className=\"p-2 bg-gradient-primary rounded-lg\">\n                <Settings className=\"w-5 h-5 text-white\" />\n              </div>\n              Account Settings\n            </DialogTitle>\n            <DialogDescription className=\"text-text-secondary\">\n              Manage your account preferences and security settings\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"p-4 glass rounded-xl space-y-3\">\n                <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5 text-accent-blue\" />\n                  Email & Notifications\n                </h3>\n                <p className=\"text-sm text-text-secondary\">\n                  Current: {userData?.email}\n                </p>\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\n                  Update Email\n                </Button>\n              </div>\n\n              <div className=\"p-4 glass rounded-xl space-y-3\">\n                <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5 text-accent-cyan\" />\n                  Preferences\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-text-secondary\">Dark Theme</span>\n                    <Badge variant=\"secondary\">Enabled</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-text-secondary\">Notifications</span>\n                    <Badge variant=\"secondary\">On</Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Usage & Billing Modal */}\n      <Dialog open={isUsageBillingOpen} onOpenChange={setIsUsageBillingOpen}>\n        <DialogContent className=\"max-w-2xl bg-dark-elevated border border-blue-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3 text-text-primary\">\n              <div className=\"p-2 bg-gradient-primary rounded-lg\">\n                <BarChart3 className=\"w-5 h-5 text-white\" />\n              </div>\n              Usage & Billing\n            </DialogTitle>\n            <DialogDescription className=\"text-text-secondary\">\n              Your current plan usage and billing information\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Current Plan */}\n            <div className=\"p-4 glass rounded-xl\">\n              <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2 mb-3\">\n                <Crown className=\"w-5 h-5 text-accent-orange\" />\n                Current Plan: {userData?.plan}\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center space-y-1\">\n                  <div className=\"text-2xl font-bold text-accent-blue\">2.4K</div>\n                  <div className=\"text-xs text-text-secondary\">Characters Used</div>\n                </div>\n                <div className=\"text-center space-y-1\">\n                  <div className=\"text-2xl font-bold text-accent-green\">50M</div>\n                  <div className=\"text-xs text-text-secondary\">Monthly Limit</div>\n                </div>\n                <div className=\"text-center space-y-1\">\n                  <div className=\"text-2xl font-bold text-accent-purple\">{userData?.totalAnalyses || 0}</div>\n                  <div className=\"text-xs text-text-secondary\">Analyses</div>\n                </div>\n                <div className=\"text-center space-y-1\">\n                  <div className=\"text-2xl font-bold text-accent-orange\">{userData?.languagesUsed || 0}</div>\n                  <div className=\"text-xs text-text-secondary\">Languages</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Billing History */}\n            <div className=\"p-4 glass rounded-xl space-y-3\">\n              <h3 className=\"text-lg font-semibold text-text-primary\">Recent Billing</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center p-2 bg-dark/20 rounded\">\n                  <span className=\"text-text-secondary\">December 2024</span>\n                  <Badge variant=\"secondary\">$29.99 - Paid</Badge>\n                </div>\n                <div className=\"flex justify-between items-center p-2 bg-dark/20 rounded\">\n                  <span className=\"text-text-secondary\">November 2024</span>\n                  <Badge variant=\"secondary\">$29.99 - Paid</Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Help & Support Modal */}\n      <Dialog open={isHelpOpen} onOpenChange={setIsHelpOpen}>\n        <DialogContent className=\"max-w-2xl bg-dark-elevated border border-blue-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3 text-text-primary\">\n              <div className=\"p-2 bg-gradient-primary rounded-lg\">\n                <HelpCircle className=\"w-5 h-5 text-white\" />\n              </div>\n              Help & Support\n            </DialogTitle>\n            <DialogDescription className=\"text-text-secondary\">\n              Get help with FixGenie and contact our support team\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Quick Help */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"p-4 glass rounded-xl space-y-3 cursor-pointer hover:bg-blue-500/5 transition-colors\">\n                <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2\">\n                  <ExternalLink className=\"w-5 h-5 text-accent-blue\" />\n                  Documentation\n                </h3>\n                <p className=\"text-sm text-text-secondary\">\n                  Learn how to use all FixGenie features\n                </p>\n              </div>\n\n              <div className=\"p-4 glass rounded-xl space-y-3 cursor-pointer hover:bg-blue-500/5 transition-colors\">\n                <h3 className=\"text-lg font-semibold text-text-primary flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5 text-accent-green\" />\n                  Contact Support\n                </h3>\n                <p className=\"text-sm text-text-secondary\">\n                  Get direct help from our team\n                </p>\n              </div>\n            </div>\n\n            {/* FAQ */}\n            <div className=\"p-4 glass rounded-xl space-y-3\">\n              <h3 className=\"text-lg font-semibold text-text-primary\">Frequently Asked Questions</h3>\n              <div className=\"space-y-2\">\n                <details className=\"p-2 bg-dark/20 rounded cursor-pointer\">\n                  <summary className=\"text-sm font-medium text-text-primary\">How do I analyze code in different languages?</summary>\n                  <p className=\"text-xs text-text-secondary mt-2\">\n                    Simply paste your code, select the language from the dropdown, and click \"Analyze Code\".\n                  </p>\n                </details>\n                <details className=\"p-2 bg-dark/20 rounded cursor-pointer\">\n                  <summary className=\"text-sm font-medium text-text-primary\">How does the AI mentor work?</summary>\n                  <p className=\"text-xs text-text-secondary mt-2\">\n                    The AI mentor provides personalized guidance and suggestions based on your code patterns.\n                  </p>\n                </details>\n                <details className=\"p-2 bg-dark/20 rounded cursor-pointer\">\n                  <summary className=\"text-sm font-medium text-text-primary\">What languages are supported?</summary>\n                  <p className=\"text-xs text-text-secondary mt-2\">\n                    FixGenie supports 320+ programming languages across 35+ specialized categories.\n                  </p>\n                </details>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":22521}}}